// Copyright (c) 2012-2013 The PPCoin developers
// Copyright (c) 2013-2015 The BioCoin developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <boost/assign/list_of.hpp>

#include "kernel.h"
#include "kernel_worker.h"
#include "txdb.h"

extern unsigned int nStakeMaxAge;
extern unsigned int nStakeTargetSpacing;

using namespace std;


// Protocol switch time for fixed kernel modifier interval
unsigned int nModifierSwitchTime  = 1413763200;    // Mon, 20 Oct 2014 00:00:00 GMT
unsigned int nModifierTestSwitchTime = 1397520000; // Tue, 15 Apr 2014 00:00:00 GMT

// Note: user must upgrade before the protocol switch deadline, otherwise it's required to
//   re-download the blockchain. The timestamp of upgrade is recorded in the blockchain
//   database.
unsigned int nModifierUpgradeTime = 0;

typedef std::map<int, unsigned int> MapModifierCheckpoints;

// Hard checkpoints of stake modifiers to ensure they are deterministic
static std::map<int, unsigned int> mapStakeModifierCheckpoints =
    boost::assign::map_list_of
    ( 2, 0x919e03c5 )
( 74, 0x87dac717 )
( 79, 0xb00469f6 )
( 92, 0x41c14f79 )
( 107, 0x96a97030 )
( 123, 0xddb0bb09 )
( 135, 0xd143fc65 )
( 140, 0x8e6f4918 )
( 153, 0x015d45e1 )
( 171, 0x43261e64 )
( 189, 0xf72a9969 )
( 208, 0x46c2fd11 )
( 220, 0xddae7d78 )
( 240, 0x6875eff7 )
( 253, 0x0539ac89 )
( 270, 0x282e6733 )
( 292, 0xb7cde51f )
( 309, 0x5975a559 )
( 326, 0x5506eb79 )
( 342, 0xc9d71e07 )
( 364, 0x1a9f01cf )
( 376, 0xd1c832b6 )
( 399, 0xebff856f )
( 412, 0x5a0694a0 )
( 436, 0x06c0d22c )
( 453, 0x9c9c0dbb )
( 467, 0x5df2e7dd )
( 484, 0x856bbf95 )
( 502, 0x5772a51e )
( 520, 0x3a4c6930 )
( 537, 0xa4f200ec )
( 558, 0x0395d52d )
( 578, 0x2f77ee19 )
( 594, 0x8b317162 )
( 609, 0xebaa16eb )
( 628, 0x241b9959 )
( 644, 0xcfd972e8 )
( 666, 0xb6242179 )
( 682, 0xbe3c9aeb )
( 695, 0x98d19b9c )
( 714, 0x3467fdf0 )
( 730, 0x2ecf15fd )
( 744, 0xe9f94369 )
( 765, 0x4b2fccad )
( 787, 0xfe9fe6b2 )
( 806, 0x57c7fb5e )
( 818, 0x888cc7c0 )
( 842, 0xd16e1dce )
( 851, 0x14085a12 )
( 871, 0xa95c27e3 )
( 889, 0xec954c58 )
( 903, 0x630b04d9 )
( 924, 0xa1fb8486 )
( 945, 0x1ac44192 )
( 957, 0x1699a39c )
( 975, 0x1e356c75 )
( 988, 0x44ba8b0a )
( 1012, 0xc709e0a9 )
( 1029, 0x61704a1b )
( 1042, 0x5e043174 )
( 1062, 0x642528bf )
( 1077, 0x3bd983f7 )
( 1094, 0x1e9b9e95 )
( 1118, 0x1cefbb5f )
( 1138, 0xb77862d8 )
( 1151, 0x6310f436 )
( 1164, 0xc6053b24 )
( 1183, 0x075e8fb2 )
( 1198, 0x0b6a25b9 )
( 1221, 0x8910b5ec )
( 1239, 0x52e98c3d )
( 1255, 0x9a73bdb9 )
( 1271, 0x7bc918cc )
( 1293, 0xf1b85b18 )
( 1306, 0x74bac354 )
( 1325, 0x2cb61748 )
( 1347, 0x30ee2cbf )
( 1365, 0x6347a0d1 )
( 1382, 0x649b1216 )
( 1390, 0x892fe963 )
( 1486, 0x13fbb1c0 )
( 1514, 0x07477ac8 )
( 1532, 0x0d275f0d )
( 1550, 0x86c06062 )
( 1568, 0xd08d1722 )
( 1586, 0x982c09ef )
( 1602, 0x0e29d140 )
( 1618, 0xad9f1a2c )
( 1632, 0xd1be9d52 )
( 1652, 0x529558f5 )
( 1669, 0x061275bd )
( 1689, 0x462dafc0 )
( 1712, 0x38a8840a )
( 1728, 0x74c5d19d )
( 1747, 0x819741f9 )
( 1765, 0x84c1f0be )
( 1775, 0xeaebfe44 )
( 1793, 0xbb83cf89 )
( 1808, 0xcadda3db )
( 1827, 0x4296b3e0 )
( 1843, 0xb76bce1f )
( 1858, 0x43646556 )
( 1877, 0xfe878ab8 )
( 1897, 0xbdf47bb2 )
( 1907, 0xc73be311 )
( 1919, 0x352f2866 )
( 1938, 0x05093951 )
( 1953, 0x65613df6 )
( 1966, 0xe109b550 )
( 1982, 0x5178fec0 )
( 2002, 0x2d116ea2 )
( 2026, 0xeeb35998 )
( 2043, 0x9c0bf340 )
( 2055, 0x28001c43 )
( 2072, 0x56c85b7e )
( 2092, 0x5eace67c )
( 2128, 0x1601957f )
( 2164, 0x3af0480a )
( 2191, 0xd944b2c5 )
( 2223, 0xce7eb023 )
( 2246, 0xfc0e7da9 )
( 2280, 0x356fc541 )
( 2304, 0xd4f8121b )
( 2322, 0xb38454ba )
( 2345, 0x7579ce31 )
( 2365, 0x9dfdc494 )
( 2385, 0x5eb78c24 )
( 2394, 0x53969aaf )
( 2417, 0x9785c9d7 )
( 2427, 0x5bd62d35 )
( 2448, 0x0ae9724c )
( 2463, 0x44b4d878 )
( 2481, 0x12d324dc )
( 2496, 0x0aa23eb7 )
( 2519, 0x2e148427 )
( 2533, 0xdaf45653 )
( 2548, 0xbe5f7cb3 )
( 2570, 0xfafb4f8b )
( 2588, 0x97fe4371 )
( 2598, 0xa35cb661 )
( 2614, 0x6edabf2a )
( 2629, 0x8ef1e2e0 )
( 2646, 0x1e943f18 )
( 2667, 0x8c1cbe95 )
( 2684, 0x5619ad93 )
( 2705, 0xa6e4680d )
( 2719, 0x6a295989 )
( 2742, 0x13bbe5e2 )
( 2754, 0x0e5361c5 )
( 2771, 0xeeb39faa )
( 2795, 0x60e7970a )
( 2805, 0x56454be0 )
( 2834, 0xf116554f )
( 2885, 0xf83ae55e )
( 2916, 0xef3c42f0 )
( 2941, 0x7ae17c31 )
( 2979, 0x73240629 )
( 3012, 0xd3c9533d )
( 3046, 0xc354e05e )
( 3076, 0x55cfc8f6 )
( 3105, 0x0e8d0fa2 )
( 3142, 0xb4c1f53c )
( 3176, 0x3039c743 )
( 3201, 0xf7c7a2b4 )
( 3227, 0xff68daf1 )
( 3245, 0x72730f70 )
( 3267, 0x80300375 )
( 3274, 0x2e87d904 )
( 3285, 0xe5197988 )
( 3302, 0xb25124e3 )
( 3313, 0x757c24df )
( 3334, 0x1eba0d2f )
( 3350, 0x62a10b63 )
( 3370, 0x4a047063 )
( 3386, 0x5a2ea9c7 )
( 3404, 0xb07e238d )
( 3421, 0xe3258a0e )
( 3437, 0x43cfb5ea )
( 3450, 0xe68162e6 )
( 3471, 0x47060ebc )
( 3483, 0xb59b4512 )
( 3493, 0xb53653e1 )
( 3530, 0xa002bc29 )
( 3567, 0xbd453054 )
( 3612, 0xe10a8a86 )
( 3646, 0x9c9f13f6 )
( 3679, 0xafce7b97 )
( 3709, 0x08c8eb1a )
( 3748, 0x6e5c1a94 )
( 3786, 0x75acab9c )
( 3820, 0x361ea7dd )
( 3856, 0x19fe30e2 )
( 3900, 0x8144a6af )
( 3929, 0x5823ea62 )
( 3961, 0x94f2c11d )
( 3991, 0x6a1ceebc )
( 4023, 0xa69ffb6e )
( 4065, 0x8b022841 )
( 4093, 0x8a70d093 )
( 4127, 0x1df217dc )
( 4153, 0x96ea7828 )
( 4188, 0x4d9ff87d )
( 4224, 0xaa21a362 )
( 4260, 0xe836d8cf )
( 4288, 0x699edbab )
( 4315, 0x80696428 )
( 4332, 0x241c3a4b )
( 4345, 0x497e9626 )
( 4362, 0xf52d9f6a )
( 4380, 0xf4e557df )
( 4403, 0x14e1ecbf )
( 4419, 0x237bad65 )
( 4441, 0x424897c1 )
( 4457, 0x189de8b9 )
( 4473, 0xea93038f )
( 4493, 0x0445154a )
( 4509, 0x9d627733 )
( 4527, 0x7a88ed5e )
( 4560, 0xd1d29eb5 )
( 4599, 0x9b36cc13 )
( 4644, 0x191ac2b9 )
( 4676, 0x2996ac1a )
( 4719, 0x64dbc689 )
( 4751, 0x925803ba )
( 4792, 0x62652252 )
( 4822, 0x75e65cb8 )
( 4853, 0xc2751d0c )
( 4886, 0xc5ea0b2f )
( 4929, 0xc460deec )
( 4960, 0xb213ce14 )
( 4990, 0x6fa47565 )
( 5026, 0x467a733e )
( 5054, 0x1f4ada61 )
( 5094, 0x6147c2b7 )
( 5130, 0xc16c17b1 )
( 5159, 0x26480960 )
( 5201, 0xe053bd8b )
( 5234, 0x32650201 )
( 5266, 0xc9255860 )
( 5309, 0xf9f7bbd6 )
( 5343, 0x63cc62b7 )
( 5380, 0x1dcc6f95 )
( 5424, 0x2a5138a4 )
( 5456, 0x615872ce )
( 5485, 0xa56d1f70 )
( 5518, 0xf8eb3837 )
( 5558, 0x89276d17 )
( 5585, 0x37d57bf8 )
( 5617, 0xbe72f6c6 )
( 5654, 0x93fd48cd )
( 5698, 0x2f1bd01c )
( 5729, 0x837bfce3 )
( 5759, 0x6c21ac60 )
( 5793, 0x246f2a00 )
( 5832, 0x9feb3429 )
( 5866, 0xa303f5e3 )
( 5902, 0x28779d4a )
( 5937, 0xc6d9790e )
( 5974, 0xd149667d )
( 6003, 0xee2b732b )
( 6043, 0x0a5ad92b )
( 6080, 0x99d64429 )
( 6109, 0xd591efc1 )
( 6143, 0xfeaeb5e8 )
( 6184, 0x5f1c5096 )
( 6213, 0x30167eb9 )
( 6246, 0xd4eb5b4b )
( 6292, 0x1be6bfee )
( 6311, 0x24e26500 )
( 6343, 0x1cda1b82 )
( 6377, 0xbe18f70f )
( 6414, 0xc79acfdc )
( 6454, 0x44a8a739 )
( 6494, 0xabcfd565 )
( 6514, 0x86eb31f7 )
( 6541, 0x5aee546f )
( 6582, 0x4be85391 )
( 6614, 0xe4d05272 )
( 6643, 0x4cf6dc3a )
( 6676, 0x8a28d75d )
( 6718, 0x2d1a3784 )
( 6749, 0xf6b180ed )
( 6783, 0x0ab437d3 )
( 6819, 0x5970dcb1 )
( 6855, 0xc59f4b89 )
( 6885, 0x4546ff17 )
( 6919, 0x60b01838 )
( 6954, 0x8949653e )
( 6987, 0x89009005 )
( 7033, 0x1b15becd )
( 7067, 0xbc97c77b )
( 7097, 0xb6a83648 )
( 7133, 0xb0dfedaf )
( 7165, 0x1662f553 )
( 7211, 0x1c8847ba )
( 7238, 0x28323c25 )
( 7272, 0xff19223c )
( 7306, 0x69e7ce45 )
( 7340, 0xf1347079 )
( 7379, 0x5d373b67 )
( 7418, 0x8b28a4e1 )
( 7446, 0xc074f0d8 )
( 7476, 0x163d90a4 )
( 7514, 0xf1aca2b0 )
( 7544, 0x4f4ad8f7 )
( 7581, 0x315dd349 )
( 7619, 0xeabe27f9 )
( 7657, 0xd2c16b19 )
( 7692, 0x3506434c )
( 7732, 0x76524eb2 )
( 7762, 0x2b4c2ba7 )
( 7798, 0x5d46cc16 )
( 7827, 0x5a5d1f89 )
( 7864, 0x6222f7a8 )
( 7900, 0x4830c75f )
( 7926, 0x54bbdfce )
( 7967, 0x2f313872 )
( 7996, 0xde7e624f )
( 8037, 0x680db502 )
( 8073, 0x3b65c0b8 )
( 8108, 0x1e4734be )
( 8141, 0x838aeecb )
( 8177, 0x8920e9fd )
( 8209, 0x4cf85041 )
( 8246, 0x58eb5028 )
( 8286, 0xe7fe3773 )
( 8320, 0xca867303 )
( 8344, 0xeb0798ed )
( 8385, 0xa96c463c )
( 8420, 0x7a04d042 )
( 8457, 0x1a0ac77e )
( 8494, 0x9739426a )
( 8528, 0x157562b2 )
( 8571, 0xa1a5d1fb )
( 8601, 0x9baa8284 )
( 8638, 0x37d83ede )
( 8670, 0xff89a1b5 )
( 8708, 0x39081c39 )
( 8738, 0x1dfebdc0 )
( 8770, 0x5dda18ee )
( 8803, 0xe1a84778 )
( 8841, 0xff0eadf1 )
( 8872, 0xfbe490e5 )
( 8905, 0x8267f36a )
( 8942, 0x671552c4 )
( 8971, 0xbd95bfb1 )
( 9012, 0xc610338c )
( 9050, 0x73e65140 )
( 9083, 0xb4b2ffe8 )
( 9118, 0x00fc6bbc )
( 9153, 0x7ac8ea84 )
( 9176, 0x2f863c40 )
( 9216, 0x6f446655 )
( 9250, 0xfe908084 )
( 9281, 0x0e7b422c )
( 9316, 0x770977df )
( 9350, 0x72aa3a0e )
( 9393, 0x6cbcc858 )
( 9432, 0x3345d2c7 )
( 9460, 0x69d00fda )
( 9490, 0x0fb79ff8 )
( 9529, 0xdcf7c91b )
( 9565, 0x5fd499a0 )
( 9601, 0x585c6a22 )
( 9639, 0x15e1bc3b )
( 9666, 0x185921fe )
( 9705, 0x505ffc61 )
( 9738, 0x16e20b5b )
( 9770, 0x7cb794d5 )
( 9800, 0x68ce55d7 )
( 9836, 0x4990128d )
( 9869, 0xfc6214da )
( 9904, 0x0986dc6d )
( 9945, 0xcd5ca994 )
( 9968, 0x0b3592fa )
( 10007, 0xa957cac4 )
( 10040, 0x0ed13547 )
( 10082, 0xca50bda7 )
( 10117, 0xa722db89 )
( 10154, 0x6eabd4ed )
( 10188, 0x1c63e1ad )
( 10218, 0x30eba488 )
( 10263, 0xf44940b5 )
( 10298, 0x9c568030 )
( 10336, 0x7a43e9d9 )
( 10377, 0x2c194b92 )
( 10411, 0x58b1ef51 )
( 10446, 0xfe6241cf )
( 10476, 0x3c632b2f )
( 10512, 0x870b78a4 )
( 10547, 0x6d26b581 )
( 10576, 0xa30f9b5d )
( 10613, 0xa43807a5 )
( 10649, 0x7bb9c544 )
( 10686, 0xbcc6684a )
( 10721, 0xc1df1a4a )
( 10755, 0x76c85934 )
( 10787, 0x90b6195d )
( 10819, 0xd32ad3d6 )
( 10858, 0x2deb51d5 )
( 10901, 0x214a7e51 )
( 10936, 0xcbf51963 )
( 10970, 0xcdabbb79 )
( 11006, 0x4c986fd7 )
( 11043, 0x2a306faf )
( 11079, 0xf0fc2ea0 )
( 11108, 0x53aa4172 )
( 11140, 0x7fce3a5c )
( 11173, 0x86112a75 )
( 11206, 0xc5d218b8 )
( 11240, 0x4e5321c5 )
( 11275, 0xb0f83945 )
( 11303, 0x5f2dad7e )
( 11332, 0x4f18f8f4 )
( 11369, 0x2c550ac4 )
( 11405, 0x4c1ef79d )
( 11435, 0x02bf747b )
( 11470, 0x928627f9 )
( 11492, 0x70916a7e )
( 11525, 0x77b1ce21 )
( 11553, 0x8c8a1e84 )
( 11599, 0x6441a5f6 )
( 11633, 0x6ca15849 )
( 11660, 0x25a11bbb )
( 11695, 0x1bfe4e27 )
( 11726, 0xc6339939 )
( 11766, 0x4e1d1d12 )
( 11802, 0x91416357 )
( 11834, 0xdb347a6e )
( 11868, 0x5af4f5e4 )
( 11903, 0x21af2d50 )
( 11934, 0x250442c8 )
( 11968, 0x736d308d )
( 12011, 0x8ce877c8 )
( 12030, 0x033eb410 )
( 12062, 0x65ed25d8 )
( 12094, 0x66033672 )
( 12134, 0x6b06d0f3 )
( 12168, 0x0956838e )
( 12203, 0x71a04bf4 )
( 12243, 0x04dfc0f0 )
( 12285, 0xaca38338 )
( 12320, 0xe22a68fa )
( 12357, 0x5add9055 )
( 12388, 0xe9205857 )
( 12421, 0xbf3d8084 )
( 12455, 0x0545ccd4 )
( 12490, 0x57f22933 )
( 12525, 0xb815dbd9 )
( 12563, 0xd7db5cb8 )
( 12598, 0x7100ee35 )
( 12626, 0xa9ae1529 )
( 12662, 0x19f46d33 )
( 12699, 0x0595fd2e )
( 12735, 0xbca8bf37 )
( 12777, 0x098ac728 )
( 12804, 0xf6c6f9c5 )
( 12835, 0x8bdf9491 )
( 12870, 0x735191de )
( 12888, 0xee11fe8e )
( 12917, 0x6b172dbc )
( 12943, 0x1e85c064 )
( 12981, 0x1cbfc88c )
( 13021, 0x0c6ad560 )
( 13055, 0x6d750dbe )
( 13085, 0x744fb122 )
( 13118, 0xcdb57e7b )
( 13142, 0xeb12e117 )
( 13179, 0x54986bde )
( 13211, 0x80fea12d )
( 13245, 0xa31a4258 )
( 13283, 0x621acc4f )
( 13323, 0x3bde903b )
( 13349, 0xb8eadb47 )
( 13389, 0xdd9297fd )
( 13426, 0xe2809e32 )
( 13466, 0x43573e59 )
( 13506, 0x08791165 )
( 13534, 0x4b814371 )
( 13569, 0x71eef617 )
( 13602, 0x27d84160 )
( 13641, 0x1387a980 )
( 13680, 0x27fa9217 )
( 13713, 0x34f016f9 )
( 13740, 0x62612b0d )
( 13767, 0xb001a367 )
( 13803, 0xd76e6410 )
( 13844, 0x86c8c5ae )
( 13881, 0x95f19fe4 )
( 13905, 0x6a9d63c7 )
( 13936, 0xf5ff856e )
( 13974, 0x27eb916e )
( 14009, 0xe4aa2a67 )
( 14042, 0x677e3a32 )
( 14078, 0x580ba1e1 )
( 14113, 0x70d2be7f )
( 14145, 0x06b6aea4 )
( 14182, 0xee544bb2 )
( 14217, 0x0fd098ab )
( 14255, 0x76c5d031 )
( 14291, 0xae334492 )
( 14324, 0xf3804ab7 )
( 14357, 0x38c13041 )
( 14399, 0xcb2c5ed2 )
( 14434, 0xf21bcee3 )
( 14478, 0x730cfb31 )
( 14505, 0xed1eedd6 )
( 14544, 0x9563b4e2 )
( 14582, 0x52faf720 )
( 14608, 0x34ff4ae3 )
( 14636, 0xd4bb866c )
( 14667, 0x1ed6a90f )
( 14696, 0xb806d037 )
( 14730, 0x598aa778 )
( 14770, 0x7a12340c )
( 14799, 0xc6aed7a8 )
( 14834, 0xa9059553 )
( 14877, 0x51ed919f )
( 14912, 0x8a30b153 )
( 14951, 0xcc768af1 )
( 14980, 0x79c840f0 )
( 15013, 0x85ad639f )
( 15046, 0xe5629308 )
( 15084, 0x3551e15c )
( 15117, 0x90ca3c55 )
( 15150, 0x22ab405e )
( 15191, 0x341dd679 )
( 15221, 0xa4016933 )
( 15260, 0x26baa15e )
( 15300, 0xad985120 )
( 15331, 0x704aef88 )
( 15367, 0x4126daf9 )
( 15400, 0x0251c643 )
( 15433, 0x11545da4 )
( 15473, 0x21e16169 )
( 15509, 0x576c4407 )
( 15546, 0x29184b5b )
( 15573, 0x16dfc993 )
( 15605, 0x87cf6d35 )
( 15644, 0x8b3fc869 )
( 15676, 0x5d0f67c2 )
( 15717, 0x95551dc8 )
( 15756, 0x5819750e )
( 15787, 0xf82484e7 )
( 15831, 0x1fb726a2 )
( 15865, 0x187a8589 )
( 15900, 0x62fde5ea )
( 15929, 0x6fafd631 )
( 15961, 0xd9c55672 )
( 15992, 0xdc44684c )
( 16033, 0xe75f8583 )
( 16054, 0x0b0efe69 )
( 16091, 0xa65e90d3 )
( 16127, 0x6994f271 )
( 16159, 0xc4512355 )
( 16192, 0x63d3e753 )
( 16231, 0x09be0ffb )
( 16263, 0x01fb5784 )
( 16293, 0xd351a3d0 )
( 16321, 0xddc1813d )
( 16358, 0x83981798 )
( 16396, 0x7373f065 )
( 16436, 0x7e9a92d1 )
( 16465, 0x92da7be9 )
( 16496, 0x8463177f )
( 16526, 0x71a1f050 )
( 16560, 0x9ba1263d )
( 16584, 0x5ad2ad84 )
( 16624, 0xcb3d01d3 )
( 16659, 0x8ccd3465 )
( 16695, 0x3c5544c9 )
( 16731, 0xf6bc3b5b )
( 16770, 0x119550f8 )
( 16805, 0xda24a6d9 )
( 16839, 0x16b65a8a )
( 16881, 0xb5bc0d17 )
( 16910, 0xed2d9983 )
( 16946, 0xb3a9367b )
( 16979, 0x391834e0 )
( 17015, 0x8308469a )
( 17048, 0xf577db7c )
( 17090, 0xa8d24c2e )
( 17110, 0x3de50bef )
( 17152, 0xee3696a7 )
( 17186, 0xeea0528a )
( 17222, 0xd46c97af )
( 17261, 0xf91a85e3 )
( 17290, 0x88e90486 )
( 17324, 0x83037a03 )
( 17358, 0xfc46eb05 )
( 17389, 0x3d997127 )
( 17430, 0xfed9d4d3 )
( 17459, 0xd6c8d5d1 )
( 17497, 0xa98ef2cb )
( 17534, 0x5bdeb87f )
( 17566, 0x28d444b8 )
( 17597, 0x1cceb8d2 )
( 17637, 0x30dbc38f )
( 17670, 0x707c8475 )
( 17700, 0xd5c5230e )
( 17735, 0xa1f70795 )
( 17765, 0xfb46923e )
( 17801, 0xfc81254d )
( 17827, 0xc984e1ef )
( 17870, 0x49a743d5 )
( 17907, 0x554b403e )
( 17942, 0x27b05d6e )
( 17980, 0xc1ecf470 )
( 18014, 0xb2e4f9c7 )
( 18048, 0x3849e681 )
( 18089, 0x373687cc )
( 18124, 0x99099fd8 )
( 18159, 0x4427dd98 )
( 18193, 0x6ae27230 )
( 18226, 0xe490472e )
( 18260, 0xb88010fe )
( 18298, 0xfebca252 )
( 18332, 0x440cd40b )
( 18366, 0x90dcac12 )
( 18399, 0x296c9937 )
( 18432, 0x243ae705 )
( 18464, 0x12e71c1b )
( 18501, 0xe5f405c3 )
( 18540, 0xdfd55a47 )
( 18574, 0xbc84363a )
( 18605, 0x0b0ec2eb )
( 18644, 0x4f2c7615 )
( 18678, 0x4f7bd44f )
( 18715, 0x33f896ac )
( 18747, 0x6702e67a )
( 18787, 0xecab9ac6 )
( 18825, 0xbb7db869 )
( 18857, 0xa633ec1e )
( 18893, 0x6265894a )
( 18931, 0xfaa02054 )
( 18968, 0x2a3ec0e9 )
( 19004, 0x5cfeb9be )
( 19039, 0xd44e0adc )
( 19063, 0xc7b058db )
( 19100, 0x0fc71f38 )
( 19136, 0x9857029d )
( 19166, 0x551e8ce2 )
( 19204, 0xe8b227bc )
( 19243, 0xc89af4c2 )
( 19280, 0x3c94243d )
( 19318, 0x8780baef )
( 19354, 0x66cc6b13 )
( 19392, 0x309edfa9 )
( 19426, 0xe1971503 )
( 19459, 0x97e591cf )
( 19487, 0x843a35e5 )
( 19523, 0xf69649cd )
( 19564, 0xf249ec78 )
( 19601, 0x0ae4e0b5 )
( 19627, 0x22abdf56 )
( 19659, 0x1d673a1a )
( 19697, 0x4a00ef02 )
( 19723, 0x982e4fd7 )
( 19759, 0x10a0f5bf )
( 19793, 0x817e70b3 )
( 19826, 0x85205cab )
( 19851, 0xbcf2fd31 )
( 19885, 0xcf1086ea )
( 19927, 0xb479840b )
( 19960, 0x3d455d15 )
( 19993, 0x3f60c32d )
( 20025, 0x687a1d45 )
( 20070, 0x95dbfcbf )
( 20097, 0x774db5ac )
( 20133, 0x6273d5e4 )
( 20167, 0xbee79434 )
( 20195, 0x3097c34f )
( 20234, 0x5ac5198a )
( 20271, 0xea8496b0 )
( 20302, 0x10183b62 )
( 20333, 0x1c3e68a9 )
( 20369, 0x35ff8baf )
( 20407, 0x0965bca4 )
( 20441, 0x43f312ed )
( 20480, 0x4e8c6e0b )
( 20511, 0xc4596021 )
( 20527, 0x61b862d8 )
( 20557, 0xd3a63639 )
( 20587, 0x2b648880 )
( 20613, 0x4e5c4ce2 )
( 20630, 0x78b39798 )
( 20651, 0xff095eab )
( 20662, 0x74144261 )
( 20685, 0x24e2ee56 )
( 20703, 0x5df58703 )
( 20726, 0x3b3ab7ee )
( 20763, 0xe411224b )
( 20793, 0x587150a7 )
( 20829, 0x0804fb46 )
( 20863, 0x914aa08e )
( 20895, 0x08beb100 )
( 20925, 0x746b3d23 )
( 20964, 0xb9ab0bda )
( 21000, 0x88a8ddf3 )
( 21035, 0x2ce5b1fe )
( 21072, 0x7128bec5 )
( 21103, 0xf3355e70 )
( 21139, 0x34977ed4 )
( 21175, 0xc1220e20 )
( 21203, 0x5b159099 )
( 21238, 0xf024eaca )
( 21277, 0x4f0790ab )
( 21310, 0x5664965f )
( 21339, 0x3ff3a426 )
( 21377, 0xe9854161 )
( 21411, 0xa34d509e )
( 21439, 0xd766e384 )
( 21472, 0x085dae96 )
( 21512, 0x113e2bdd )
( 21551, 0x10ada99d )
( 21580, 0x4152e58b )
( 21617, 0xd324df46 )
( 21655, 0xb4407b36 )
( 21685, 0x831caa0c )
( 21721, 0x0b308ab2 )
( 21751, 0x8418c7ae )
( 21783, 0x359ec8d8 )
( 21821, 0xa4563a0a )
( 21855, 0xd85545b3 )
( 21888, 0xb9ba92fe )
( 21925, 0x903f81ee )
( 21961, 0xa361ea67 )
( 22002, 0x0b420213 )
( 22035, 0x101e3e83 )
( 22062, 0x9733c6e5 )
( 22095, 0x2f792303 )
( 22143, 0xbb187c19 )
( 22170, 0x84d94ba4 )
( 22205, 0xf231313c )
( 22240, 0xbb569211 )
( 22277, 0x24e07639 )
( 22314, 0xe376bf07 )
( 22351, 0xeec0d9eb )
( 22388, 0xd91eaf81 )
( 22422, 0xce13db02 )
( 22449, 0xfa5069de )
( 22475, 0xa066ebc5 )
( 22514, 0x3987bc32 )
( 22544, 0xc52d727b )
( 22584, 0x47df38b5 )
( 22614, 0xd203dc29 )
( 22642, 0x68d045ae )
( 22680, 0xa805df8d )
( 22712, 0x7b6601f4 )
( 22759, 0x2f265395 )
( 22796, 0xbda44218 )
( 22830, 0x7de20c8f )
( 22871, 0x2f4ac92a )
( 22896, 0xb8ef6cfa )
( 22931, 0x41960eb2 )
( 22957, 0x6462bfe0 )
( 22994, 0x73df50ee )
( 23033, 0xd7bbb7e0 )
( 23066, 0x0efc60bd )
( 23105, 0x5d0b746f )
( 23142, 0xb3527e11 )
( 23165, 0x65c38024 )
( 23197, 0x3f37db4f )
( 23233, 0xed7a5c36 )
( 23267, 0xe815c32c )
( 23294, 0x5708adbf )
( 23326, 0xc8fde30b )
( 23363, 0x317b560a )
( 23398, 0xeaa30c92 )
( 23434, 0x5c9b2b74 )
( 23471, 0x7eae4718 )
( 23506, 0x463516de )
( 23533, 0x0262baa6 )
( 23573, 0xabee9bad )
( 23602, 0x745a8151 )
( 23643, 0x853a846f )
( 23678, 0x02445713 )
( 23707, 0x47c1ca9f )
( 23746, 0xef38e174 )
( 23768, 0xae61e81a )
( 23806, 0x681a0c7c )
( 23839, 0x72e8c230 )
( 23873, 0xd5f1a78f )
( 23909, 0xe190005e )
( 23946, 0xe1376115 )
( 23986, 0xa34370c9 )
( 24012, 0x00b9b6fd )
( 24042, 0x7e85b6ff )
( 24082, 0x3305b6e1 )
( 24117, 0x59c4536a )
( 24151, 0xdfde9823 )
( 24187, 0xdb63801a )
( 24217, 0x7c340e0d )
( 24254, 0xdb43fb99 )
( 24287, 0x7aa72bfa )
( 24327, 0x7cd928ee )
( 24359, 0xf56c8ff6 )
( 24392, 0x351e6492 )
( 24433, 0x11704baa )
( 24470, 0xd4df9fcb )
( 24501, 0x28121966 )
( 24536, 0x0429fbf6 )
( 24574, 0xb2c0fdb9 )
( 24607, 0xf4a97523 )
( 24644, 0x7fcac88a )
( 24680, 0x947ba6f4 )
( 24716, 0x91414eb7 )
( 24747, 0xe47472e3 )
( 24778, 0xeb2cf708 )
( 24816, 0x030eb315 )
( 24836, 0xef85d842 )
( 24855, 0x4193b8ff )
( 24885, 0x8d1dcec9 )
( 24924, 0xb05fa04e )
( 24959, 0x0d924641 )
( 24995, 0xa11614af )
( 25029, 0x7f43aa06 )
( 25069, 0x5069a602 )
( 25104, 0x8ca49389 )
( 25138, 0xd463ad38 )
( 25178, 0x91176278 )
( 25216, 0xb45745bc )
( 25248, 0x73c27f86 )
( 25283, 0xb5010063 )
( 25315, 0xebd92a01 )
( 25355, 0xc74c6955 )
( 25382, 0x576822b4 )
( 25418, 0xe881cefb )
( 25450, 0x9f6ef2a2 )
( 25492, 0xeb002d0d )
( 25521, 0xb85130b8 )
( 25557, 0x7ed21cab )
( 25587, 0x10046381 )
( 25619, 0x56aa4bef )
( 25651, 0x40682a36 )
( 25691, 0x8f5be5d3 )
( 25723, 0x2d19af5e )
( 25770, 0x97cd19f4 )
( 25802, 0x09a23faf )
( 25834, 0xbe6b96e8 )
( 25864, 0xfd23afcb )
( 25899, 0x01272bfe )
( 25933, 0x0728f1f7 )
( 25969, 0x704a97d6 )
( 26006, 0xb3f9443c )
( 26036, 0xceb3b975 )
( 26062, 0x837b6ee8 )
( 26096, 0x2d28108c )
( 26123, 0xa66c4497 )
( 26158, 0x9eb5e15d )
( 26191, 0x96653114 )
( 26232, 0xe5c71bff )
( 26261, 0x72c365e1 )
( 26281, 0x37715a3d )
( 26297, 0x4132c760 )
( 26317, 0xfa6464dd )
( 26335, 0x13b3aeea )
( 26350, 0x25db43ba )
( 26371, 0xb0071144 )
( 26391, 0xdd06547a )
( 26403, 0x02153cae )
( 26423, 0xc28c5a9e )
( 26440, 0xbd04c968 )
( 26456, 0x00697a29 )
( 26473, 0x2d530e79 )
( 26487, 0x892ffa3d )
( 26504, 0xfaae1a56 )
( 26525, 0x4264f46d )
( 26539, 0xd3f06cf9 )
( 26559, 0xb73b8994 )
( 26570, 0xffff838d )
( 26587, 0x4352fc5d )
( 26606, 0x98edeaec )
( 26625, 0x855a4d7b )
( 26643, 0x0bad972f )
( 26660, 0x8004b22f )
( 26677, 0x37db11b6 )
( 26701, 0xdc0399d3 )
( 26709, 0x74ffbc25 )
( 26728, 0x2ee28b14 )
( 26745, 0xf7afa8a5 )
( 26761, 0xb0fae02d )
( 26777, 0xe08f884d )
( 26799, 0xc8e67302 )
( 26821, 0x88f06d01 )
( 26837, 0xf4ddfccb )
( 26853, 0x6c0683f8 )
( 26870, 0xbd7cc73b )
( 26887, 0xc90442b1 )
( 26902, 0x5e78c3af )
( 26918, 0x4bbc0aba )
( 26940, 0xf0d7cfc0 )
( 26961, 0xa0f538d4 )
( 26975, 0x2594fcfc )
( 26989, 0x37b12393 )
( 27009, 0xba1de8ad )
( 27024, 0x76dbb27a )
( 27042, 0xc8d28e8c )
( 27058, 0x8d42d5cc )
( 27078, 0x948a465a )
( 27100, 0x7b64817d )
( 27115, 0x5ab41af5 )
( 27136, 0xcb53ce91 )
( 27150, 0xde6b0ec3 )
( 27167, 0x20a65fb5 )
( 27189, 0xc776f8f3 )
( 27205, 0x0b6f92a0 )
( 27220, 0xf1e68574 )
( 27236, 0x28e8a081 )
( 27252, 0xb80cf062 )
( 27274, 0x1ec4bf78 )
( 27292, 0x6095339a )
( 27307, 0x0e469ed4 )
( 27322, 0x7229f959 )
( 27340, 0x932440d5 )
( 27355, 0xe0180859 )
( 27388, 0xc4b2ccd2 )
( 27418, 0x6aca2037 )
( 27447, 0xef2a2842 )
( 27465, 0x5175038c )
( 27483, 0xbda95ba0 )
( 27515, 0xa59017e1 )
( 27548, 0x54bdbfbc )
( 27580, 0x0cb48bcf )
( 27611, 0x38bcc09d )
( 27635, 0xd668b2c0 )
( 27674, 0xefd44fdd )
( 27707, 0x18301a20 )
( 27748, 0xfa465436 )
( 27779, 0x0e411d8a )
( 27813, 0xf9e55746 )
( 27830, 0x15686221 )
( 27843, 0xb1943aac )
( 27861, 0x1db98af0 )
( 27878, 0x3d74872a )
( 27899, 0xbf59b17d )
( 27917, 0xf6a277a9 )
( 27933, 0x6c6770b3 )
( 27951, 0xfcd9724a )
( 27985, 0xbfa20142 )
( 28017, 0x5f533ad0 )
( 28054, 0x8c9e4f9f )
( 28099, 0x262c3dc7 )
( 28136, 0x63af10db )
( 28160, 0x0faf6778 )
( 28177, 0xe832a265 )
( 28199, 0x5473a10b )
( 28213, 0xf07f492b )
( 28243, 0xd39e0fbc )
( 28285, 0x9060b908 )
( 28312, 0x006c052b )
( 28329, 0x12c8e000 )
( 28351, 0x82a94006 )
( 28360, 0x4624bec4 )
( 28375, 0x037dc197 )
( 28397, 0xd471141f )
( 28412, 0x55f91266 )
( 28427, 0xfc3e55b9 )
( 28451, 0x36b69a14 )
( 28470, 0x4c4b2201 )
( 28486, 0x49410ed1 )
( 28505, 0x9bb5ee61 )
( 28522, 0xbb444439 )
( 28546, 0x1d14cf5b )
( 28558, 0xc82c35a3 )
( 28585, 0x52c4ea26 )
( 28600, 0xd39b2c2e )
( 28620, 0xacf6f492 )
( 28648, 0xdad4a5de )
( 28674, 0x2f78a795 )
( 28707, 0x171de22a )
( 28731, 0x147e7ae0 )
( 28749, 0xce68499e )
( 28767, 0x14b9754b )
( 28784, 0xa11abdf1 )
( 28794, 0xf5adc146 )
( 28831, 0xed35862a )
( 28843, 0x5f7a2e92 )
( 28863, 0x5407765e )
( 28883, 0xa64b4502 )
( 28901, 0x9eafcae7 )
( 28919, 0x9bf4a8e7 )
( 28935, 0x3fc015da )
( 28951, 0x0e484793 )
( 28971, 0x4397393e )
( 28986, 0x58c3bf37 )
( 28996, 0xa704eff5 )
( 29015, 0xcad272b7 )
( 29034, 0xcae445bc )
( 29049, 0xffc983a4 )
( 29084, 0x2e2ae451 )
( 29112, 0xe6162a0e )
( 29129, 0x76feb16f )
( 29149, 0xc8181b6c )
( 29170, 0x393aae3f )
( 29188, 0xd84edd17 )
( 29203, 0x1c23f81c )
( 29224, 0x381a06d0 )
( 29249, 0xf236253e )
( 29264, 0xc02ccb53 )
( 29284, 0x316b7b81 )
( 29303, 0x32872331 )
( 29324, 0xdb012fe9 )
( 29340, 0x6dd3efb1 )
( 29351, 0xc7564522 )
( 29370, 0xa7701074 )
( 29385, 0x8ad13c67 )
( 29404, 0xc04b9113 )
( 29420, 0xdb364e25 )
( 29439, 0x3cf181b3 )
( 29449, 0x1f3d250e )
( 29466, 0x3fb0d4d1 )
( 29486, 0xeb0a2830 )
( 29508, 0xf07163a0 )
( 29534, 0xcc5445c6 )
( 29550, 0xf63aa15d )
( 29576, 0x6d587f13 )
( 29591, 0xa2a1cc33 )
( 29613, 0x0847bf33 )
( 29638, 0x3bd68da3 )
( 29677, 0xb0a6eccc )
( 29699, 0xad888ec3 )
( 29718, 0x90ca20aa )
( 29733, 0x89c7cf65 )
( 29753, 0x2a708566 )
( 29769, 0x8d8f1eaf )
( 29782, 0x4f890039 )
( 29807, 0x06d69ec8 )
( 29825, 0x3e8c2ed8 )
( 29841, 0xe3d72ea0 )
( 29861, 0x70e60584 )
( 29872, 0x2cc5a18a )
( 29886, 0x4a329417 )
( 29904, 0xe515db49 )
( 29917, 0x408fc645 )
( 29938, 0x60ec04ad )
( 29957, 0x2deb0361 )
( 29974, 0xa8370fe6 )
( 29989, 0x487d27ab )
( 30007, 0x1a8b5158 )
( 30023, 0xcfbc2e38 )
( 30043, 0x094c3d0b )
( 30060, 0xd601115b )
( 30082, 0xe0316507 )
( 30100, 0xa21d8a0e )
( 30110, 0x495de391 )
( 30126, 0x49e43689 )
( 30142, 0x05de8ee8 )
( 30162, 0x1a970468 )
( 30178, 0xdddd62e8 )
( 30195, 0x5a578fd9 )
( 30213, 0x833ef90d )
( 30221, 0xd513fdaf )
( 30240, 0xd39c72f0 )
( 30252, 0x6348a4f8 )
( 30271, 0x49534cbd )
( 30283, 0x150a122b )
( 30300, 0x903def00 )
( 30314, 0xc0976b22 )
( 30337, 0xb6ea8b6e )
( 30352, 0x4d7b0226 )
( 30371, 0xfcc15c91 )
( 30384, 0xcec04c52 )
( 30402, 0xacd5f814 )
( 30420, 0xadc682be )
( 30437, 0x1db5293b )
( 30464, 0xf7a6a80e )
( 30475, 0x0eda8f88 )
( 30496, 0x5d527568 )
( 30509, 0xe7f7db5d )
( 30527, 0x06613bd4 )
( 30547, 0x17f5b3af )
( 30562, 0x93d4ac11 )
( 30578, 0xb97c38df )
( 30594, 0x7a41fbf8 )
( 30611, 0xdc3f8644 )
( 30631, 0x51944279 )
( 30644, 0x1106e746 )
( 30665, 0xd5611bc4 )
( 30683, 0x11c3e340 )
( 30698, 0x0e20f817 )
( 30712, 0xff12749c )
( 30729, 0x9e097b58 )
( 30752, 0x437c5e82 )
( 30769, 0x1db82afc )
( 30806, 0x8b962a48 )
( 30824, 0x71560768 )
( 30841, 0x189ea56a )
( 30850, 0x30b60703 )
( 30873, 0xd14ec535 )
( 30890, 0xd2d16ce5 )
( 30909, 0xb5e5fb8d )
( 30926, 0x8be98662 )
( 30942, 0x0ed4b5b2 )
( 30952, 0x1dc82fbe )
( 30966, 0xc99c6ac7 )
( 30986, 0x82e612ae )
( 31007, 0xcfe691c2 )
( 31023, 0xbe183497 )
( 31042, 0xee9c061e )
( 31063, 0xe103605e )
( 31080, 0x4cc913a7 )
( 31100, 0xb2d2b998 )
( 31110, 0xaa845995 )
( 31126, 0xb429b02a )
( 31143, 0x7fe90f5f )
( 31158, 0x5254c4af )
( 31180, 0x7c4548c0 )
( 31203, 0x6f95ca6d )
( 31219, 0x7154509f )
( 31256, 0xc519918b )
( 31291, 0x652f71be )
( 31332, 0x7c7550ba )
( 31364, 0x196fdaf6 )
( 31403, 0x44913625 )
( 31443, 0x4eedd86d )
( 31477, 0x47088a0b )
( 31515, 0x89a8fde8 )
( 31543, 0x9fd21b69 )
( 31581, 0x4954f579 )
( 31616, 0x2e574737 )
( 31645, 0xb99254df )
( 31677, 0xd6846bbd )
( 31695, 0x6e6917a8 )
( 31703, 0x06228e77 )
( 31729, 0xc4825cc5 )
( 31747, 0xcba55472 )
( 31762, 0xcf78b9e4 )
( 31782, 0x6e75023f )
( 31800, 0xd3d09f17 )
( 31814, 0x57c6ddcb )
( 31839, 0xb3915493 )
( 31872, 0x1ccde256 )
( 31913, 0xdf448213 )
( 31951, 0x2ac3670b )
( 31976, 0xf3a25d0a )
( 32010, 0x999a9b3c )
( 32041, 0x412f11cb )
( 32081, 0x5fdfe690 )
( 32113, 0x3f7a1bb7 )
( 32147, 0xe4e3c103 )
( 32177, 0x87280712 )
( 32212, 0xd3b8326c )
( 32247, 0x1e86c8a1 )
( 32281, 0x66b4b89e )
( 32316, 0x9f45427b )
( 32351, 0x6a7924c4 )
( 32387, 0x22c504f1 )
( 32420, 0x3b43a403 )
( 32455, 0x48e8b4f0 )
( 32496, 0x30d973f6 )
( 32527, 0xcc66adb4 )
( 32560, 0xcdd66d23 )
( 32598, 0x866488e5 )
( 32633, 0x8a279eca )
( 32669, 0xe4122862 )
( 32684, 0x51e7fc8f )
( 32699, 0x559c4a1d )
( 32715, 0x3f35481e )
( 32736, 0x9fbc4375 )
( 32769, 0xb037ce97 )
( 32804, 0xb5571e28 )
( 32837, 0x859c5fc2 )
( 32871, 0x2f717d5d )
( 32901, 0x80d2e6ec )
( 32939, 0xc127f051 )
( 32974, 0xef4d46c8 )
( 33004, 0xe65bf733 )
( 33041, 0x6bbe4123 )
( 33057, 0xa710c033 )
( 33079, 0x8a032a50 )
( 33100, 0x37eca399 )
( 33113, 0x0f40811d )
( 33127, 0x28beee09 )
( 33136, 0x1535179b )
( 33152, 0x7305410e )
( 33168, 0x581c5895 )
( 33189, 0x92d0e9f6 )
( 33214, 0x1b45533f )
( 33232, 0xd0c4017d )
( 33248, 0x144493d6 )
( 33283, 0x0ad8a712 )
( 33307, 0x50514c63 )
( 33318, 0x5f6228d8 )
( 33348, 0x7a450b22 )
( 33365, 0x1d02ea0e )
( 33378, 0xc3c3bfbf )
( 33396, 0x9176f62e )
( 33411, 0xac277da8 )
( 33421, 0x99e996a0 )
( 33428, 0xf78f4090 )
( 33450, 0x252c5cf4 )
( 33467, 0x34ce26a6 )
( 33483, 0x20397e83 )
( 33491, 0xeea7591c )
( 33508, 0x6ced1ab5 )
( 33526, 0x40ec0ebb )
( 33539, 0xfb8edb47 )
( 33560, 0x0f4be953 )
( 33575, 0x144aba86 )
( 33594, 0xb4f0a595 )
( 33614, 0xa3de24fc )
( 33633, 0xdce9770a )
( 33652, 0xdde16297 )
( 33667, 0x4021f143 )
( 33684, 0xf6e9ee25 )
( 33696, 0x07300bef )
( 33710, 0x2b77fb2a )
( 33728, 0xdd74af9b )
( 33747, 0xfac6dc2c )
( 33761, 0xd22e5fb5 )
( 33779, 0x6f011720 )
( 33795, 0x04ddeba4 )
( 33813, 0x8dd026aa )
( 33835, 0x93a0d168 )
( 33854, 0xb895318e )
( 33870, 0x381c0837 )
( 33886, 0xeff57ad2 )
( 33906, 0x82ba37ba )
( 33919, 0x929b3cf2 )
( 33937, 0x4a9088f8 )
( 33955, 0x9f3cdf62 )
( 33972, 0xcd508a28 )
( 33979, 0x5523aec8 )
( 34000, 0xf5f829f4 )
( 34014, 0xde55be16 )
( 34030, 0x1cdebd62 )
( 34049, 0xfacbbdec )
( 34064, 0x0601f688 )
( 34085, 0x33943b72 )
( 34101, 0x2710523a )
( 34118, 0x0a259fe1 )
( 34138, 0x429b1832 )
( 34158, 0x8464639b )
( 34181, 0x52706101 )
( 34201, 0x9ca27b8d )
( 34216, 0xfc656b29 )
( 34233, 0xd3697eb9 )
( 34247, 0xab939ff2 )
( 34262, 0xbd808cd7 )
( 34277, 0x7176b354 )
( 34289, 0x49df6906 )
( 34310, 0xedfcd719 )
( 34334, 0xd308a0e0 )
( 34343, 0xbf647fb8 )
( 34362, 0x5476042a )
( 34379, 0x1b0ed921 )
( 34394, 0xe1f05d7e )
( 34410, 0xf021391a )
( 34428, 0x92daaa13 )
( 34442, 0x9c61dd0a )
( 34467, 0x5e9ff5f9 )
( 34488, 0x0f787d93 )
( 34495, 0xff4fe465 )
( 34499, 0xb2b833c6 )
( 34519, 0x38778d42 )
( 34532, 0xe539c466 )
( 34552, 0x640a6b81 )
( 34565, 0x204e886a )
( 34585, 0x0b4c64f7 )
( 34603, 0x426ad18c )
( 34620, 0x9b38b84a )
( 34639, 0x5e19e24c )
( 34658, 0xb732744b )
( 34675, 0x363de1c1 )
( 34692, 0xbc284aee )
( 34710, 0x1fc00cdd )
( 34728, 0x728a4060 )
( 34744, 0xb559d52d )
( 34752, 0x311c0493 )
( 34763, 0xd5669a9a )
( 34780, 0x22b9ea24 )
( 34800, 0xa2ef69c7 )
( 34819, 0x73be4eb5 )
( 34833, 0xa774205a )
( 34852, 0x92956a5d )
( 34871, 0xb116bf53 )
( 34886, 0x7b000f99 )
( 34905, 0xb86d69db )
( 34913, 0x09c1d198 )
( 34932, 0x53db145a )
( 34951, 0x44357218 )
( 34961, 0xf4479871 )
( 34974, 0x111e85a9 )
( 34994, 0xa7c279ef )
( 35013, 0x5bf18569 )
( 35033, 0xf585db05 )
( 35053, 0x2ae0bdc8 )
( 35067, 0x7805b8f5 )
( 35081, 0xfc773af2 )
( 35098, 0x0cd0f2cc )
( 35114, 0x6385771b )
( 35134, 0xc55d0f12 )
( 35154, 0xcbb2a395 )
( 35167, 0x79f759fb )
( 35187, 0xab88183f )
( 35201, 0x89edab5a )
( 35224, 0xc11443cc )
( 35243, 0x2b3fa13c )
( 35258, 0x2919cec0 )
( 35274, 0x1879e9b0 )
( 35293, 0x0fcd62ab )
( 35312, 0x6aa6cf22 )
( 35326, 0x34cc7ea3 )
( 35343, 0x84ef6df8 )
( 35348, 0x2db611a6 )
( 35369, 0x0943c6b7 )
( 35387, 0x0b3b11b7 )
( 35406, 0x325f1bd9 )
( 35421, 0xd10d44b1 )
( 35443, 0x84e46741 )
( 35457, 0x3d2260fd )
( 35476, 0x9ecb882a )
( 35494, 0x6d1da3af )
( 35507, 0x61d7dc31 )
( 35512, 0x8ed72d1a )
( 35532, 0xd20bd1a1 )
( 35552, 0x34c7b3bb )
( 35575, 0xa473b706 )
( 35593, 0xf89994be )
( 35595, 0xa68f2c8c )
( 35597, 0xc9da1f50 )
( 35602, 0xe9fe82d2 )
( 35604, 0x4ade3cfd )
( 35622, 0x48796ed5 )
( 35637, 0x0b206c4a )
( 35654, 0x5065fead )
( 35669, 0xd238a247 )
( 35684, 0xd5f5b68c )
( 35699, 0x9f5f495a )
( 35719, 0x4b8ed364 )
( 35738, 0x9f3e86e2 )
( 35751, 0xfcb00cf6 )
( 35768, 0x69159260 )
( 35787, 0xedfedc62 )
( 35802, 0x96aeb351 )
( 35815, 0x5bb0c417 )
( 35825, 0x3e04e576 )
( 35842, 0xa9a70732 )
( 35861, 0xa14d5e0d )
( 35878, 0x95b7e095 )
( 35898, 0x559d04d3 )
( 35907, 0xa9bdd681 )
( 35925, 0x5eca56f3 )
( 35942, 0x7eb0090d )
( 35965, 0x29711566 )
( 35977, 0x0b7a3f8d )
( 35989, 0x9db230dd )
( 36008, 0xa7b42a37 )
( 36025, 0x1df3be41 )
( 36041, 0xa6059ade )
( 36059, 0xfd9b3715 )
( 36074, 0xd4cb2589 )
( 36092, 0xf86dc1ea )
( 36111, 0x5b50baef )
( 36136, 0xe6e2b67c )
( 36144, 0x19798bd1 )
( 36165, 0x4463ab21 )
( 36186, 0xf39601e1 )
( 36202, 0xb3f53b92 )
( 36220, 0xf6b2cfef )
( 36234, 0x1ea2b9be )
( 36248, 0x74c12a67 )
( 36263, 0x21d8a34c )
( 36279, 0xf9a426eb )
( 36298, 0xe28120c0 )
( 36317, 0xf60fefa6 )
( 36333, 0xc6efb9fd )
( 36355, 0xaa6e22ec )
( 36363, 0xe2bb3495 )
( 36376, 0x864358ee )
( 36396, 0x990190aa )
( 36414, 0x3cce8050 )
( 36431, 0x7ff7a647 )
( 36442, 0xc2b1065a )
( 36464, 0x434f5c65 )
( 36477, 0x9f3c182d )
( 36489, 0x9bdf0d7b )
( 36510, 0xe6062972 )
( 36530, 0x714ac8d4 )
( 36548, 0x5c7823e9 )
( 36566, 0xd7934d72 )
( 36582, 0xc805cbc2 )
( 36601, 0xbb0883ee )
( 36620, 0xbc233515 )
( 36630, 0x7be2009c )
( 36645, 0x1893416b )
( 36663, 0x6838773c )
( 36686, 0x8409e049 )
( 36700, 0xbb617ae8 )
( 36714, 0x106a69cf )
( 36731, 0x184812ae )
( 36740, 0xb3304877 )
( 36765, 0x6d2bbe84 )
( 36780, 0xe525001f )
( 36796, 0x10504db2 )
( 36816, 0x28ec15f6 )
( 36834, 0x77b16ec1 )
( 36850, 0xa1c092a5 )
( 36870, 0x88996b15 )
( 36888, 0x23487810 )
( 36906, 0x9f6e8d80 )
( 36922, 0x98d21ae6 )
( 36943, 0x8889799f )
( 36952, 0xd05de4d7 )
( 36967, 0x71daec56 )
( 36985, 0xba80512d )
( 37000, 0x9e686862 )
( 37013, 0x2ac6d53d )
( 37030, 0x40c4777f )
( 37049, 0x2d94709e )
( 37063, 0xb7fbc489 )
( 37078, 0x329e25ac )
( 37091, 0xf981aacd )
( 37112, 0xb043e33a )
( 37128, 0xc927910b )
( 37146, 0xd43a460e )
( 37162, 0x619c9bf9 )
( 37177, 0xd26c9e0f )
( 37196, 0x6c325306 )
( 37213, 0x729b90a8 )
( 37233, 0x3385c398 )
( 37244, 0x4ecc79f1 )
( 37262, 0x8d0dd7ca )
( 37281, 0xa06b9fba )
( 37306, 0x86ae4da3 )
( 37312, 0xb9773893 )
( 37322, 0x4837c8a0 )
( 37344, 0x7ee07d60 )
( 37353, 0xdb06e538 )
( 37375, 0xda60c552 )
( 37390, 0xb63b2647 )
( 37412, 0x261317b2 )
( 37431, 0xf5531d58 )
( 37444, 0xa29697b1 )
( 37462, 0x7b311955 )
( 37475, 0x174361e5 )
( 37492, 0x6fdb2382 )
( 37511, 0xb3b42478 )
( 37525, 0x85a2519f )
( 37540, 0x8e92aad8 )
( 37558, 0xb3a21daf )
( 37574, 0x0b0cebf2 )
( 37590, 0x1d884b7f )
( 37600, 0x4a16a7a2 )
( 37620, 0x2d25758a )
( 37636, 0x4606f7e8 )
( 37651, 0x434a8f8b )
( 37674, 0xeedadda2 )
( 37689, 0x938f0cd7 )
( 37705, 0x3c3ed638 )
( 37722, 0x24f3ac4e )
( 37739, 0xff2682fb )
( 37754, 0x37c78dd1 )
( 37773, 0x72b7a0f0 )
( 37790, 0xe3638283 )
( 37807, 0x0781b7ed )
( 37822, 0x4f4fd490 )
( 37841, 0x466e56e5 )
( 37859, 0xc81f15aa )
( 37877, 0x9e61a456 )
( 37897, 0xbc8ecfea )
( 37908, 0xf04efb04 )
( 37929, 0x8d64da9b )
( 37946, 0x916d2a6c )
( 37967, 0xa926af81 )
( 37982, 0x2cfe7609 )
( 37999, 0x8a37ec7b )
( 38017, 0xf74ed0a4 )
( 38031, 0xd384b8c0 )
( 38054, 0x37439954 )
( 38074, 0xa4d79b70 )
( 38089, 0xc1c77f09 )
( 38101, 0xb31ae9d5 )
( 38118, 0xbe72daa7 )
( 38139, 0x43c66a1c )
( 38153, 0x96e18d7f )
( 38174, 0x92222720 )
( 38190, 0xf19aed4e )
( 38207, 0xa7d51345 )
( 38227, 0x42774f4a )
( 38250, 0x75fa08b8 )
( 38258, 0x8a3b047c )
( 38280, 0x59731f71 )
( 38295, 0x845e6eec )
( 38313, 0xd572a18b )
( 38335, 0x5c173894 )
( 38359, 0x6a94a9fe )
( 38372, 0x94c2118d )
( 38382, 0xb0080261 )
( 38393, 0x7b196c05 )
( 38401, 0xdae5d335 )
( 38417, 0x4ff0d743 )
( 38434, 0x15f5c9ba )
( 38454, 0x7a541e8a )
( 38473, 0x74f6112c )
( 38492, 0x62450ad3 )
( 38513, 0xdad9a0cb )
( 38524, 0x104afa85 )
( 38542, 0x643ffdf4 )
( 38559, 0x74776657 )
( 38577, 0x649c7528 )
( 38594, 0x2b5937cb )
( 38609, 0xdb89f774 )
( 38629, 0x16b33d25 )
( 38645, 0xa537212a )
( 38662, 0x97105d14 )
( 38680, 0x048dad0e )
( 38701, 0xfa003cec )
( 38712, 0xb38b0d0b )
( 38733, 0x55cd2d5b )
( 38741, 0xc210b8da )
( 38758, 0xcae631d3 )
( 38774, 0xcd6e1877 )
( 38792, 0x17975d1d )
( 38810, 0x18a6a460 )
( 38826, 0xe8ceebe8 )
( 38847, 0x07d7ac1a )
( 38864, 0x5c98e354 )
( 38876, 0x8f7f1cf4 )
( 38895, 0xe692810c )
( 38914, 0xfc7aac70 )
( 38930, 0x3391009b )
( 38943, 0x1a48fb2a )
( 38961, 0xb251fce6 )
( 38980, 0x92d99dbd )
( 38994, 0x6179dd0d )
( 39011, 0x5a201c2e )
( 39032, 0x959c1b6f )
( 39045, 0xf3a091b1 )
( 39064, 0xbe9f24ef )
( 39078, 0xbe7b229a )
( 39096, 0x2645492c )
( 39110, 0x250ff4e2 )
( 39133, 0x411e364b )
( 39151, 0x73f6d521 )
( 39161, 0x32e72866 )
( 39180, 0xe544303f )
( 39197, 0x42d06f8b )
( 39216, 0x881d5f7a )
( 39233, 0xedd4d331 )
( 39255, 0x0140a0ef )
( 39267, 0xcca1d529 )
( 39288, 0x366865cd )
( 39299, 0x153e8687 )
( 39323, 0x2c1cb271 )
( 39342, 0xd955f582 )
( 39353, 0x90a9799d )
( 39372, 0x3574f2af )
( 39391, 0xbd05a93f )
( 39410, 0xfb67c347 )
( 39427, 0x13d6833a )
( 39444, 0xad6ca9ba )
( 39462, 0x71daf9d4 )
( 39479, 0x0ee7d440 )
( 39495, 0x9c56ddeb )
( 39514, 0xc771e0be )
( 39534, 0x6097df7d )
( 39544, 0xb408e602 )
( 39561, 0xf72f7bee )
( 39579, 0x6998c59b )
( 39595, 0xd3831f55 )
( 39612, 0x020b895a )
( 39631, 0x1f1b21ce )
( 39649, 0x9f7a21af )
( 39665, 0x7987433e )
( 39679, 0x18ad2ea7 )
( 39699, 0xa0033fea )
( 39723, 0x0b47f3f9 )
( 39734, 0xdcd2c924 )
( 39748, 0x1ae3c392 )
( 39765, 0x3da092b2 )
( 39785, 0xd8fff3a3 )
( 39799, 0xc0182ae4 )
( 39807, 0x4299e034 )
( 39823, 0x902960f2 )
( 39839, 0xef549d95 )
( 39856, 0xd1dcc8d6 )
( 39876, 0x5242743e )
( 39884, 0x0691db69 )
( 39900, 0x3e62cb46 )
( 39912, 0x8985084c )
( 39928, 0xb6b52bdf )
( 39948, 0x72acfb2d )
( 39968, 0x6ed8faa9 )
( 39988, 0x3a6f2159 )
( 40001, 0xd0b062aa )
( 40019, 0x2ce168df )
( 40033, 0x583063ba )
( 40053, 0xd4d656a7 )
( 40073, 0xd87d3650 )
( 40089, 0x8ab9f603 )
( 40108, 0x399c297b )
( 40124, 0xcbd5c724 )
( 40141, 0x8eaf9486 )
( 40156, 0xcd18e335 )
( 40176, 0x05d40276 )
( 40191, 0x43d6fff4 )
( 40207, 0x44c17b1c )
( 40225, 0x8e341673 )
( 40243, 0x1acb840d )
( 40264, 0x4ebabba3 )
( 40281, 0x366fd733 )
( 40295, 0x6c20d5a6 )
( 40314, 0xa3c72215 )
( 40329, 0x4888700e )
( 40347, 0xf4c3f618 )
( 40362, 0xdc8ce76e )
( 40375, 0x9695a820 )
( 40393, 0xbf74b982 )
( 40406, 0xf9b27b56 )
( 40420, 0x35a09139 )
( 40434, 0x8502a178 )
( 40446, 0x3bf4995d )
( 40461, 0x2e51bb6f )
( 40474, 0xad7347f3 )
( 40487, 0x59b33983 )
( 40506, 0xe92c5f1c )
( 40519, 0x1f73b3ff )
( 40538, 0xd6b92163 )
( 40553, 0x2a1a31b5 )
( 40572, 0x12e20b0b )
( 40592, 0x4ea4904f )
( 40608, 0x5c38636f )
( 40626, 0x25dc43fd )
( 40646, 0x5228bb3c )
( 40662, 0x5fafb954 )
( 40680, 0x979bcfec )
( 40699, 0x80b09225 )
( 40716, 0x18eeae4b )
( 40731, 0x05afea4c )
( 40749, 0x86530ad6 )
( 40764, 0x027bc9c7 )
( 40782, 0x852684b8 )
( 40801, 0xadfcda06 )
( 40821, 0x73927904 )
( 40835, 0xb0f7daf3 )
( 40855, 0x6d2df6a4 )
( 40871, 0x3e0ebc20 )
( 40886, 0x158e3087 )
( 40908, 0x4f4ae7c9 )
( 40925, 0x30c0190f )
( 40939, 0xc0cfb0d0 )
( 40959, 0xba78d7f9 )
( 40976, 0xec8ba918 )
( 41000, 0x38d9ef64 )
( 41008, 0xa3437eb7 )
( 41025, 0x74e821c1 )
( 41041, 0x48c3d5a3 )
( 41058, 0xdd87d62c )
( 41071, 0xd4ba8cec )
( 41087, 0x46952abf )
( 41106, 0xdc8579a3 )
( 41119, 0xbc82c6d9 )
( 41144, 0x6c650040 )
( 41154, 0xb2b3e316 )
( 41172, 0x96927b7e )
( 41185, 0xb23d3a62 )
( 41206, 0x3374788e )
( 41222, 0x2751fbe4 )
( 41241, 0x75f6eedd )
( 41254, 0x8c945a83 )
( 41269, 0x5da80cdd )
( 41287, 0xdc1f102d )
( 41305, 0x1caffdf4 )
( 41323, 0xe0f4403c )
( 41338, 0x12842d39 )
( 41353, 0x1fb79a10 )
( 41364, 0xd03c96b5 )
( 41384, 0x1fd4db4e )
( 41399, 0x18e6fb85 )
( 41411, 0xc22fb998 )
( 41428, 0x49dd6c8f )
( 41451, 0x80257175 )
( 41469, 0x30e90690 )
( 41484, 0x53310a60 )
( 41503, 0x66f20ca4 )
( 41517, 0x387a4e14 )
( 41539, 0x0e0d1753 )
( 41557, 0xb16aa812 )
( 41574, 0xb9d6e948 )
( 41591, 0x510f9ad6 )
( 41612, 0x2b9a0c1e )
( 41621, 0xcf5fabf7 )
( 41631, 0x830a9931 )
( 41646, 0x6b1a1edf )
( 41662, 0x68cf1a2d )
( 41681, 0x74ed8b52 )
( 41698, 0xc21762e2 )
( 41719, 0x626df993 )
( 41736, 0x2b22d701 )
( 41752, 0x64d76b70 )
( 41767, 0x5b07ed7d )
( 41778, 0xc7a988b4 )
( 41796, 0xd7668e9b )
( 41816, 0x7c589cc8 )
( 41832, 0x9ac295b9 )
( 41852, 0x297f0848 )
( 41871, 0x521c6f71 )
( 41888, 0x54751845 )
( 41910, 0xd3c6e04f )
( 41922, 0x7e553861 )
( 41938, 0xd19a81a5 )
( 41954, 0x8fac05b2 )
( 41973, 0x12d56b7d )
( 41991, 0x0d365c7c )
( 42009, 0x091f7513 )
( 42026, 0x565b5851 )
( 42045, 0x9eb5d7ba )
( 42065, 0x0370c333 )
( 42083, 0xc72c3acd )
( 42099, 0x029ae9bc )
( 42117, 0x56de46be )
( 42132, 0x9b4e36ef )
( 42149, 0x9174ec0e )
( 42171, 0x45be3743 )
( 42180, 0xecd83efb )
( 42197, 0xdbf2e69f )
( 42211, 0x3426cc10 )
( 42231, 0xcc3dd14b )
( 42248, 0x3d669a2d )
( 42261, 0x2cb7ce14 )
( 42279, 0xdbba6f50 )
( 42294, 0x5e90b6c7 )
( 42317, 0xc0967bf4 )
( 42334, 0x6818db64 )
( 42343, 0xb9f1aaad )
( 42365, 0xe923c213 )
( 42379, 0xde99a6a8 )
( 42396, 0xa2620d8a )
( 42416, 0x2a9839e4 )
( 42431, 0x85466a60 )
( 42453, 0x4f2e3f7a )
( 42460, 0x7d85ac1c )
( 42473, 0x4a7eecf9 )
( 42488, 0x303f4d9b )
( 42508, 0x08ef3d7b )
( 42527, 0x6983f6a3 )
( 42543, 0xae0b879d )
( 42557, 0x40442da2 )
( 42575, 0xb1796704 )
( 42595, 0x3206171a )
( 42610, 0x73073aa0 )
( 42634, 0x60a78ae9 )
( 42647, 0x1ad10f29 )
( 42662, 0x673c49fc )
( 42674, 0xa09d69ab )
( 42695, 0x52137905 )
( 42708, 0x64364a61 )
( 42732, 0xbd1fe2e4 )
( 42736, 0x88488557 )
( 42746, 0xc4f5737b )
( 42766, 0x11757911 )
( 42788, 0x1fd1d436 )
( 42803, 0xe798e40c )
( 42819, 0x93cc39ce )
( 42840, 0x38de1558 )
( 42855, 0xc9aad289 )
( 42865, 0x60b0920f )
( 42884, 0x8ff8c429 )
( 42903, 0xb0d951dd )
( 42928, 0xc7e84245 )
( 42942, 0x6792e07c )
( 42959, 0x2fff573a )
( 42973, 0x2bb85802 )
( 42984, 0x571d76d0 )
( 43006, 0x967d3715 )
( 43028, 0xdf746cf7 )
( 43041, 0xa8e59bc9 )
( 43063, 0x2d580848 )
( 43077, 0xdd907797 )
( 43089, 0x22a2514a )
( 43111, 0x6015dd91 )
( 43124, 0xca12a165 )
( 43138, 0xdce484be )
( 43157, 0x231df56f )
( 43175, 0x4979a77d )
( 43192, 0x4949fb71 )
( 43202, 0xe58ad79b )
( 43224, 0x134eac3c )
( 43244, 0x860b7b2b )
( 43263, 0xd947c086 )
( 43281, 0x6cb35cc2 )
( 43294, 0x3d9cddc4 )
( 43314, 0x73652a44 )
( 43334, 0x4a9dcc7e )
( 43352, 0x2cae6fab )
( 43368, 0xf0b6d986 )
( 43388, 0xeac52626 )
( 43402, 0x7799c094 )
( 43425, 0x7f5a9fc8 )
( 43439, 0xa16b291f )
( 43455, 0x253797c5 )
( 43471, 0xeee1a083 )
( 43485, 0x428c86a5 )
( 43502, 0x23f09fbb )
( 43521, 0xc8d8a17e )
( 43532, 0x14809b48 )
( 43549, 0xead43eda )
( 43564, 0x99bb88c7 )
( 43581, 0x2bc41c1a )
( 43594, 0xb15c02e4 )
( 43613, 0x0082e40b )
( 43626, 0x9a5cba28 )
( 43637, 0x34637234 )
( 43658, 0x002fac6c )
( 43675, 0xa9324907 )
( 43688, 0xc103d58f )
( 43714, 0x04357e36 )
( 43732, 0x930575ff )
( 43746, 0x70f0ee12 )
( 43760, 0x47d30de0 )
( 43775, 0xd01d0409 )
( 43798, 0xba53e97e )
( 43810, 0x9ae54380 )
( 43825, 0x0e563c0c )
( 43847, 0x5371b5e2 )
( 43863, 0x3b234b55 )
( 43879, 0x2186711e )
( 43890, 0xadd6483f )
( 43906, 0xeeb8b8da )
( 43919, 0x6dd8f3f1 )
( 43939, 0xfb872169 )
( 43959, 0xf6c30999 )
( 43976, 0x60f08f42 )
( 43994, 0x4bbbb162 )
( 44011, 0xef5d04b6 )
( 44025, 0xf2db7dc3 )
( 44042, 0x0517ee31 )
( 44059, 0xcd325360 )
( 44082, 0xbe8f8ac3 )
( 44100, 0x0f8ec98c )
( 44105, 0x2f4ef2b9 )
( 44120, 0x8b428de4 )
( 44141, 0x82bab192 )
( 44157, 0x074bcf36 )
( 44174, 0x230d9d5a )
( 44191, 0x10842c31 )
( 44208, 0xf50ddfca )
( 44225, 0xbc0ed372 )
( 44241, 0x9fdfef05 )
( 44258, 0xb9263ae2 )
( 44278, 0xebf3d402 )
( 44297, 0x9644bec7 )
( 44317, 0xf8ec0226 )
( 44335, 0x7d7f4ed0 )
( 44353, 0x43174c00 )
( 44367, 0x68b32541 )
( 44387, 0xcd54187c )
( 44405, 0x9a05ffb4 )
( 44413, 0x0ddda2e1 )
( 44434, 0x98ef5403 )
( 44449, 0xae6c4d8f )
( 44457, 0xed3aea4d )
( 44478, 0x511b6c1d )
( 44490, 0x4eabef3b )
( 44505, 0x1f5e4165 )
( 44525, 0x3f2bf2ff )
( 44539, 0x7a568028 )
( 44556, 0xcaa152fc )
( 44579, 0xb37123a2 )
( 44595, 0x85e92d49 )
( 44612, 0x9ff003f6 )
( 44628, 0x7abbdfb3 )
( 44645, 0x4ee29d3b )
( 44664, 0x1be61b0f )
( 44682, 0x99e68a11 )
( 44700, 0x23f2fce4 )
( 44715, 0x3adbc4c4 )
( 44733, 0x8b85b75d )
( 44740, 0x52e51b2c )
( 44752, 0x874f1c5f )
( 44765, 0x24b3618e )
( 44782, 0x5d20ff36 )
( 44805, 0x61e849a3 )
( 44823, 0x50c07422 )
( 44842, 0x77d82529 )
( 44860, 0x289ece79 )
( 44874, 0x8558a032 )
( 44893, 0x9dbe4cd8 )
( 44912, 0x168c2656 )
( 44927, 0x9c3c9099 )
( 44946, 0xee5660d7 )
( 44948, 0x67288d2e )
( 44950, 0x9d3d5178 )
( 44977, 0xe8e5da29 )
( 44994, 0xbcaacf77 )
( 45011, 0x8d612b0d )
( 45034, 0x40a85c7f )
( 45041, 0x88f4b65f )
( 45045, 0x25dd0206 )
( 45054, 0x617d6609 )
( 45073, 0xbf5eddc7 )
( 45091, 0x00108bd7 )
( 45109, 0x8edda6de )
( 45130, 0xa5caaa82 )
( 45142, 0xa07a2e1c )
( 45158, 0x25673223 )
( 45177, 0x8f7a4ba8 )
( 45194, 0x9c241900 )
( 45213, 0x82310c34 )
( 45235, 0x15d3dbcd )
( 45251, 0xb731a14d )
( 45269, 0x86297505 )
( 45285, 0x4ec72a01 )
( 45301, 0x1fac3586 )
( 45315, 0xeece985c )
( 45332, 0xdd829af1 )
( 45350, 0x362a452e )
( 45369, 0x3eb85d29 )
( 45383, 0x98d1cb00 )
( 45394, 0x7ebd5c5f )
( 45416, 0x442e4e1a )
( 45433, 0x8983c351 )
( 45450, 0x03715772 )
( 45464, 0x9cfc5001 )
( 45483, 0x7316d2e6 )
( 45502, 0x0be1dc2b )
( 45516, 0xd4615f8a )
( 45537, 0xc4734b35 )
( 45543, 0xe994a406 )
( 45545, 0xa4943313 )
( 45565, 0xc769f49a )
( 45582, 0x8d6d4b0d )
( 45601, 0xa2b82c6f )
( 45617, 0x5807fa8d )
( 45634, 0x3c677e85 )
( 45641, 0x88408e2f )
( 45647, 0xcfbae59b )
( 45657, 0xaf0d1635 )
( 45659, 0x13a80a26 )
( 45661, 0x74da5cf8 )
( 45676, 0xfdfdfe3d )
( 45678, 0x9799bbd6 )
( 45680, 0x8b144358 )
( 45682, 0xa747ac17 )
( 45684, 0xda1cdf2b )
( 45687, 0x61ba9c14 )
( 45689, 0x856146d5 )
( 45691, 0x724a5c10 )
( 45698, 0x1f2cfc2c )
( 45741, 0x76508ced )
( 45765, 0x2d6326e4 )
( 45781, 0xc6d86d1a )
( 45798, 0xcf3993ea )
( 45817, 0x637330ad )
( 45834, 0xec2e0630 )
( 45851, 0xbda3efd4 )
( 45868, 0x1f2a600c )
( 45885, 0x5591d5d3 )
( 45906, 0x4bcafb51 )
( 45920, 0x6ee3f928 )
( 45943, 0xbb095d13 )
( 45962, 0x71ad683a )
( 45978, 0x8f7604d7 )
( 45997, 0x89c93246 )
( 46018, 0xa76dc2c8 )
( 46028, 0xddb5679c )
( 46037, 0x3d03903c )
( 46062, 0x8972feed )
( 46074, 0xb62748b3 )
( 46090, 0x78961c5d )
( 46108, 0xd46c448d )
( 46129, 0x2906036f )
( 46144, 0xc3793e1a )
( 46155, 0x69290217 )
( 46177, 0x46502f0e )
( 46191, 0x5c7f69b0 )
( 46207, 0xd63ae87f )
( 46231, 0xdf1ed68e )
( 46235, 0x0fa3ae61 )
( 46257, 0x903db26d )
( 46273, 0x97595e0e )
( 46289, 0x304ef6cc )
( 46296, 0x38636121 )
( 46309, 0x90a39ef5 )
( 46328, 0x70f6e07f )
( 46341, 0x535f53a8 )
( 46358, 0xe5442561 )
( 46363, 0x7d0cb035 )
( 46382, 0x015c40f2 )
( 46401, 0x0e944e48 )
( 46416, 0xe60995d4 )
( 46430, 0x4395009e )
( 46452, 0xdbe773ca )
( 46472, 0xae040bad )
( 46484, 0xdae35765 )
( 46503, 0xba94f725 )
( 46519, 0x02635952 )
( 46540, 0x98bb0d85 )
( 46557, 0x114ec18a )
( 46577, 0x73064202 )
( 46591, 0xf681c189 )
( 46615, 0xd5bf0348 )
( 46625, 0xe44fc8d2 )
( 46643, 0xce83278e )
( 46662, 0x4010dc33 )
( 46672, 0x01097fd8 )
( 46693, 0x8a9917e2 )
( 46709, 0x53efdf20 )
( 46730, 0xeec68c57 )
( 46745, 0x3763087a )
( 46765, 0x539bf430 )
( 46778, 0xa13df70f )
( 46781, 0x4e8c5cc5 )
( 46794, 0x6a754936 )
( 46807, 0x36b84ab4 )
( 46823, 0x3e0832c5 )
( 46841, 0x38c9c7ec )
( 46854, 0x70b0c2cb )
( 46870, 0xd1fc9836 )
( 46886, 0x4b780ec4 )
( 46906, 0x5cf21141 )
( 46922, 0x741f1db7 )
( 46938, 0x84ab265f )
( 46961, 0x9746cd13 )
( 46984, 0xa97b570b )
( 46994, 0x2a1097cb )
( 47017, 0xbfceda0d )
( 47039, 0xe664fb19 )
( 47054, 0xcd0c597f )
( 47070, 0xb8879796 )
( 47086, 0xea10d975 )
( 47103, 0x2234aa47 )
( 47124, 0x9f880fa4 )
( 47143, 0x33a99bc7 )
( 47159, 0x3e6d8a68 )
( 47175, 0x66d89734 )
( 47190, 0x1e9cfc6f )
( 47211, 0x82041088 )
( 47224, 0x07fc2fff )
( 47241, 0xfefdf215 )
( 47257, 0x1113d719 )
( 47276, 0xb62a97c4 )
( 47291, 0x760c36e2 )
( 47310, 0xd4270b4b )
( 47329, 0x5b6ac062 )
( 47349, 0x9566c7d8 )
( 47368, 0xdbea55d4 )
( 47386, 0xf6db0be7 )
( 47403, 0x4ed4df53 )
( 47420, 0x4dfdccd4 )
( 47437, 0xcf12fafc )
( 47454, 0x1e1f8a7e )
( 47476, 0x1007cd93 )
( 47488, 0xc449587c )
( 47509, 0xeca3d875 )
( 47522, 0x435da070 )
( 47543, 0x080a5c76 )
( 47558, 0x497ac459 )
( 47577, 0x6184ea32 )
( 47589, 0xe085ce0a )
( 47611, 0x8ab8c4d0 )
( 47626, 0x9ffdb05c )
( 47645, 0xdfc92593 )
( 47659, 0x508ab867 )
( 47674, 0x7d0b548d )
( 47696, 0x8f201359 )
( 47714, 0xd3e98f36 )
( 47733, 0xfd8900f0 )
( 47748, 0xea1a373f )
( 47768, 0x7e5c021e )
( 47784, 0x9b52809c )
( 47807, 0xe9f9f46c )
( 47824, 0xc4a3ed66 )
( 47845, 0x91d5be04 )
( 47858, 0x2c58fb12 )
( 47877, 0xdcb1ca85 )
( 47894, 0xeaf28317 )
( 47914, 0x9eead24a )
( 47933, 0xc7208a0d )
( 47949, 0xededad3b )
( 47970, 0x5206c295 )
( 47988, 0x05b6060b )
( 48006, 0x50e5847f )
( 48024, 0x8bf1c597 )
( 48045, 0x4cf46fb2 )
( 48062, 0x27343666 )
( 48082, 0xa93f6da0 )
( 48098, 0xc76e43c9 )
( 48120, 0x14c542d5 )
( 48136, 0x1e977c5a )
( 48150, 0x313f97a8 )
( 48165, 0x6a423745 )
( 48181, 0x4d81261a )
( 48198, 0x031f35e7 )
( 48216, 0xb3f566ff )
( 48234, 0xc5843a72 )
( 48245, 0x13829dbe )
( 48262, 0x7e5e5c3e )
( 48284, 0x2333ae5b )
( 48302, 0x7c75579d )
( 48319, 0x29e24039 )
( 48339, 0xe7252a88 )
( 48358, 0xed846460 )
( 48368, 0x57d518cb )
( 48383, 0x1f2e173b )
( 48398, 0xe680385e )
( 48416, 0xa979ae5a )
( 48431, 0x98fb47a3 )
( 48451, 0x68b60353 )
( 48471, 0x1099134d )
( 48489, 0x5967d712 )
( 48510, 0x84707ccb )
( 48522, 0x7d895e08 )
( 48546, 0x70971085 )
( 48558, 0xef0b1a2e )
( 48577, 0x8b7c74ef )
( 48596, 0x399761db )
( 48612, 0x447df136 )
( 48635, 0x3121b62e )
( 48649, 0x78364e4b )
( 48666, 0xfd217e09 )
( 48682, 0x048da10e )
( 48699, 0x06051812 )
( 48715, 0x533fa609 )
( 48731, 0xa3637a11 )
( 48743, 0xd5d64966 )
( 48763, 0xf0ac4650 )
( 48776, 0xa5ab81da )
( 48788, 0x04cbe774 )
( 48811, 0xc1a49679 )
( 48823, 0x77fa5d9c )
( 48832, 0xb5379149 )
( 48853, 0xd9cf19c0 )
( 48874, 0x6e273d0d )
( 48887, 0xaae7e6e0 )
( 48905, 0x9d299a90 )
( 48920, 0x4186b891 )
( 48940, 0x1b381803 )
( 48953, 0xa8353db5 )
( 48966, 0x0d0b03dc )
( 48979, 0x84277aeb )
( 48999, 0x5d30d8c2 )
( 49015, 0xc3bcc4bf )
( 49035, 0xc77315d7 )
( 49053, 0xfda29c80 )
( 49073, 0x58903f32 )
( 49087, 0x5f3ef7b1 )
( 49103, 0x5f65f2fa )
( 49118, 0x3dddc577 )
( 49129, 0x5cfe6891 )
( 49149, 0x52b698c1 )
( 49168, 0x03f7c0d3 )
( 49183, 0x2a3d4d1a )
( 49197, 0x3c7f32e0 )
( 49217, 0x4330f4ec )
( 49241, 0x2d2e93fa )
( 49254, 0xd9ce5d0b )
( 49273, 0xdfb0370f )
( 49286, 0x73d65a38 )
( 49311, 0x6050b216 )
( 49324, 0xcbff907b )
( 49337, 0x743cc25e )
( 49352, 0x01fae1e2 )
( 49371, 0x88ba83c8 )
( 49390, 0xa0069e75 )
( 49407, 0xe6e9b224 )
( 49426, 0x2b16561c )
( 49445, 0xf0ecc219 )
( 49461, 0xa05afd95 )
( 49479, 0x8102f45a )
( 49499, 0x3650de52 )
( 49516, 0x3e588934 )
( 49534, 0xcd02f8de )
( 49543, 0xcd81b450 )
( 49562, 0x6fd1c60d )
( 49575, 0x700c676d )
( 49592, 0xdf71672b )
( 49608, 0xdca03cd3 )
( 49623, 0x272d57f0 )
( 49645, 0x010dac5f )
( 49660, 0x9f375a11 )
( 49679, 0x0f487f67 )
( 49692, 0x164f3c40 )
( 49713, 0x8854a2c2 )
( 49720, 0xda7fec0e )
( 49731, 0xa8d9a738 )
( 49748, 0xad25de13 )
( 49770, 0xeab49e02 )
( 49789, 0x1051ddf8 )
( 49802, 0x74e5b7fe )
( 49817, 0xb87becda )
( 49833, 0x4cea96e2 )
( 49846, 0x9b21c57f )
( 49864, 0x902b71c9 )
( 49876, 0x1c5a2844 )
( 49887, 0xcbe4280d )
( 49904, 0xc9282257 )
( 49931, 0xfb810ab7 )
( 49944, 0x5c8c53e2 )
( 49958, 0x1e83b113 )
( 49966, 0x01c34045 )
( 49975, 0x36240a4f )
( 49996, 0xe6184dfb )
( 50008, 0x43eb7b40 )
( 50028, 0x386826ac )
( 50052, 0xd56cafee )
( 50064, 0x8419845f )
( 50081, 0x97ae4695 )
( 50101, 0x6d02849c )
( 50118, 0x3623f34a )
( 50129, 0xc497edb9 )
( 50150, 0xbb42c37e )
( 50167, 0xa2d05fd5 )
( 50185, 0x1480e75d )
( 50205, 0xe249ed3f )
( 50218, 0xc729481a )
( 50234, 0x86f9f159 )
( 50257, 0x18f27448 )
( 50270, 0x0337d4e3 )
( 50289, 0x3b18b292 )
( 50306, 0x2c036d0c )
( 50326, 0xcd56d917 )
( 50339, 0xfe1172cc )
( 50354, 0xf264c23a )
( 50371, 0x72873353 )
( 50390, 0xa0e7d0e1 )
( 50410, 0x44c7ca9e )
( 50429, 0xe994e0d4 )
( 50446, 0xdc5e948d )
( 50463, 0x10da5e84 )
( 50477, 0x9cd22651 )
( 50492, 0xc083b8f4 )
( 50509, 0xc6d8ace8 )
( 50524, 0xa7052590 )
( 50544, 0xff54aec8 )
( 50566, 0xa61145bf )
( 50583, 0x85cf9b54 )
( 50598, 0xa25e4d22 )
( 50614, 0x6f265388 )
( 50633, 0x6f912030 )
( 50651, 0x1ea0dc96 )
( 50669, 0x49adf66b )
( 50690, 0x7127cef7 )
( 50708, 0x8fae2076 )
( 50719, 0x0d780d5f )
( 50736, 0x04b2f787 )
( 50754, 0x453d9f28 )
( 50777, 0x2904f3ca )
( 50794, 0x9cc1bbb2 )
( 50813, 0x0ae8061c )
( 50829, 0x31057a80 )
( 50849, 0x8f6afd47 )
( 50866, 0x642cc8af )
( 50884, 0x4a6f5004 )
( 50903, 0x6381d18b )
( 50922, 0x4d69dca2 )
( 50932, 0x2cd23bf1 )
( 50948, 0x66c16c9f )
( 50968, 0xa861e830 )
( 50985, 0x3319a97b )
( 51004, 0x0bc3335e )
( 51023, 0x5af93335 )
( 51041, 0x152cc750 )
( 51058, 0x96aa524e )
( 51076, 0x227f48b9 )
( 51091, 0xd2899917 )
( 51109, 0x11fb1550 )
( 51126, 0x37aac45f )
( 51144, 0x57ccbd7e )
( 51164, 0x27b80ec4 )
( 51176, 0xfc5e8fa1 )
( 51194, 0x29328127 )
( 51211, 0x250e999e )
( 51225, 0x8c50a31e )
( 51241, 0x0343eb96 )
( 51258, 0x8f3b0558 )
( 51274, 0x3d71a663 )
( 51295, 0xbe5078b4 )
( 51308, 0x81a1968e )
( 51326, 0xaecf9666 )
( 51347, 0x96bbc03a )
( 51360, 0x947b426c )
( 51378, 0xd424cb33 )
( 51399, 0xfc8411a0 )
( 51417, 0x304f38c8 )
( 51434, 0xf85c3611 )
( 51450, 0x71590a12 )
( 51467, 0x4c243b71 )
( 51483, 0xe24b85b5 )
( 51499, 0xf7eeef11 )
( 51522, 0x3342a431 )
( 51539, 0x239d684c )
( 51554, 0xf7264614 )
( 51571, 0x8376acfb )
( 51589, 0x61f91de5 )
( 51611, 0xf281ea7d )
( 51627, 0xd713d3f5 )
( 51642, 0x787ca7c7 )
( 51658, 0xd94ffb96 )
( 51679, 0xe6229763 )
( 51697, 0xd4390afe )
( 51715, 0x0a1c3802 )
( 51735, 0x40371be3 )
( 51753, 0x773da717 )
( 51772, 0xf042dd28 )
( 51791, 0x741fd1b2 )
( 51808, 0x238494e5 )
( 51825, 0xb6874413 )
( 51845, 0xc7a5d33f )
( 51867, 0x4c0710c5 )
( 51882, 0x8a8c2f65 )
( 51895, 0x32b44737 )
( 51920, 0x868f46be )
( 51937, 0x078b4e17 )
( 51960, 0xa070bd67 )
( 51978, 0x1bc8ff80 )
( 51995, 0x90c8be74 )
( 52010, 0x1193634f )
( 52028, 0x0a86ab1b )
( 52045, 0xb5f4f56f )
( 52057, 0x29d25bb1 )
( 52073, 0x140d7ba2 )
( 52093, 0x32715afa )
( 52113, 0xd468925c )
( 52123, 0x21b060d9 )
( 52141, 0x2d346734 )
( 52154, 0x88876d00 )
( 52172, 0xa36394c7 )
( 52187, 0xa162baab )
( 52208, 0x5fdafe6d )
( 52222, 0x48dde0d7 )
( 52237, 0x03dfd356 )
( 52260, 0x57d24202 )
( 52275, 0x751b3242 )
( 52290, 0xb9138603 )
( 52309, 0xb19a3127 )
( 52321, 0x6e809913 )
( 52342, 0x66a655b8 )
( 52364, 0x218add8f )
( 52375, 0x6654e132 )
( 52391, 0x3bb7b74c )
( 52409, 0x6bf640d9 )
( 52429, 0xe9b7ee63 )
( 52448, 0x6832c08e )
( 52463, 0x6b15a85e )
( 52476, 0xb305b68b )
( 52494, 0x8dceefc8 )
( 52510, 0x3ebf7916 )
( 52529, 0x78a892fc )
( 52546, 0x37772231 )
( 52565, 0xf85fab2b )
( 52581, 0xe3e89156 )
( 52602, 0xbcf8f558 )
( 52619, 0xb21d999d )
( 52636, 0xbbfbd9f1 )
( 52654, 0x27d9e996 )
( 52677, 0xd9ee9f36 )
( 52684, 0x6882665d )
( 52704, 0x262fc51a )
( 52716, 0xdcf02c55 )
( 52733, 0x014c07b7 )
( 52756, 0x10ca418e )
( 52768, 0xb9e60c53 )
( 52788, 0xfcda22c1 )
( 52800, 0x8c1519a3 )
( 52814, 0x6fc032f7 )
( 52822, 0x6bf3e2a3 )
( 52846, 0x7244c3d8 )
( 52863, 0x32bf31b6 )
( 52883, 0xf82f5d4b )
( 52896, 0x74b13a98 )
( 52917, 0x1ef8255d )
( 52931, 0x12d9f7ec )
( 52956, 0x80048053 )
( 52970, 0x525b46fd )
( 52988, 0x6877ef57 )
( 53006, 0xb5c2aaa0 )
( 53022, 0xadd1781f )
( 53037, 0x335682f6 )
( 53055, 0x1917f350 )
( 53071, 0x3a892599 )
( 53092, 0xf8984805 )
( 53112, 0xb07cfa43 )
( 53126, 0xc0e86be5 )
( 53146, 0xa9b9e703 )
( 53163, 0x7075186e )
( 53175, 0xf0f3ba99 )
( 53193, 0xa3402a75 )
( 53215, 0x2894116a )
( 53232, 0xf9cbbce6 )
( 53251, 0x8eb65cce )
( 53270, 0xbc126f7b )
( 53291, 0x3c9c1a73 )
( 53307, 0xbb130ec2 )
( 53324, 0x89324208 )
( 53344, 0xab7e7ce9 )
( 53362, 0x4670a28a )
( 53383, 0x7bd5eb9d )
( 53394, 0xfca09975 )
( 53416, 0x728d6de0 )
( 53435, 0xd683f055 )
( 53451, 0x42742688 )
( 53467, 0x71ed18ff )
( 53487, 0xee766b77 )
( 53501, 0xa79965ee )
( 53504, 0x28d3fa1c )
( 53520, 0x738ffd5f )
( 53538, 0x70f83a88 )
( 53553, 0xe9bed616 )
( 53573, 0x93c57219 )
( 53588, 0xe8adede6 )
( 53610, 0x28698599 )
( 53629, 0x5e3fd022 )
( 53642, 0x2e4e4f19 )
( 53661, 0x355fde3d )
( 53675, 0x79acd058 )
( 53692, 0x70a820db )
( 53708, 0xf06f2b57 )
( 53726, 0xb3ff3ccb )
( 53735, 0x78c969e8 )
( 53755, 0x6414f92b )
( 53775, 0xe3dbe241 )
( 53794, 0xf5ab3055 )
( 53811, 0x61e9939c )
( 53834, 0xe0bc5c16 )
( 53843, 0xbf841644 )
( 53864, 0x75e77f7b )
( 53887, 0x9ca67d3f )
( 53900, 0x1fec3cc2 )
( 53918, 0x41028e41 )
( 53934, 0xa844b2aa )
( 53949, 0x26f361ce )
( 53967, 0xe4fee7bb )
( 53984, 0xb0bf1189 )
( 53998, 0xbebf990d )
( 54019, 0x6089eb24 )
( 54037, 0xd1a85c3e )
( 54058, 0x547bfe11 )
( 54075, 0x86387275 )
( 54092, 0xf7b31e25 )
( 54106, 0x71d20827 )
( 54122, 0xe1bab27e )
( 54139, 0x66ba204c )
( 54160, 0xa488c8df )
( 54171, 0x397a4018 )
( 54189, 0xd79c6a61 )
( 54206, 0xde5797e1 )
( 54225, 0x4b725ea6 )
( 54244, 0xca4dd388 )
( 54262, 0xd1dd2ea0 )
( 54277, 0x08d73df0 )
( 54290, 0x0b640d2b )
( 54312, 0x476bac70 )
( 54329, 0xfdb0a1c5 )
( 54346, 0x0577b1fb )
( 54361, 0xaf3da3f3 )
( 54381, 0xdc2b38a2 )
( 54402, 0x93b7ac0c )
( 54415, 0xb0da8051 )
( 54433, 0xa24bd6b2 )
( 54449, 0xe7c8c4ec )
( 54468, 0x1f8e8908 )
( 54486, 0x565ee7c3 )
( 54502, 0xeca063fa )
( 54514, 0x3cab0faf )
( 54536, 0x7074b81a )
( 54550, 0xd5fade2f )
( 54568, 0x4a21d83a )
( 54581, 0xfd65191b )
( 54599, 0xaaa773d1 )
( 54616, 0x65f5de45 )
( 54635, 0xbbd91754 )
( 54651, 0xa8054180 )
( 54669, 0xcfacb37e )
( 54690, 0x4b834712 )
( 54707, 0x700aea6a )
( 54728, 0xb6f022c5 )
( 54745, 0xd192e151 )
( 54760, 0x6903a721 )
( 54778, 0xf067bb45 )
( 54797, 0xe582e09d )
( 54815, 0x59b68c54 )
( 54829, 0xec2e0b27 )
( 54850, 0xcea97f6b )
( 54867, 0xc8ac06de )
( 54890, 0x72643f27 )
( 54906, 0x77a69966 )
( 54925, 0x4258f32c )
( 54945, 0x329ca112 )
( 54964, 0x7fa444b0 )
( 54983, 0xacd9edbd )
( 55000, 0xc747043f )
( 55019, 0x543bcb16 )
( 55036, 0xb6634a9d )
( 55052, 0x266c3b55 )
( 55071, 0x073baf61 )
( 55087, 0x584e1b0b )
( 55097, 0x41bdecbf )
( 55112, 0x7a067f5f )
( 55133, 0x6a4105a9 )
( 55154, 0x196120b7 )
( 55164, 0x2ec85a54 )
( 55190, 0xc300a318 )
( 55201, 0x5ea7a600 )
( 55216, 0xdc108b41 )
( 55234, 0xbdf942ec )
( 55252, 0xb05ece50 )
( 55272, 0x9dba064c )
( 55290, 0x0544d817 )
( 55309, 0x103f1bf4 )
( 55324, 0xf0c39b93 )
( 55341, 0xda779c4a )
( 55357, 0x4f6d7243 )
( 55371, 0x0a9adb9f )
( 55388, 0x96e90737 )
( 55403, 0x6dcea0bc )
( 55417, 0xf525945c )
( 55436, 0x5eb07f39 )
( 55446, 0x3e93d135 )
( 55461, 0x4d23f339 )
( 55486, 0xdeb866cc )
( 55502, 0x59d7e2fd )
( 55517, 0xca2596bd )
( 55539, 0x15d923ab )
( 55560, 0xf5eb7fdb )
( 55574, 0x51b6e4c4 )
( 55590, 0x279de708 )
( 55601, 0xc96af921 )
( 55612, 0x5463c146 )
( 55632, 0xf00eeb1f )
( 55643, 0x75dbeebe )
( 55664, 0x3ded9413 )
( 55683, 0xa9bdc6f4 )
( 55704, 0xaa33eea4 )
( 55720, 0x5db9540b )
( 55734, 0xf45e7e21 )
( 55755, 0x823e6dfe )
( 55770, 0xe8674a21 )
( 55784, 0x624c11ad )
( 55802, 0xa65975e5 )
( 55814, 0xe22424e9 )
( 55834, 0x9bf07f3e )
( 55854, 0xb7891c99 )
( 55872, 0x80bd1ffa )
( 55891, 0x79d56489 )
( 55904, 0x9121374c )
( 55926, 0xf14cd835 )
( 55943, 0x8ec35f59 )
( 55952, 0x4fe179c6 )
( 55972, 0x52f5c2bf )
( 55987, 0x18b2fdb5 )
( 56005, 0x2d2983ae )
( 56022, 0xb80a18d6 )
( 56029, 0x2be06f67 )
( 56048, 0x19ea8245 )
( 56069, 0x21e11547 )
( 56083, 0xbbd16c23 )
( 56107, 0xa9eee729 )
( 56117, 0x53601872 )
( 56129, 0xacf22cc9 )
( 56149, 0xde693db5 )
( 56166, 0x178f06f7 )
( 56185, 0x83008fbb )
( 56200, 0x819f4bf3 )
( 56216, 0x974e9a65 )
( 56242, 0x9fba3266 )
( 56256, 0xc711af8a )
( 56269, 0xd5cc0b69 )
( 56293, 0xeee10c84 )
( 56311, 0xb057b86b )
( 56327, 0xa57cff2f )
( 56339, 0x55226075 )
( 56360, 0x821f755e )
( 56380, 0xa44b74b6 )
( 56398, 0xca4540ad )
( 56410, 0x39a9ff06 )
( 56427, 0x2b6280bb )
( 56444, 0x48a7e747 )
( 56465, 0x81e9fee4 )
( 56473, 0x49a62742 )
( 56495, 0xc54b7241 )
( 56506, 0xf4966bd1 )
( 56527, 0xe30a81fb )
( 56543, 0x0179c5b7 )
( 56564, 0x88392391 )
( 56572, 0x31e0eb66 )
( 56591, 0xf4eef39c )
( 56615, 0x7b082eaf )
( 56630, 0xf6674388 )
( 56646, 0x761c90ab )
( 56664, 0x199a5bbf )
( 56679, 0xa6aae351 )
( 56696, 0x429896b8 )
( 56712, 0xa3f8c26e )
( 56736, 0xc4be9d64 )
( 56748, 0xc24f31a2 )
( 56766, 0xc6979b2b )
( 56782, 0xec8beffe )
( 56794, 0xa456b8d7 )
( 56816, 0x8f957feb )
( 56833, 0x7ffe9429 )
( 56851, 0xd7cb375d )
( 56868, 0x59ff9d38 )
( 56887, 0xdeb55f36 )
( 56904, 0x5a264d20 )
( 56922, 0x2d99cc0e )
( 56943, 0x0db096f0 )
( 56958, 0x61ad9b4d )
( 56978, 0x5255e47b )
( 56997, 0xbbc90227 )
( 57015, 0xd64d5703 )
( 57036, 0x158c9fc6 )
( 57050, 0x6ecf3d8e )
( 57067, 0xc8782dc2 )
( 57089, 0xe26c8a1b )
( 57097, 0xc9bc0071 )
( 57117, 0x1c5d2823 )
( 57133, 0x57ffa78a )
( 57147, 0xbfad8ddc )
( 57166, 0x0fc4b54a )
( 57187, 0xfbfdaa80 )
( 57201, 0xe8ec59cc )
( 57218, 0xb411bb55 )
( 57233, 0xd8c006a1 )
( 57251, 0x9a683439 )
( 57265, 0x9e27ac3b )
( 57280, 0x79ab6f2c )
( 57298, 0x7ed1c320 )
( 57313, 0x090304df )
( 57334, 0xc196a63f )
( 57350, 0x96915c49 )
( 57359, 0x5ce39daa )
( 57380, 0xff661d2f )
( 57399, 0x822fb44d )
( 57414, 0x03d6f188 )
( 57435, 0xde810bc1 )
( 57452, 0x3f7328c7 )
( 57467, 0xf8120845 )
( 57485, 0x11e6a8d9 )
( 57504, 0xe30ae66c )
( 57517, 0xe0babf7a )
( 57537, 0x25416db0 )
( 57548, 0x2c5d9568 )
( 57571, 0xce5431d2 )
( 57592, 0x67cc1938 )
( 57605, 0xeedab1fb )
( 57623, 0xb8cc5ce5 )
( 57644, 0xb99d35b2 )
( 57656, 0x9e17e70b )
( 57673, 0xdab2f440 )
( 57692, 0x6964b6f5 )
( 57710, 0x9bb5efdf )
( 57729, 0x6b8f76d9 )
( 57752, 0x8af0cada )
( 57765, 0x26da17ce )
( 57783, 0x63aeeffc )
( 57795, 0x625b46cb )
( 57807, 0x72f72381 )
( 57824, 0x4b5f43f4 )
( 57842, 0xacbae114 )
( 57860, 0xbabc7a2c )
( 57876, 0x81179d7c )
( 57892, 0x6545f8a7 )
( 57913, 0xbf704389 )
( 57929, 0x08feea08 )
( 57947, 0xefb00a5f )
( 57962, 0x8dd2c524 )
( 57986, 0x6903a101 )
( 58005, 0x4b9e1fe6 )
( 58018, 0x075d4b91 )
( 58033, 0x217662dc )
( 58052, 0xd29d09f6 )
( 58069, 0x358bd230 )
( 58085, 0xe4843d9e )
( 58104, 0x212567cf )
( 58121, 0xfe0e7aeb )
( 58140, 0x896a62c1 )
( 58158, 0x528f9290 )
( 58180, 0x44d76d5d )
( 58191, 0x6fbfb9c6 )
( 58212, 0xeed1bc54 )
( 58228, 0xd3f552ea )
( 58248, 0x3504b5c7 )
( 58265, 0x32e9d4f6 )
( 58279, 0x2b6bdc2d )
( 58302, 0xfa79f343 )
( 58321, 0xccad4c6b )
( 58335, 0xf2576c77 )
( 58350, 0xb1ee2a19 )
( 58368, 0x7b13c2ba )
( 58381, 0x9b4df2b0 )
( 58401, 0x184458c2 )
( 58412, 0xc21ff1a0 )
( 58437, 0xabf451c8 )
( 58450, 0x3d9e0c7c )
( 58466, 0x33dc0d92 )
( 58480, 0xce65fa81 )
( 58496, 0xf82ab800 )
( 58510, 0xb607a766 )
( 58534, 0x3bd91e2c )
( 58552, 0x211d5130 )
( 58570, 0xec5ca91f )
( 58588, 0x0d9783c1 )
( 58606, 0xff427706 )
( 58629, 0x37968f09 )
( 58649, 0x05f1bae2 )
( 58658, 0x6bfbdc5b )
( 58676, 0x261b6f83 )
( 58694, 0xecd0fd17 )
( 58712, 0x0c73012c )
( 58724, 0xf17c4517 )
( 58742, 0x95762beb )
( 58759, 0x2327f5af )
( 58779, 0x55f0c2b7 )
( 58796, 0x5bf08af0 )
( 58813, 0x045a1292 )
( 58825, 0x31e01061 )
( 58843, 0x3d7c4fe0 )
( 58860, 0x8fbbd998 )
( 58876, 0xe54c51f9 )
( 58890, 0x7e97435b )
( 58909, 0x4f2c5213 )
( 58922, 0xc9759a3a )
( 58938, 0x5f635c6e )
( 58954, 0x60cd0e9a )
( 58968, 0x38b528aa )
( 58984, 0x95285b07 )
( 59003, 0x91109004 )
( 59015, 0x8443a34d )
( 59034, 0x322a39dd )
( 59051, 0x7d523373 )
( 59072, 0x451126e6 )
( 59089, 0xee9fb412 )
( 59100, 0x8e1bef89 )
( 59124, 0x5303b1d9 )
( 59142, 0xc8d294c4 )
( 59160, 0xb1e8f2dd )
( 59178, 0x849833b9 )
( 59196, 0x362c29fe )
( 59212, 0xff205c74 )
( 59236, 0xb1c5bd83 )
( 59243, 0xb7254c1e )
( 59259, 0x31335199 )
( 59273, 0x4f2b6cbc )
( 59287, 0x7e052cf8 )
( 59308, 0x8f6cabb2 )
( 59325, 0x20d75e97 )
( 59344, 0xde0905d2 )
( 59364, 0xd6b84086 )
( 59375, 0xee2ca1fc )
( 59393, 0x053f14e2 )
( 59413, 0xf8dd55a1 )
( 59429, 0x0b4b2739 )
( 59447, 0x69653057 )
( 59463, 0x86294810 )
( 59480, 0xf072a34a )
( 59500, 0xfb273131 )
( 59515, 0xa770dbe8 )
( 59534, 0x931bfa5a )
( 59552, 0x23bee80f )
( 59573, 0x97dfc006 )
( 59591, 0x3d08303e )
( 59608, 0x0cf3b2a3 )
( 59618, 0xf7d42333 )
( 59635, 0xc5402f87 )
( 59655, 0xdb9e6f77 )
( 59672, 0xa0f5357e )
( 59690, 0xd67b03df )
( 59704, 0x04822236 )
( 59713, 0x1f054ed7 )
( 59736, 0x68ba1255 )
( 59752, 0x65bae9f5 )
( 59766, 0x2eb5f529 )
( 59787, 0x9de363d0 )
( 59802, 0x8b9176a2 )
( 59814, 0x749c3856 )
( 59830, 0x3d8bb2c6 )
( 59848, 0xdf85aee0 )
( 59870, 0x3225e05f )
( 59886, 0x5f525852 )
( 59904, 0x6e525ee5 )
( 59917, 0x3fe6794e )
( 59936, 0xab947018 )
( 59953, 0xf444ce41 )
( 59966, 0x09a05ff8 )
( 59985, 0xdccdc840 )
( 59995, 0x5c404488 )
( 60018, 0xc59fb3bb )
( 60026, 0xa85b1f49 )
( 60047, 0xa1d14ea4 )
( 60059, 0x2a629662 )
( 60078, 0x18a826bc )
( 60094, 0x1edd5e90 )
( 60110, 0x38e38093 )
( 60137, 0xf791cfc1 )
( 60147, 0x841aca5e )
( 60167, 0xc4655498 )
( 60176, 0x048061d4 )
( 60193, 0x71e06dd9 )
( 60209, 0x8884031f )
( 60226, 0x5383c1b2 )
( 60246, 0x5acd9aa9 )
( 60264, 0xd7b07366 )
( 60285, 0x8b65221f )
( 60302, 0xe4674c87 )
( 60319, 0xb9dfd33f )
( 60339, 0x99b6239a )
( 60361, 0x606151c2 )
( 60376, 0x365bd55a )
( 60394, 0x5b1a1c80 )
( 60411, 0x708c14d9 )
( 60428, 0xf1a99b36 )
( 60442, 0x6ab0c9b7 )
( 60460, 0x857e08f0 )
( 60477, 0xfb54ab99 )
( 60490, 0x6e1c2532 )
( 60513, 0xa3adcb9c )
( 60524, 0xeff73cd0 )
( 60545, 0x7add51d2 )
( 60562, 0xae616072 )
( 60576, 0x1f81c04d )
( 60595, 0x56549c18 )
( 60612, 0x2dca5264 )
( 60629, 0x56df6a95 )
( 60646, 0xe7254950 )
( 60663, 0xd2cf1052 )
( 60681, 0x7d2a4678 )
( 60696, 0x5fae38aa )
( 60714, 0x2b76474c )
( 60733, 0xa9dd6400 )
( 60746, 0x7e0b53f3 )
( 60767, 0xd7617925 )
( 60782, 0x67460ca1 )
( 60798, 0xde4a076b )
( 60819, 0x351a0a7a )
( 60834, 0x03f35259 )
( 60848, 0xd4aa724e )
( 60867, 0x3b27384c )
( 60884, 0xdb834597 )
( 60901, 0xf25d9bcb )
( 60913, 0xca90f433 )
( 60938, 0x82038a5d )
( 60947, 0xb781f608 )
( 60965, 0x78a26896 )
( 60981, 0x7571e8ff )
( 60995, 0xdf545b2e )
( 61017, 0xd2f3b5c9 )
( 61032, 0xd7147087 )
( 61048, 0x2d098214 )
( 61067, 0x15894a8c )
( 61087, 0x181cbed9 )
( 61102, 0x1c8cc541 )
( 61117, 0x6e3dc3a1 )
( 61137, 0x5942ea7d )
( 61152, 0x30c8834f )
( 61169, 0xa8e27a44 )
( 61190, 0x7ae2eae6 )
( 61205, 0x37986c9c )
( 61224, 0x8bb09e25 )
( 61245, 0x8f9b1eee )
( 61257, 0xc1801b20 )
( 61274, 0xa5fef5b9 )
( 61296, 0xd4be44cb )
( 61312, 0x4cc6d617 )
( 61329, 0x5c01f876 )
( 61347, 0xd7facc6b )
( 61368, 0xb7bd7a60 )
( 61384, 0xea77a5ee )
( 61403, 0xa20f500e )
( 61422, 0x865a2f93 )
( 61438, 0xf1789085 )
( 61449, 0xd8aa082f )
( 61462, 0x6a92f05c )
( 61477, 0xf1306444 )
( 61492, 0x48ad8287 )
( 61513, 0x826b315d )
( 61532, 0x81dde18e )
( 61550, 0xdb60a8a8 )
( 61568, 0x955dc779 )
( 61588, 0xeab28023 )
( 61604, 0x56291864 )
( 61625, 0x2f1a5e40 )
( 61640, 0xdf7c12be )
( 61660, 0x0acfa87e )
( 61676, 0x24828ff3 )
( 61680, 0x840d36da )
( 61684, 0xbd8f9086 )
( 61689, 0x163e1eff )
( 61691, 0x032fd1eb )
( 61697, 0x8fc44fe7 )
( 61707, 0x0fcd6b7c )
( 61744, 0x25bc3f30 )
( 61771, 0x673a63b4 )
( 61788, 0xa2659a8b )
( 61807, 0x98e31a2c )
( 61831, 0xf3d67b58 )
( 61845, 0x226e2ab8 )
( 61863, 0xe38d9f00 )
( 61886, 0x90d3380e )
( 61904, 0x5202f534 )
( 61920, 0xb5642e47 )
( 61938, 0x7ffc3be3 )
( 61963, 0x8c6883f1 )
( 61975, 0x77c0be42 )
( 61986, 0xe316f8bc )
( 62001, 0x677a20fa )
( 62016, 0x8f681255 )
( 62036, 0xd7dcc6f2 )
( 62058, 0x38dc573d )
( 62069, 0x8f1cce81 )
( 62085, 0xfdb7719a )
( 62107, 0xcb428e90 )
( 62124, 0x58981378 )
( 62147, 0x6f947d7f )
( 62163, 0x1912f708 )
( 62180, 0x9374c14a )
( 62201, 0x9aaeb53f )
( 62218, 0xd5734a6d )
( 62236, 0xc96763a2 )
( 62250, 0x497456b0 )
( 62274, 0xa9a12d86 )
( 62288, 0x9d265c6d )
( 62305, 0x34ec309e )
( 62322, 0xf7f5aba1 )
( 62338, 0xdd09ec98 )
( 62352, 0x4acabfee )
( 62367, 0x61b25061 )
( 62388, 0x6d31c77b )
( 62402, 0xf772db89 )
( 62424, 0xf94eed5d )
( 62439, 0x1474120d )
( 62457, 0x3ff22b2a )
( 62471, 0x8470acf9 )
( 62488, 0x16fd2b8b )
( 62497, 0xcb216a1a )
( 62517, 0x9d5c4b85 )
( 62534, 0xf8735075 )
( 62554, 0x25a6e818 )
( 62575, 0x2b9a97e8 )
( 62592, 0x4db6e9f1 )
( 62600, 0x9d201bd4 )
( 62619, 0x4b7aea87 )
( 62633, 0xbc284b82 )
( 62655, 0x8df386ea )
( 62667, 0xae1bac1b )
( 62684, 0xdc125d29 )
( 62709, 0x3b4e2ad3 )
( 62723, 0xc6e3c210 )
( 62739, 0x0e97e172 )
( 62760, 0xfb0625c6 )
( 62774, 0xe5294609 )
( 62796, 0x3ea04d9f )
( 62811, 0xa99cff62 )
( 62832, 0x5f94d5a8 )
( 62843, 0xe5cc47a3 )
( 62867, 0x16f9194b )
( 62881, 0x006b77f7 )
( 62900, 0x74074f6d )
( 62920, 0x48b403db )
( 62937, 0x9f4ee5cb )
( 62955, 0x8ea40d05 )
( 62974, 0x43f13a4b )
( 62986, 0x518bc576 )
( 63007, 0xf9821ed8 )
( 63022, 0x1d087398 )
( 63041, 0xe86932bd )
( 63058, 0x7f143b6e )
( 63076, 0x67c71dbb )
( 63091, 0xade9abb7 )
( 63108, 0x991f617e )
( 63125, 0x1d657d0e )
( 63146, 0x5c199fd3 )
( 63163, 0xbca8da39 )
( 63179, 0x6e64dd05 )
( 63198, 0xd29ee52d )
( 63221, 0x2a47e23b )
( 63239, 0x324dd40d )
( 63253, 0x3704571f )
( 63275, 0xab93d875 )
( 63293, 0xcd1d6966 )
( 63314, 0xff6b38cf )
( 63330, 0xd14ba22d )
( 63348, 0xab0ea09c )
( 63364, 0x73a83061 )
( 63385, 0x2c45e738 )
( 63404, 0x08a70c16 )
( 63422, 0xe6c51e72 )
( 63440, 0xe49f4f85 )
( 63457, 0x01e5f8d5 )
( 63477, 0x8a19e570 )
( 63490, 0xdaba0848 )
( 63513, 0xa7b989b4 )
( 63529, 0xcee70934 )
( 63547, 0x738f1f9c )
( 63567, 0x0d891c68 )
( 63579, 0x44cd9b4a )
( 63591, 0x4da2209a )
( 63608, 0xed7e9036 )
( 63629, 0x91d9d041 )
( 63641, 0xbd969a97 )
( 63656, 0xfd5c47ca )
( 63675, 0x984be2aa )
( 63692, 0x913e9daf )
( 63713, 0xef1eaefc )
( 63726, 0x5d05cadd )
( 63744, 0x21ce5205 )
( 63765, 0x45d6dd14 )
( 63778, 0x85e671c5 )
( 63792, 0x8ad817a6 )
( 63816, 0x92b42b73 )
( 63835, 0x521ab302 )
( 63850, 0xbade7857 )
( 63865, 0x1d738fd1 )
( 63882, 0x9428ef99 )
( 63901, 0x524f69c9 )
( 63923, 0x6d244d11 )
( 63938, 0x1a169ed0 )
( 63956, 0x643c9981 )
( 63965, 0xc307d366 )
( 63989, 0xd3bd58c0 )
( 64004, 0x794e0a21 )
( 64025, 0x378b1826 )
( 64041, 0x371f5055 )
( 64059, 0x78264684 )
( 64077, 0xd39c678a )
( 64097, 0x807b1a7c )
( 64110, 0xe30aa232 )
( 64126, 0x2e482942 )
( 64140, 0xe68bbca0 )
( 64159, 0xc3ed9687 )
( 64173, 0x7d77666e )
( 64197, 0xb5f926fa )
( 64208, 0x3c21f076 )
( 64225, 0x937e052c )
( 64242, 0x804ef04f )
( 64262, 0x75b9ae13 )
( 64285, 0x3fe0b027 )
( 64300, 0x468c6f62 )
( 64317, 0x759c7a19 )
( 64340, 0xbd1eaff4 )
( 64351, 0x62c6ca20 )
( 64370, 0x27590468 )
( 64387, 0x7632f14b )
( 64403, 0xdf578a92 )
( 64422, 0x15af8370 )
( 64432, 0xfcbbaad7 )
( 64452, 0x12df1f82 )
( 64471, 0xb0e99797 )
( 64489, 0xb200252c )
( 64505, 0xc91ef179 )
( 64521, 0x44aaf13c )
( 64545, 0x1221146c )
( 64557, 0xde0503c7 )
( 64574, 0xbd2a779a )
( 64592, 0xbe598371 )
( 64613, 0xe4446d2f )
( 64630, 0xdc90ca60 )
( 64646, 0xc4242029 )
( 64666, 0x288d6733 )
( 64678, 0xadd7b54c )
( 64700, 0x74fd5302 )
( 64715, 0x8cb36874 )
( 64736, 0x2a153e05 )
( 64751, 0x06c2ee58 )
( 64768, 0x2dc9133e )
( 64783, 0xd794e9b5 )
( 64804, 0xccbbc22d )
( 64822, 0x8a1c550a )
( 64838, 0x45b69926 )
( 64853, 0x7e6b34bc )
( 64867, 0x5c738e3b )
( 64883, 0x04e4e9ed )
( 64899, 0x297c07c4 )
( 64923, 0xc905ba4f )
( 64938, 0x1d420d70 )
( 64956, 0xc6a0e468 )
( 64970, 0xc78b452a )
( 64992, 0x53b795a6 )
( 65007, 0xbe4d7324 )
( 65026, 0xebbd9d03 )
( 65038, 0x05fefbda )
( 65061, 0xa9a774c5 )
( 65082, 0xbf88cfe4 )
( 65095, 0x44bebcd0 )
( 65109, 0xab986a19 )
( 65123, 0xf52900f1 )
( 65141, 0xecfc2b51 )
( 65159, 0xc4ca1070 )
( 65171, 0x58039dd3 )
( 65184, 0x938d01ce )
( 65202, 0x3a258792 )
( 65217, 0xaa125070 )
( 65235, 0x837b89a4 )
( 65253, 0x90e20474 )
( 65271, 0xd477bf87 )
( 65291, 0xc1c0a6f9 )
( 65312, 0x4dff5a23 )
( 65328, 0xc57945b8 )
( 65346, 0x8c49abad )
( 65363, 0xfae1f15a )
( 65380, 0x34f90543 )
( 65399, 0x251a70a6 )
( 65413, 0xd8f7820c )
( 65430, 0xcde61dd0 )
( 65447, 0x762fc832 )
( 65455, 0xf7fb5a90 )
( 65475, 0x3c54197c )
( 65492, 0x7266e94c )
( 65510, 0x1252077f )
( 65525, 0x1ce754d7 )
( 65545, 0x31992a4b )
( 65565, 0xc667b28f )
( 65587, 0x14d03bc0 )
( 65598, 0x2bbcbf4c )
( 65611, 0xaf736b88 )
( 65627, 0x44744f8a )
( 65651, 0x1443248d )
( 65667, 0xa7e346e6 )
( 65673, 0x279c5105 )
( 65683, 0x53f83188 )
( 65695, 0x851beb01 )
( 65720, 0xdfbb6d50 )
( 65736, 0x5a5b1fcb )
( 65747, 0x7bbeeae2 )
( 65764, 0x30a347fd )
( 65777, 0x088ee2bf )
( 65790, 0x8531601a )
( 65808, 0x06fa3e36 )
( 65818, 0x98c2a14a )
( 65835, 0xa83dcc82 )
( 65851, 0x7b1826bd )
( 65867, 0x1cf1a3d7 )
( 65883, 0xd0fa4214 )
( 65904, 0xa3423f7c )
( 65920, 0x36a92b77 )
( 65934, 0x3808201d )
( 65957, 0x626718bb )
( 65975, 0xe8c19787 )
( 65997, 0xe22388a2 )
( 66009, 0x353e432d )
( 66023, 0x9961308c )
( 66043, 0xb73eca07 )
( 66058, 0xefd9ad4d )
( 66076, 0xe9c0f935 )
( 66090, 0x88c4d3fb )
( 66108, 0x36e08265 )
( 66124, 0xd5bbbdac )
( 66143, 0x81cb0549 )
( 66155, 0x87d92162 )
( 66175, 0xfb8ef550 )
( 66186, 0x7be7a630 )
( 66201, 0x17752c76 )
( 66218, 0x383d4840 )
( 66243, 0x204e876d )
( 66258, 0xde366b85 )
( 66277, 0x1834ac3d )
( 66295, 0x8c8fce82 )
( 66311, 0x6e907b74 )
( 66334, 0x580a1a8a )
( 66342, 0xd6e474e1 )
( 66364, 0xf2e8f2e5 )
( 66380, 0x9c7e5a08 )
( 66390, 0x581f1060 )
( 66412, 0xc38a518b )
( 66431, 0x520fa605 )
( 66446, 0x202ad273 )
( 66458, 0x24d47486 )
( 66478, 0xc7ca2b5f )
( 66495, 0x38a0dad7 )
( 66516, 0x94c5cc7f )
( 66532, 0x8182e19a )
( 66551, 0x2f1ae0a1 )
( 66569, 0x0c37f7ee )
( 66588, 0x956b0af6 )
( 66602, 0xea51d7fb )
( 66617, 0xd9b88f93 )
( 66631, 0x1a7a5f70 )
( 66654, 0x803d03fe )
( 66668, 0x3a0e9156 )
( 66686, 0xc3edb8c7 )
( 66701, 0xf5738e45 )
( 66722, 0x7d91df68 )
( 66736, 0x42b33d8c )
( 66757, 0xa80834dd )
( 66768, 0x8073910a )
( 66786, 0x225eb1e9 )
( 66805, 0xf7aab453 )
( 66826, 0xf7ab3283 )
( 66841, 0xf3398020 )
( 66863, 0x0ca47e69 )
( 66877, 0x2b0e801d )
( 66892, 0xf7b3241a )
( 66911, 0xab7137d8 )
( 66930, 0x1b45c72a )
( 66946, 0x96a431c7 )
( 66969, 0x3b3f4899 )
( 66987, 0xac979b81 )
( 66997, 0x816a07e0 )
( 67019, 0x3a873d19 )
( 67032, 0x4c8baa40 )
( 67051, 0xa0506584 )
( 67064, 0xbe05ebfb )
( 67080, 0x3cda362c )
( 67101, 0x5b102f9a )
( 67124, 0x81b292ae )
( 67141, 0x1229a0f4 )
( 67159, 0x1400cd3b )
( 67173, 0xe98badc3 )
( 67194, 0x2092fd1e )
( 67214, 0x361b8227 )
( 67231, 0xd8751b56 )
( 67244, 0x5b2b9bcd )
( 67263, 0x536ccbb4 )
( 67281, 0x54a8ff2d )
( 67298, 0x23da2459 )
( 67314, 0xb13d6fef )
( 67334, 0x14a89223 )
( 67343, 0x6d06bbb6 )
( 67356, 0x9367802f )
( 67377, 0x670291bd )
( 67393, 0xcc97b14e )
( 67409, 0xa0a2144f )
( 67429, 0x806f2d1b )
( 67444, 0xaf66ba65 )
( 67463, 0xf916a59c )
( 67480, 0x68aac425 )
( 67496, 0xa40d5304 )
( 67512, 0x563c2ded )
( 67529, 0x196df065 )
( 67535, 0xfe14d3f9 )
( 67549, 0x25cd55cd )
( 67569, 0x7a7b271a )
( 67588, 0xc68764b4 )
( 67599, 0xe6c3c176 )
( 67620, 0x6d9eac0c )
( 67640, 0x9abdb480 )
( 67657, 0xc8923ee9 )
( 67674, 0x52c91357 )
( 67689, 0x639a010a )
( 67710, 0x963c30cc )
( 67725, 0xcc4c2326 )
( 67748, 0x67ffa9b8 )
( 67764, 0x60d24ee2 )
( 67780, 0xddaab1f9 )
( 67797, 0x76e8f682 )
( 67813, 0x9ab9b2e8 )
( 67830, 0xa1a81d8d )
( 67844, 0x8d4295d5 )
( 67865, 0xcf7801ab )
( 67876, 0x878a421a )
( 67895, 0x0bd921d5 )
( 67913, 0x3ba7a788 )
( 67925, 0x21866e20 )
( 67940, 0x7ad08c44 )
( 67961, 0xe61a7bc2 )
( 67978, 0x7bc36d84 )
( 67997, 0x374e08a9 )
( 68012, 0x85b31c2d )
( 68031, 0xb850bf0c )
( 68048, 0xa073ed74 )
( 68066, 0x8b524100 )
( 68082, 0xf894817b )
( 68103, 0xc07b425b )
( 68119, 0x1689f09f )
( 68132, 0xed4756d9 )
( 68148, 0xa4234f6e )
( 68168, 0x4cf0cad1 )
( 68182, 0x414f7aa9 )
( 68196, 0xb2e52b98 )
( 68217, 0x750b60b9 )
( 68234, 0x0dfea9fa )
( 68254, 0xba41470a )
( 68266, 0xa28adc31 )
( 68284, 0xacbde6c4 )
( 68300, 0x450fa413 )
( 68320, 0xdf74869d )
( 68342, 0xf823ad9d )
( 68358, 0x4fb8d790 )
( 68376, 0xfeea4f7d )
( 68394, 0x7701feaf )
( 68410, 0x931aac3d )
( 68431, 0x8db76825 )
( 68451, 0xd92593de )
( 68459, 0x74664e61 )
( 68475, 0x7bcb6e07 )
( 68493, 0xe47cdf2a )
( 68510, 0x9f528cc2 )
( 68531, 0xe2c700a5 )
( 68541, 0xa7b23cd5 )
( 68564, 0x58bcb5b5 )
( 68580, 0xaba5db2a )
( 68595, 0x6958a124 )
( 68608, 0xec6b7094 )
( 68627, 0x6a7a5502 )
( 68646, 0xdc7fe29c )
( 68667, 0x9b0ea1c6 )
( 68678, 0xb1cdebe8 )
( 68697, 0xd545184c )
( 68716, 0xe3bc6db3 )
( 68727, 0x421784ae )
( 68750, 0xf9f2195d )
( 68767, 0x1c2c7f89 )
( 68786, 0x842e134e )
( 68800, 0x83c821f4 )
( 68821, 0x310ee2dd )
( 68836, 0x0de9aab1 )
( 68852, 0x36ad2e11 )
( 68866, 0x49888638 )
( 68886, 0xd0c78718 )
( 68903, 0x4e73ea88 )
( 68924, 0xa68f5479 )
( 68939, 0xf2357505 )
( 68955, 0xd222c685 )
( 68975, 0xe434c39b )
( 68993, 0x22268611 )
( 69011, 0x5f723706 )
( 69027, 0x591a6b07 )
( 69047, 0x25ff8801 )
( 69062, 0xd35df4f9 )
( 69080, 0xf4704f49 )
( 69097, 0xe2885000 )
( 69104, 0x5b3e3eba )
( 69108, 0x425da685 )
( 69117, 0x9f8639ea )
( 69121, 0xf31cdd76 )
( 69126, 0x418cfd86 )
( 69140, 0xfee72d60 )
( 69153, 0x3077f615 )
( 69186, 0x04fb4f7d )
( 69216, 0x9beb209b )
( 69238, 0xf3bf14da )
( 69255, 0x4d04d9aa )
( 69277, 0x52486e56 )
( 69290, 0xac84731c )
( 69310, 0x05fa0869 )
( 69327, 0x2b3bde7d )
( 69343, 0xc8ad6e36 )
( 69358, 0xbc46f456 )
( 69379, 0xcfc3aefc )
( 69392, 0xe814a90a )
( 69407, 0x9e02ced6 )
( 69422, 0xb893bd88 )
( 69438, 0x55a7fd89 )
( 69460, 0xc957d57e )
( 69475, 0x7d99af86 )
( 69496, 0x80080f11 )
( 69515, 0xa4fbd805 )
( 69533, 0xda6f504e )
( 69552, 0xc0a18ae7 )
( 69573, 0xe0a6157d )
( 69587, 0x87c1923f )
( 69605, 0x3bf653fb )
( 69623, 0x0539543e )
( 69636, 0x3e755cd2 )
( 69654, 0x75c5db58 )
( 69673, 0x4c42b6e1 )
( 69692, 0xa863d394 )
( 69710, 0x756201e1 )
( 69729, 0x3a3e4b50 )
( 69742, 0x5d1e5971 )
( 69757, 0xef6e5f8e )
( 69780, 0xdf7fbada )
( 69793, 0x2a4fb6db )
( 69812, 0xdbe471b1 )
( 69827, 0xd93c3754 )
( 69844, 0xbae34fb9 )
( 69862, 0x5d51c04a )
( 69880, 0x44d75a89 )
( 69894, 0x26ad155a )
( 69916, 0x6ac8e868 )
( 69925, 0x0ba253d9 )
( 69940, 0x78a3e00e )
( 69959, 0xb9142a1a )
( 69975, 0x0667a6f9 )
( 69992, 0x3b8d9827 )
( 70012, 0xfc8426ac )
( 70029, 0x556585b8 )
( 70045, 0x55aaa0f9 )
( 70059, 0xc1b3b78e )
( 70082, 0x1e7b74ca )
( 70100, 0x4f4c8121 )
( 70117, 0xb31826b4 )
( 70133, 0x833e731b )
( 70156, 0xdfb8683b )
( 70167, 0x388a303c )
( 70186, 0x7405b3e4 )
( 70200, 0x8a5359b4 )
( 70214, 0x6ce513c1 )
( 70232, 0xcd15054b )
( 70244, 0x8b9ec1dc )
( 70264, 0xedb97173 )
( 70281, 0x2524ee52 )
( 70300, 0x99a310b9 )
( 70319, 0x90e93b39 )
( 70334, 0x40d0e4ee )
( 70357, 0x509a7d4d )
( 70371, 0xe6b101e4 )
( 70383, 0x8c90193a )
( 70399, 0x9f69948f )
( 70419, 0xa7c43d44 )
( 70440, 0xa5100f7a )
( 70452, 0x93a87604 )
( 70470, 0xfd75afcf )
( 70489, 0xe6b16b6b )
( 70505, 0x09f39f51 )
( 70521, 0xc79bae95 )
( 70532, 0xfba949fd )
( 70543, 0xbfa9a92e )
( 70559, 0x2942999b )
( 70578, 0x38f80c94 )
( 70591, 0x5539a611 )
( 70611, 0x52d17291 )
( 70626, 0xa5bb0936 )
( 70644, 0xd3faec64 )
( 70660, 0xff08d9c6 )
( 70679, 0x4fc0a6c1 )
( 70699, 0xa02291a3 )
( 70710, 0x4b59489e )
( 70725, 0xde23a689 )
( 70741, 0xf58d531a )
( 70760, 0xe177d347 )
( 70780, 0x717e3d48 )
( 70797, 0x43cddf95 )
( 70817, 0x342807f8 )
( 70835, 0x6a1913c8 )
( 70854, 0x5e71e19b )
( 70874, 0x05852c18 )
( 70886, 0xd974452a )
( 70907, 0x491b1961 )
( 70925, 0x4661be43 )
( 70940, 0x4344b0f5 )
( 70958, 0x439b7084 )
( 70980, 0x56864b2e )
( 70993, 0x26ba35f3 )
( 71011, 0x707f8d86 )
( 71025, 0x329ae59b )
( 71044, 0x49357cbc )
( 71062, 0x1a39cd56 )
( 71079, 0xbbc476a4 )
( 71096, 0x7faeb95f )
( 71117, 0x3ceb97bf )
( 71131, 0x96d535e2 )
( 71153, 0xb154301f )
( 71168, 0xb6b4dd49 )
( 71186, 0x8c30f60d )
( 71204, 0x7529a57e )
( 71220, 0x0014da5a )
( 71236, 0x3ac13a3c )
( 71248, 0x9dcd7c27 )
( 71266, 0x35a95396 )
( 71280, 0x4dee402d )
( 71301, 0x1422f947 )
( 71315, 0xfb6eec14 )
( 71337, 0xdc770d26 )
( 71348, 0xa8aa9b69 )
( 71364, 0x9cc446d3 )
( 71386, 0x7f819b2d )
( 71404, 0xd156bbcd )
( 71421, 0x338d02c7 )
( 71438, 0x848dfb99 )
( 71453, 0xc74c641e )
( 71471, 0xf537d427 )
( 71484, 0x5e321ae3 )
( 71498, 0x604bc43c )
( 71514, 0x9143f741 )
( 71532, 0xc7b8011d )
( 71557, 0x030dac39 )
( 71568, 0xc9b99973 )
( 71590, 0x3c2ee5ee )
( 71604, 0x0cd3ed5b )
( 71625, 0xb4d699fc )
( 71640, 0x072b310e )
( 71659, 0xaf8f9f06 )
( 71676, 0xf4c62362 )
( 71696, 0xb671494b )
( 71709, 0x23956edc )
( 71727, 0x96a0290e )
( 71747, 0x8e3fdbc4 )
( 71762, 0xd29c3fa5 )
( 71779, 0xd0f99207 )
( 71800, 0xf531a88d )
( 71818, 0xdb6fef44 )
( 71831, 0x809e3911 )
( 71851, 0xf2d53a01 )
( 71870, 0xa8c39b83 )
( 71889, 0xdc7431ae )
( 71907, 0xf0eda1ea )
( 71923, 0x00e15e67 )
( 71943, 0x62108d2d )
( 71959, 0x511ae623 )
( 71970, 0xc9d9f5fe )
( 71991, 0x88b24c09 )
( 72006, 0x89a4bf52 )
( 72024, 0x7b9c1999 )
( 72033, 0xd927b248 )
( 72048, 0xc9467b30 )
( 72065, 0x0457a57c )
( 72082, 0x9dc80c45 )
( 72104, 0x08d37f18 )
( 72114, 0x68ff2f05 )
( 72136, 0xb90b7534 )
( 72152, 0x4cf6987f )
( 72166, 0xa80e7503 )
( 72185, 0xef4124bc )
( 72194, 0xc0bf7ee1 )
( 72208, 0xcf88ef2e )
( 72221, 0x199c9773 )
( 72241, 0xcd5db4ff )
( 72255, 0x2fd753e1 )
( 72272, 0xa650a66e )
( 72289, 0x649217ed )
( 72310, 0x8b24b326 )
( 72326, 0x718d69ac )
( 72345, 0x6409c9ee )
( 72359, 0xfac1d763 )
( 72383, 0xf8332e7f )
( 72400, 0xc023f1e9 )
( 72416, 0xd9b81f85 )
( 72429, 0x08cfd147 )
( 72449, 0xf73badec )
( 72469, 0x58d594ee )
( 72478, 0x57a0ad8c )
( 72496, 0xbbbbefd1 )
( 72516, 0x4813f813 )
( 72532, 0xd93a2c1c )
( 72548, 0x9909045f )
( 72563, 0x19ebe601 )
( 72578, 0x40867cf0 )
( 72596, 0x826edf14 )
( 72609, 0x3c2c0ab3 )
( 72626, 0xb42742ed )
( 72645, 0xbe2868ac )
( 72660, 0xa854baa8 )
( 72682, 0x0b76946e )
( 72694, 0x41aa2cca )
( 72708, 0x4915dbd0 )
( 72728, 0x7a071375 )
( 72747, 0xdab8c4f9 )
( 72768, 0xa5125437 )
( 72786, 0x72fd941b )
( 72807, 0x165cccd0 )
( 72820, 0x548811d1 )
( 72840, 0x2c88da48 )
( 72861, 0x6c515808 )
( 72877, 0xc26a9347 )
( 72892, 0xb672fcf0 )
( 72903, 0xe2861335 )
( 72925, 0x1fd9ed53 )
( 72940, 0xd1f6a391 )
( 72955, 0xbd5d158b )
( 72972, 0x901febec )
( 72992, 0x29c0980d )
( 73005, 0x30d5b665 )
( 73024, 0x70f7df50 )
( 73043, 0x20d76282 )
( 73055, 0xb322dda7 )
( 73071, 0x8d4458ba )
( 73087, 0xa5c12bde )
( 73102, 0xfa8e12df )
( 73123, 0x308a6639 )
( 73139, 0xb99ded8c )
( 73160, 0xf02a0f36 )
( 73181, 0x9def5837 )
( 73199, 0x0c11be78 )
( 73215, 0x3d059ee1 )
( 73235, 0x5e49878a )
( 73247, 0xf4a05c77 )
( 73259, 0x64a70508 )
( 73281, 0xb4482a06 )
( 73296, 0xaf8ce54e )
( 73314, 0x04ce6a09 )
( 73334, 0x9a8770b0 )
( 73346, 0xd1b2e55f )
( 73364, 0x009c1277 )
( 73384, 0xf9f7dec0 )
( 73404, 0x33242a70 )
( 73418, 0x4193327e )
( 73440, 0x17c14b60 )
( 73455, 0x801219e8 )
( 73467, 0x003e5e83 )
( 73485, 0x2d729bb7 )
( 73498, 0x2a1cefb6 )
( 73514, 0xd50aa722 )
( 73529, 0x1520000a )
( 73548, 0x70ab8397 )
( 73567, 0xecba2abb )
( 73585, 0xfad3afb7 )
( 73605, 0x051a47b0 )
( 73624, 0x84a1c16c )
( 73639, 0x91c22686 )
( 73658, 0xa0806a77 )
( 73681, 0xca2feba4 )
( 73693, 0x91098f17 )
( 73713, 0x94733f44 )
( 73734, 0x34bb2478 )
( 73748, 0xe241ef3c )
( 73766, 0x580eea67 )
( 73781, 0x04dbeae2 )
( 73801, 0xb0043ed6 )
( 73820, 0x21c6a09a )
( 73835, 0x5ee70283 )
( 73856, 0xbde0c9d4 )
( 73871, 0x08387a44 )
( 73890, 0xc132c9e0 )
( 73906, 0x0287e44b )
( 73922, 0x2d0aafcb )
( 73944, 0x1d90b2ea )
( 73958, 0x26f5f0b0 )
( 73978, 0xba7346fe )
( 73995, 0x8cca3f67 )
( 74015, 0x9ea38fb9 )
( 74034, 0xdd6fab63 )
( 74046, 0x5dad5561 )
( 74059, 0xe734c5f8 )
( 74074, 0x3ab9e09e )
( 74094, 0x099c24f6 )
( 74117, 0xa9327109 )
( 74129, 0xf1997cbb )
( 74143, 0x7acf1f85 )
( 74154, 0x732f7336 )
( 74173, 0xfc5c6684 )
( 74189, 0xf2213aca )
( 74209, 0x16b64316 )
( 74221, 0x2603d265 )
( 74239, 0x33d344ce )
( 74247, 0x2c1e748c )
( 74259, 0x5583a945 )
( 74280, 0x949f910b )
( 74297, 0x151d4e08 )
( 74316, 0x940f7c8e )
( 74333, 0x820597ba )
( 74353, 0x30145a38 )
( 74372, 0xcfadd31b )
( 74388, 0x658492bf )
( 74400, 0xa6a182c2 )
( 74415, 0x52d534bb )
( 74424, 0x4b405787 )
( 74447, 0xcd75627b )
( 74463, 0x66c634bd )
( 74477, 0x8fe32486 )
( 74498, 0x48f1f42f )
( 74517, 0x30b1f9f1 )
( 74531, 0x75db6922 )
( 74553, 0x38f3c93c )
( 74574, 0x3cc53ff4 )
( 74587, 0x9db24b4b )
( 74601, 0x8a869446 )
( 74618, 0xed910e9c )
( 74638, 0xf3a9f597 )
( 74656, 0x4ad05a0e )
( 74678, 0x2142a4ba )
( 74688, 0x319a0045 )
( 74691, 0xd38c96ac )
( 74693, 0x65648cab )
( 74696, 0x11ee8c26 )
( 74700, 0x88b87f6f )
( 74711, 0x2f383d07 )
( 74719, 0x97b4595e )
( 74733, 0xa21917d0 )
( 74747, 0x1bf57576 )
( 74762, 0xe1efb855 )
( 74779, 0xf26edc14 )
( 74797, 0xe92a4709 )
( 74817, 0xe57d81b0 )
( 74853, 0x3284ed7a )
( 74868, 0xba77fbb1 )
( 74870, 0x21ebcf2d )
( 74872, 0x8a913aac )
( 74874, 0xe7af4380 )
( 74878, 0xf2a25069 )
( 74885, 0x50b6cd1b )
( 74899, 0xae33bad1 )
( 74910, 0x032fd5eb )
( 74927, 0xa2310ac8 )
( 74947, 0x37955467 )
( 74964, 0x3cb1f75d )
( 74980, 0x3ce969d5 )
( 74999, 0x604d6e77 )
( 75015, 0x7fe72e9a )
( 75033, 0xa3939059 )
( 75051, 0xad078c84 )
( 75062, 0x1f52b46e )
( 75075, 0xf6f7a2db )
( 75090, 0x5b6c8cf3 )
( 75106, 0x88bc4262 )
( 75118, 0xecc4ea67 )
( 75138, 0x778b4daa )
( 75157, 0x992bad73 )
( 75205, 0x4247e596 )
( 75213, 0x5c6b151f )
( 75216, 0x6c201d27 )
( 75221, 0x838ee6bd )
( 75229, 0xc5cdbc10 )
( 75239, 0x92b15f4a )
( 75253, 0xea57caa1 )
( 75288, 0xfc32d839 )
( 75313, 0x0c2c0497 )
( 75325, 0x14fe9c4e )
( 75339, 0xfd1186f9 )
( 75349, 0x5c53798c )
( 75356, 0xa10fa770 )
( 75359, 0xf0038d56 )
( 75370, 0xf6ed2d56 )
( 75384, 0x2eb86a2e )
( 75402, 0xf99fe62a )
( 75421, 0x54404994 )
( 75437, 0x601cb755 )
( 75464, 0x919d268a )
( 75481, 0x732bcca6 )
( 75500, 0x7f312321 )
( 75518, 0xc2017fcf )
( 75524, 0xc9f97b36 )
( 75536, 0x3940bedb )
( 75550, 0xcd021ec7 )
( 75566, 0xb82f60f8 )
( 75583, 0xa1516673 )
( 75594, 0x93166f8a )
( 75615, 0x565a63d6 )
( 75629, 0x9df4b510 )
( 75644, 0x443e0ce6 )
( 75662, 0x328a8044 )
( 75684, 0x5007d70c )
( 75709, 0xecbd7398 )
( 75753, 0x4ebe2a76 )
( 75772, 0x2726b7ec )
( 75784, 0x05f796c9 )
( 75806, 0xb8ecf9cb )
( 75821, 0x593a6b19 )
( 75838, 0xa10cddf3 )
( 75861, 0x67b9d4d2 )
( 75882, 0x7c50886e )
( 75897, 0x07b88ef4 )
( 75912, 0x9464adb6 )
( 75933, 0x148671a3 )
( 75949, 0x6744c1c4 )
( 75968, 0x75f7e54a )
( 75981, 0xc0443426 )
( 76003, 0xe884240d )
( 76017, 0x538901e7 )
( 76032, 0x9d1e25b3 )
( 76044, 0xb3e6d85a )
( 76061, 0xb04e030b )
( 76082, 0x6bd608c9 )
( 76098, 0x62fa8dcc )
( 76117, 0x42c5e29a )
( 76133, 0x78ec7382 )
( 76148, 0x584e8c30 )
( 76164, 0x22964942 )
( 76179, 0x2109a0ab )
( 76196, 0xe1b27d12 )
( 76217, 0x2ecb7962 )
( 76233, 0x3401ba36 )
( 76255, 0xf2a54a73 )
( 76268, 0x274c406f )
( 76283, 0xf39a9804 )
( 76298, 0x57b41d6c )
( 76316, 0x7926df4f )
( 76340, 0x7f8331d3 )
( 76346, 0xf95033d8 )
( 76362, 0xa59a0e17 )
( 76387, 0x22589c1c )
( 76397, 0xee7c2a56 )
( 76410, 0x87e649f7 )
( 76432, 0x667b6bbe )
( 76448, 0x8d625b4f )
( 76466, 0xba828ac4 )
( 76482, 0xd3cf0648 )
( 76500, 0xb385cd8f )
( 76518, 0x128feb1d )
( 76536, 0xe470dd4a )
( 76555, 0x7926317d )
( 76574, 0x87b1dc2b )
( 76594, 0xb3aef315 )
( 76612, 0x5ba98cf1 )
( 76625, 0x7f3ecd80 )
( 76645, 0xc8272e86 )
( 76666, 0x3a6f4b14 )
( 76681, 0xddf56850 )
( 76700, 0x179860a5 )
( 76718, 0x67429c44 )
( 76736, 0x9265d249 )
( 76751, 0xd55f929e )
( 76763, 0x60b0992f )
( 76779, 0x1fb398de )
( 76792, 0xc4f2b0a8 )
( 76809, 0x2676fecf )
( 76823, 0x3f2dcc51 )
( 76840, 0x7f502882 )
( 76854, 0xcded2e6a )
( 76875, 0x82e51b21 )
( 76889, 0xa9ad14cb )
( 76905, 0x5ec4da0f )
( 76923, 0x5474dd8e )
( 76940, 0xb5a864a7 )
( 76951, 0xaeed8be5 )
( 76969, 0x50ce3a78 )
( 76985, 0xd89b0f0a )
( 77000, 0x9b6852fd )
( 77017, 0x9d83ca05 )
( 77035, 0x455d36b5 )
( 77055, 0x0e16101b )
( 77069, 0xcff74a94 )
( 77091, 0xa31417cd )
( 77103, 0xb311df1e )
( 77124, 0x960635da )
( 77140, 0xdde7371a )
( 77161, 0x0446cdf7 )
( 77183, 0x0945e509 )
( 77198, 0x0d2406cc )
( 77212, 0xa6ee6d79 )
( 77229, 0x58bd7760 )
( 77245, 0x5be62b1a )
( 77265, 0x73555ec6 )
( 77282, 0x17fa03b8 )
( 77300, 0x93ceae00 )
( 77314, 0x38e4a8e6 )
( 77334, 0x25a154c7 )
( 77351, 0xa387c373 )
( 77368, 0xb919630a )
( 77382, 0x2c22b7d2 )
( 77405, 0x12577bde )
( 77412, 0xbc562d62 )
( 77428, 0x404f5a69 )
( 77443, 0x3b47043e )
( 77466, 0x4dc49c9d )
( 77484, 0x7031b595 )
( 77495, 0x60889b24 )
( 77513, 0x23090df5 )
( 77533, 0xd1222681 )
( 77556, 0x104d7516 )
( 77569, 0x8186dec9 )
( 77585, 0x22db4bf2 )
( 77604, 0xa85f8feb )
( 77624, 0x0a07c298 )
( 77639, 0x52f66fc3 )
( 77649, 0xbe0f25b8 )
( 77669, 0xb743f0a5 )
( 77685, 0xc60d08cf )
( 77704, 0x758ba85f )
( 77721, 0x602d5cb2 )
( 77734, 0x008749c8 )
( 77754, 0x627a58be )
( 77776, 0x71e08c89 )
( 77791, 0x306b8ca5 )
( 77808, 0x9f494830 )
( 77829, 0x44f42c97 )
( 77839, 0x6d56fef8 )
( 77856, 0x5dd45a69 )
( 77876, 0xd0ec5837 )
( 77892, 0xc3685ae0 )
( 77911, 0xa6e3d798 )
( 77924, 0x32913a0b )
( 77944, 0xf9b64ea8 )
( 77961, 0x08323632 )
( 77975, 0x9fc0086e )
( 77991, 0xd577bb4d )
( 78014, 0x483b1216 )
( 78030, 0xb475761d )
( 78052, 0x9d2be162 )
( 78067, 0x2e0f1774 )
( 78081, 0x982ce2fc )
( 78096, 0xdb08633e )
( 78111, 0x34ba220f )
( 78132, 0x6a214252 )
( 78152, 0x5b618aa1 )
( 78171, 0x8581b0dd )
( 78188, 0x19ccef43 )
( 78204, 0xc2b77f11 )
( 78221, 0x34c2cdb6 )
( 78237, 0x3ce5e2d3 )
( 78260, 0xf13f9356 )
( 78277, 0xf6bfae91 )
( 78297, 0xf892c578 )
( 78314, 0xf3ef2e15 )
( 78327, 0x065bb155 )
( 78342, 0x35bdae7b )
( 78363, 0xd4b7ae67 )
( 78388, 0x3ebfa576 )
( 78401, 0x8df31659 )
( 78416, 0xe839eb4f )
( 78433, 0xd107e492 )
( 78451, 0x33d5eff8 )
( 78469, 0x90a52b44 )
( 78484, 0x24f74740 )
( 78501, 0x069312f0 )
( 78515, 0xcc302419 )
( 78529, 0x922b9a4b )
( 78549, 0xb34724dd )
( 78564, 0x7ec3f51b )
( 78587, 0x81323164 )
( 78607, 0xff049f96 )
( 78623, 0x9b312014 )
( 78634, 0xce166de5 )
( 78654, 0xc8c9c8b9 )
( 78668, 0x99e71f19 )
( 78685, 0x1886a234 )
( 78708, 0xd58bec50 )
( 78720, 0xbceb19a8 )
( 78740, 0xf7ed6e9c )
( 78757, 0x6e49bc3d )
( 78775, 0xe767a317 )
( 78797, 0xc7c69ec2 )
( 78814, 0x176d9919 )
( 78827, 0xa980c751 )
( 78839, 0xd675371e )
( 78860, 0x6c95b00f )
( 78880, 0xf13fc921 )
( 78898, 0xcc42e8ea )
( 78915, 0x89236044 )
( 78931, 0xdff95a33 )
( 78952, 0x8643bab5 )
( 78973, 0xf6169b9a )
( 78989, 0xfebcccd6 )
( 78999, 0x1dea3f93 )
( 79015, 0xb5662f35 )
( 79036, 0xe44740de )
( 79052, 0x83ceb9fd )
( 79074, 0x9bd25138 )
( 79093, 0xf98506d3 )
( 79107, 0xb1b85c07 )
( 79118, 0x16513e84 )
( 79136, 0x97aae46f )
( 79155, 0x6ec19ab2 )
( 79171, 0x6c28d6b7 )
( 79188, 0xb7a603a0 )
( 79208, 0x2eae275a )
( 79222, 0xe7d39bb1 )
( 79243, 0xb16caf31 )
( 79255, 0xa84163ec )
( 79273, 0x309ffc4f )
( 79286, 0x423011f6 )
( 79305, 0x3f46aee2 )
( 79319, 0xe274fe12 )
( 79342, 0x0fe7c62e )
( 79358, 0xaed46cf9 )
( 79375, 0x0e3bc508 )
( 79398, 0x87070680 )
( 79415, 0x969b89b2 )
( 79436, 0x4a53d2d8 )
( 79449, 0xcb5a0b08 )
( 79470, 0x3a623a16 )
( 79488, 0x8689bb1f )
( 79501, 0xa3cf8918 )
( 79516, 0xdd3699c6 )
( 79538, 0x7f6f7fb5 )
( 79553, 0x552f6ea3 )
( 79564, 0xca61e724 )
( 79589, 0xb730bd4b )
( 79606, 0x2d0f8df9 )
( 79623, 0x555581ca )
( 79633, 0x74f655d7 )
( 79646, 0xd04b162c )
( 79665, 0x803390de )
( 79685, 0x62d0d7b3 )
( 79700, 0xccac1eff )
( 79719, 0xa68c84cc )
( 79736, 0xdfd8c15e )
( 79757, 0xe0f4cccb )
( 79771, 0x6fc74c96 )
( 79790, 0xa17d6323 )
( 79804, 0xa617be1e )
( 79822, 0xcc3a94e7 )
( 79842, 0xb2847dd0 )
( 79861, 0xc545cefd )
( 79866, 0x00439e03 )
( 79869, 0x9f4a3441 )
( 79872, 0x43d85e53 )
( 79875, 0x424fcc71 )
( 79879, 0x9e59a7ee )
( 79910, 0x75048330 )
( 79937, 0x8bf9aae7 )
( 79955, 0x4e0142eb )
( 79972, 0x83ea8fc7 )
( 79984, 0x3f55b930 )
( 80006, 0x4d88399e )
( 80019, 0x31a23659 )
( 80039, 0xf2023428 )
( 80059, 0xcc6576b3 )
( 80073, 0xcef8311d )
( 80087, 0x3a254171 )
( 80105, 0xe5476ee8 )
( 80123, 0x64949c76 )
( 80141, 0x0e220eca )
( 80159, 0x1def809d )
( 80174, 0xeb9dc600 )
( 80193, 0x2764bb24 )
( 80208, 0x6c87c701 )
( 80230, 0x9ed385af )
( 80248, 0xa45cd1b5 )
( 80269, 0x41e8b42a )
( 80281, 0x2e93ffaf )
( 80302, 0xa6bea4da )
( 80322, 0x239f0886 )
( 80338, 0x584703e3 )
( 80357, 0xd3980340 )
( 80372, 0x7253016d )
( 80385, 0xe47f10b7 )
( 80409, 0x5283cee9 )
( 80421, 0x7bd4ea23 )
( 80437, 0x1adf1372 )
( 80456, 0xc3c6b346 )
( 80469, 0x9f0815fd )
( 80488, 0x70c54c2a )
( 80507, 0x87840c31 )
( 80518, 0x7ca9c10a )
( 80540, 0x338d9ae6 )
( 80557, 0x863465ce )
( 80568, 0xf28ce985 )
( 80585, 0xff3b5325 )
( 80604, 0x4941521d )
( 80626, 0xb90713f5 )
( 80642, 0x2ef0d7e3 )
( 80659, 0xabb93dec )
( 80671, 0xf6b2177e )
( 80691, 0x83da390b )
( 80707, 0x5e09dd80 )
( 80728, 0xfda6184d )
( 80743, 0x8abc8aee )
( 80757, 0x4fdd92da )
( 80774, 0xef1f6881 )
( 80789, 0x018a9680 )
( 80801, 0xb6ec1713 )
( 80818, 0xe7559958 )
( 80839, 0xc1877f8a )
( 80851, 0x76efc296 )
( 80861, 0x14c13da5 )
( 80879, 0x5109bf05 )
( 80902, 0xfce9211e )
( 80923, 0x1f962b89 )
( 80931, 0x946ab83e )
( 80947, 0x88d68272 )
( 80964, 0xda1d10d8 )
( 80981, 0x72006773 )
( 80992, 0x0bdd127c )
( 81009, 0x154d7d3e )
( 81031, 0x3739eacc )
( 81047, 0xd1686dc4 )
( 81065, 0xe4ae7546 )
( 81084, 0xf9c87966 )
( 81098, 0x1c7eece3 )
( 81116, 0x8a432c94 )
( 81139, 0x13074d1e )
( 81154, 0x769578e1 )
( 81168, 0x5ab06990 )
( 81185, 0xaa366c41 )
( 81205, 0x849d2c72 )
( 81223, 0xe6d61357 )
( 81239, 0x465ad81b )
( 81261, 0x6955c6dd )
( 81273, 0x658cede7 )
( 81291, 0x50091dfa )
( 81311, 0xd341a983 )
( 81321, 0xa1bd7086 )
( 81340, 0x0c7afb97 )
( 81360, 0x4abebccf )
( 81377, 0xf7b62a87 )
( 81392, 0x289d1644 )
( 81412, 0x6c49ab35 )
( 81423, 0x0ce98bbf )
( 81430, 0x78ff7804 )
( 81433, 0x55406c0a )
( 81435, 0x5461cda8 )
( 81440, 0x89f05f71 )
( 81448, 0x84554c0f )
( 81461, 0xbe0b5b73 )
( 81478, 0x88e71471 )
( 81493, 0x9d16c262 )
( 81512, 0x2941c8bd )
( 81532, 0x63aae6a8 )
( 81547, 0x7fc0b840 )
( 81560, 0x6bac7c47 )
( 81583, 0x5546907c )
( 81597, 0x3fb0057d )
( 81616, 0x701d7a5a )
( 81636, 0x7b2f43ef )
( 81648, 0x67ad39d9 )
( 81667, 0x473b2d51 )
( 81678, 0x0f7e3f59 )
( 81695, 0xe4cff303 )
( 81714, 0xe2e5993c )
( 81729, 0xae57d9ed )
( 81748, 0x9c277462 )
( 81764, 0xf776c3f2 )
( 81785, 0x573adc25 )
( 81800, 0x21a8cea9 )
( 81819, 0xa820c10b )
( 81835, 0x8ac4f859 )
( 81856, 0xaf4fbef7 )
( 81872, 0x6d4a1119 )
( 81889, 0x8c41b327 )
( 81907, 0xbbed38c0 )
( 81924, 0x8b7c15c4 )
( 81939, 0x64513588 )
( 81959, 0x3baf414c )
( 81978, 0x63815f9f )
( 81996, 0x9bb030e0 )
( 82008, 0x2089cbed )
( 82020, 0xdbd73e35 )
( 82037, 0x2f5d2eaa )
( 82057, 0x010c0e3c )
( 82075, 0xadf07c31 )
( 82095, 0xbf22a9b8 )
( 82115, 0x9872d592 )
( 82126, 0xbc644cf0 )
( 82146, 0xf14747c3 )
( 82157, 0xf30c4fb5 )
( 82178, 0x1d722d18 )
( 82195, 0xf1875b99 )
( 82215, 0xf9123324 )
( 82235, 0xa9e5a6b5 )
( 82252, 0xef7ad7f6 )
( 82270, 0x3ffe6f9a )
( 82290, 0x8d0cc6a4 )
( 82303, 0x8842b2ea )
( 82321, 0x7bdd1c1e )
( 82342, 0xd11fdf2e )
( 82361, 0xe76928a9 )
( 82404, 0xf3f366d6 )
( 82406, 0x970afaf2 )
( 82411, 0xf55de5e4 )
( 82413, 0x1e26ee5c )
( 82416, 0x12ba1659 )
( 82421, 0xd9296df8 )
( 82429, 0xad33492b )
( 82440, 0x8065a27b )
( 82457, 0xc224409d )
( 82467, 0xd8acbc07 )
( 82484, 0x76eba093 )
( 82503, 0x7cd3e137 )
( 82526, 0xf01be02f )
( 82547, 0x8051d96b )
( 82565, 0x06eabe59 )
( 82582, 0xf4b8d1c1 )
( 82595, 0xc55cf6f6 )
( 82611, 0x4c1fa48e )
( 82632, 0x8b224b0e )
( 82646, 0x55d7a683 )
( 82663, 0xd6932ef7 )
( 82678, 0x1dd6977c )
( 82699, 0x56dc6afa )
( 82712, 0x2d299d84 )
( 82731, 0x6cd6b887 )
( 82746, 0x0642071c )
( 82767, 0x85de76a1 )
( 82781, 0x27ffb5b9 )
( 82807, 0xe6e2f50d )
( 82823, 0xb43ef9d2 )
( 82839, 0x11e06b8f )
( 82856, 0x50bdb566 )
( 82873, 0x027681da )
( 82883, 0xd91129c4 )
( 82905, 0xc42eafb2 )
( 82942, 0xcb8d3fce )
( 82960, 0x10b9bb97 )
( 82975, 0xf26b3e2f )
( 82987, 0xae689c73 )
( 83003, 0x2f521c24 )
( 83019, 0x2637f20d )
( 83035, 0x1408f52c )
( 83046, 0xba954dd5 )
( 83058, 0x9ddb4115 )
( 83065, 0x0f52ee29 )
( 83078, 0x6659559e )
( 83099, 0xf0648dc1 )
( 83116, 0x8247050e )
( 83135, 0x83ab65c2 )
( 83152, 0x1f2b3356 )
( 83168, 0xdfb27512 )
( 83193, 0xa4acef8a )
( 83206, 0x6013ed1c )
( 83222, 0x2cb4744c )
( 83241, 0xc8554f5d )
( 83258, 0x01130abb )
( 83277, 0xfb5b93d5 )
( 83291, 0xb362077a )
( 83327, 0x9d1807db )
( 83344, 0x2e53176c )
( 83361, 0xa574d282 )
( 83365, 0x01ab6e44 )
( 83376, 0x536d2bff )
( 83393, 0x96b5c6f9 )
( 83412, 0xbbd33038 )
( 83429, 0xa3226227 )
( 83438, 0x0e6ce853 )
( 83449, 0x89a997bc )
( 83473, 0x6d56718a )
( 83486, 0x7b0690b4 )
( 83505, 0xccacebff )
( 83521, 0xdd431bc8 )
( 83538, 0x72282b3b )
( 83552, 0xdf66caed )
( 83571, 0x08c42ff6 )
( 83592, 0x7adbfad1 )
( 83611, 0x6d75ee0e )
( 83624, 0x8dfa60e3 )
( 83644, 0x0c250cc6 )
( 83663, 0xd00f178a )
( 83685, 0x1dfc2ebb )
( 83698, 0xb32c6c7d )
( 83729, 0xec3c5194 )
( 83745, 0xc7700d7f )
( 83756, 0x2590f779 )
( 83770, 0xc1fe1cf8 )
( 83781, 0x7fed391e )
( 83795, 0x04f2e8f8 )
( 83816, 0xddea7854 )
( 83834, 0xe363998f )
( 83845, 0xc712714f )
( 83858, 0x8a8247f7 )
( 83873, 0x8fef194b )
( 83893, 0x2be7d255 )
( 83912, 0xc4daac0b )
( 83929, 0xdd56c57f )
( 83945, 0xf7068d03 )
( 83967, 0xf44266ef )
( 83980, 0x0c702634 )
( 84002, 0x01f973d3 )
( 84025, 0xf5a6021c )
( 84038, 0xeef73784 )
( 84054, 0x1c6f1dba )
( 84075, 0xa02c4892 )
( 84099, 0x6558bb27 )
( 84112, 0xaa889500 )
( 84134, 0xf8e0d69e )
( 84148, 0x190afd44 )
( 84167, 0x25b9e691 )
( 84173, 0x758ae527 )
( 84190, 0xbe0362be )
( 84205, 0xf5774262 )
( 84218, 0xdcd678da )
( 84232, 0x754d5a70 )
( 84252, 0x55d4f6ab )
( 84266, 0x2a0724e6 )
( 84282, 0x63b7ce91 )
( 84301, 0xe2c1b307 )
( 84322, 0xf6152fa7 )
( 84342, 0x8caaefd9 )
( 84378, 0xb0816cf6 )
( 84396, 0xf4d6d240 )
( 84417, 0x720d3860 )
( 84431, 0xa9499464 )
( 84449, 0xa2291faa )
( 84464, 0x7e0d3642 )
( 84481, 0x246b7b80 )
( 84494, 0x14733de1 )
( 84511, 0x024984e2 )
( 84528, 0x398e552e )
( 84546, 0xab076760 )
( 84565, 0x04419146 )
( 84587, 0xfd6281c7 )
( 84594, 0x36ef1548 )
( 84608, 0xb7dc2d79 )
( 84631, 0xe49ec6d9 )
( 84652, 0x17611fcf )
( 84669, 0xc8aca394 )
( 84686, 0x593239c4 )
( 84703, 0x77c09004 )
( 84729, 0xa47b9274 )
( 84745, 0x272df480 )
( 84765, 0xbead3738 )
( 84778, 0x124ca91e )
( 84792, 0x500076ac )
( 84812, 0x9bf022bb )
( 84831, 0xf280ee37 )
( 84843, 0x6b99a4f2 )
( 84864, 0x4b40e654 )
( 84878, 0xd2675b41 )
( 84899, 0xf9189cc7 )
( 84916, 0x52e79ece )
( 84934, 0x470a5215 )
( 84945, 0x586bf40f )
( 84965, 0x9c3e62d2 )
( 84984, 0x2827747d )
( 85001, 0x08fc0b71 )
( 85020, 0xfbffdece )
( 85040, 0xd24c1511 )
( 85057, 0xe6562697 )
( 85076, 0x57cec303 )
( 85093, 0x5c1e61c1 )
( 85112, 0x809d310b )
( 85132, 0x3a4943a2 )
( 85151, 0x1c066b90 )
( 85162, 0xcf7f4d5c )
( 85184, 0x546f55f9 )
( 85196, 0x9ef1a263 )
( 85215, 0x865483cf )
( 85232, 0xd96bd424 )
( 85251, 0xea9c6932 )
( 85268, 0x649e47cc )
( 85288, 0x657a5ed0 )
( 85303, 0xd161c4c4 )
( 85319, 0x2dc8b6eb )
( 85343, 0x8c2a688a )
( 85356, 0x604d934c )
( 85371, 0x840e762c )
( 85392, 0x7e3fae3e )
( 85408, 0x695f07ce )
( 85427, 0x7e8e324e )
( 85448, 0xc27aa402 )
( 85460, 0xff6e9707 )
( 85478, 0xc305bb38 )
( 85500, 0x8d3b6d8a )
( 85517, 0x72190996 )
( 85534, 0xe5d40f70 )
( 85553, 0x5cb68329 )
( 85571, 0xc3df7720 )
( 85586, 0x4c5212d9 )
( 85604, 0x77bcdae5 )
( 85621, 0xa8c94fb7 )
( 85631, 0xb206d0b2 )
( 85655, 0xd33b9e86 )
( 85673, 0xcaa60943 )
( 85690, 0x3c671088 )
( 85708, 0x0a542eb1 )
( 85722, 0x74d0f40a )
( 85735, 0xbfe98278 )
( 85750, 0x544a21f6 )
( 85771, 0xde6bad07 )
( 85787, 0x13b4cc9b )
( 85803, 0x80331df5 )
( 85824, 0x227bac3f )
( 85837, 0x7d2a25fa )
( 85857, 0x22ffe127 )
( 85876, 0x7b89a17d )
( 85895, 0x0085dc30 )
( 85912, 0xae4645f1 )
( 85932, 0x605b2fba )
( 85957, 0x0901847e )
( 85965, 0x00bd73fc )
( 85977, 0x191f65e9 )
( 85996, 0xf217717e )
( 86014, 0x11243b21 )
( 86029, 0xcd0ea481 )
( 86050, 0x17f2eaf2 )
( 86069, 0x70dc8865 )
( 86084, 0x267858cd )
( 86098, 0x28be6203 )
( 86115, 0x2c5e7915 )
( 86128, 0x342eb2ac )
( 86140, 0x7b6cfa24 )
( 86166, 0xb877eb00 )
( 86184, 0x2fd87153 )
( 86200, 0x926bf9fd )
( 86218, 0x8798e752 )
( 86231, 0x8b79549a )
( 86243, 0x1e0ee854 )
( 86263, 0x5853db00 )
( 86283, 0x53e9d628 )
( 86301, 0x6d49c581 )
( 86323, 0xbcf36f95 )
( 86331, 0x8e7abc83 )
( 86346, 0x90e0a564 )
( 86363, 0x36686e1d )
( 86380, 0x37618176 )
( 86393, 0x8eb14e7e )
( 86409, 0xd8a8f66a )
( 86429, 0xc1f66224 )
( 86442, 0x96fd8b8a )
( 86462, 0x30fe734c )
( 86482, 0xcc62d7ef )
( 86500, 0x4435020e )
( 86513, 0x527400e1 )
( 86528, 0x922dbb7e )
( 86547, 0xc16c09fb )
( 86560, 0x53bce3cc )
( 86577, 0xc1ecb645 )
( 86598, 0x0cc7db4f )
( 86612, 0xd011fee2 )
( 86631, 0x7f1e73a8 )
( 86650, 0x65fbc373 )
( 86654, 0x9e2e324b )
( 86678, 0xecf0557a )
( 86695, 0x69aba646 )
( 86709, 0xe993cde4 )
( 86730, 0x555c33c1 )
( 86745, 0x704ba221 )
( 86761, 0x37fa55ab )
( 86779, 0xe33df2e8 )
( 86797, 0xa5a063d7 )
( 86818, 0x9db4e74e )
( 86833, 0x7ce8f897 )
( 86848, 0x1be5591b )
( 86866, 0x1d19e50a )
( 86883, 0x323a47e2 )
( 86903, 0x39d75703 )
( 86917, 0x908c336b )
( 86936, 0xb179f753 )
( 86960, 0xfcaacc35 )
( 86977, 0x54c8e07c )
( 86993, 0x0e12911a )
( 87011, 0x4d77c29c )
( 87026, 0x5a32a16f )
( 87041, 0xd0b16698 )
( 87059, 0x082ef791 )
( 87079, 0x5449d142 )
( 87099, 0xe6e89c11 )
( 87114, 0x9d5724f0 )
( 87135, 0xe99a6701 )
( 87154, 0x13187c94 )
( 87172, 0x0f3267bd )
( 87182, 0x813003e3 )
( 87196, 0xe968bde7 )
( 87213, 0xdff966ab )
( 87230, 0xe16caa40 )
( 87251, 0x8dfac0e2 )
( 87265, 0x4aff9f4b )
( 87287, 0x28787532 )
( 87302, 0x527049af )
( 87320, 0x37f1bb5f )
( 87341, 0xd0243bd0 )
( 87359, 0x544e3e72 )
( 87375, 0xa3094070 )
( 87395, 0xce3fe2c7 )
( 87414, 0xac169449 )
( 87433, 0x47da326d )
( 87445, 0xe955f18b )
( 87462, 0x25c39869 )
( 87478, 0xadd83d86 )
( 87497, 0x6d5f6c40 )
( 87513, 0x656486d9 )
( 87525, 0x7e37cc04 )
( 87540, 0xb8c4fe72 )
( 87560, 0xb793e0a7 )
( 87574, 0x991615f4 )
( 87581, 0xcaf6a241 )
( 87602, 0xcf644d22 )
( 87620, 0x1cdf986f )
( 87637, 0xfd7e98a4 )
( 87659, 0xd304a399 )
( 87674, 0x38db87db )
( 87693, 0x45c13314 )
( 87708, 0xca1a0d7d )
( 87729, 0x6eb51e43 )
( 87746, 0x832dcec1 )
( 87759, 0xa2197d43 )
( 87779, 0x4d7b3ebd )
( 87794, 0x860ca420 )
( 87816, 0x41fe1e13 )
( 87828, 0x1ab5da0c )
( 87851, 0x6b2e0d02 )
( 87870, 0x23243b7c )
( 87889, 0x1e76b11d )
( 87906, 0x8d283e5a )
( 87926, 0x4310a40a )
( 87942, 0x1ea6f50a )
( 87963, 0xa044faff )
( 87982, 0x54ba235f )
( 87995, 0x64c13ae6 )
( 88010, 0x656c4cb9 )
( 88027, 0xe8ddbfc0 )
( 88044, 0xdd00c15a )
( 88064, 0x67728e52 )
( 88081, 0x2d6752eb )
( 88099, 0x9ecbf789 )
( 88111, 0xc505a237 )
( 88124, 0xe43207bb )
( 88138, 0x24453fe0 )
( 88155, 0x4a21988d )
( 88171, 0xb87531e1 )
( 88192, 0x0171cb9a )
( 88208, 0xc468ec16 )
( 88225, 0x6d2e9abf )
( 88237, 0x8057949a )
( 88258, 0xcad05cdd )
( 88276, 0xc6138b94 )
( 88293, 0x9b421c01 )
( 88312, 0x8f6bb77b )
( 88327, 0x6c6debc9 )
( 88341, 0x036a8779 )
( 88364, 0xe792f68b )
( 88381, 0xc5db869e )
( 88401, 0x68d2a91d )
( 88412, 0x8e46dc91 )
( 88427, 0x7c64f377 )
( 88443, 0xe20ddd27 )
( 88462, 0x76b44993 )
( 88483, 0xea54e7f1 )
( 88497, 0xc402b906 )
( 88513, 0x71446c74 )
( 88537, 0xdbb04d13 )
( 88554, 0x3121cc08 )
( 88573, 0xa3692aee )
( 88591, 0x36bd685f )
( 88606, 0x9ad49a2c )
( 88625, 0x429357e6 )
( 88640, 0x791186d9 )
( 88657, 0xceba2f02 )
( 88666, 0xb14c4bb5 )
( 88684, 0x19ff1337 )
( 88704, 0x0a4e1a7b )
( 88728, 0x77a97507 )
( 88742, 0x5a0682d4 )
( 88760, 0xce912364 )
( 88773, 0x4c389540 )
( 88789, 0x9a909961 )
( 88806, 0x39cc92d2 )
( 88824, 0x54439c50 )
( 88843, 0x3d6bc4a6 )
( 88859, 0x666f0b0a )
( 88873, 0x20a236a9 )
( 88894, 0xfd1c1bb8 )
( 88914, 0xda672b1b )
( 88931, 0xc0043c05 )
( 88948, 0xb13e709f )
( 88968, 0x490b6fd9 )
( 88980, 0x52f916fa )
( 88998, 0x15167fb9 )
( 89013, 0xe0ab5b9e )
( 89029, 0x5795e897 )
( 89045, 0x95bd5241 )
( 89063, 0xe555706d )
( 89081, 0xceaabd50 )
( 89101, 0x2462d70c )
( 89117, 0x9d5d4ffa )
( 89131, 0xb017ee8b )
( 89149, 0x98a1e1f1 )
( 89164, 0xc651ae2f )
( 89182, 0x5e9bd249 )
( 89201, 0xb6569ab2 )
( 89220, 0x06dce014 )
( 89238, 0xff9f72de )
( 89256, 0xcdb78b36 )
( 89268, 0x61dbcf90 )
( 89284, 0x5f512e93 )
( 89299, 0x238778d9 )
( 89316, 0xc919445c )
( 89337, 0x27780413 )
( 89353, 0x2122884e )
( 89374, 0x6070b642 )
( 89388, 0x4ce63f0c )
( 89406, 0x7ac1c930 )
( 89425, 0xe95430ce )
( 89443, 0x0c3e7fee )
( 89457, 0x4da871e0 )
( 89472, 0x4c0e29d2 )
( 89488, 0xbada38f8 )
( 89509, 0x51ca758e )
( 89530, 0xda89e2e4 )
( 89548, 0xf7dce055 )
( 89559, 0x55e3b586 )
( 89579, 0x99bb2b7a )
( 89600, 0x2fb38286 )
( 89624, 0xd1894af1 )
( 89630, 0x40de14f1 )
( 89643, 0xb0f0719a )
( 89658, 0x46f319ac )
( 89676, 0xcc4b5aba )
( 89694, 0x0dde41a7 )
( 89711, 0x0427d86d )
( 89732, 0xc6a0c47f )
( 89746, 0x748bbf3f )
( 89764, 0xd6cd03cf )
( 89780, 0x621a824f )
( 89801, 0x7d34417c )
( 89818, 0xe71f93cf )
( 89837, 0x4a006311 )
( 89852, 0xeae2f307 )
( 89864, 0xc3643cf1 )
( 89879, 0x968bc703 )
( 89895, 0x5f64af03 )
( 89912, 0xfdadf397 )
( 89922, 0x4ecfc624 )
( 89944, 0xc8c13d20 )
( 89963, 0x63f5e4f9 )
( 89979, 0x835463aa )
( 89998, 0x8b79bc80 )
( 90019, 0xaf154fd0 )
( 90033, 0x3ca2c846 )
( 90053, 0x3d20907f )
( 90067, 0x64d4cbe9 )
( 90078, 0x0635133a )
( 90088, 0x48eee1a2 )
( 90109, 0x346cdf8f )
( 90122, 0x603990d5 )
( 90140, 0x9368ade8 )
( 90160, 0xc53465b5 )
( 90175, 0x1379dc69 )
( 90196, 0x79b2b58e )
( 90213, 0x39657112 )
( 90226, 0x767b6566 )
( 90244, 0xd508b648 )
( 90261, 0x84dee6fc )
( 90268, 0x314f5553 )
( 90288, 0x7fe63e21 )
( 90304, 0x43a63e61 )
( 90317, 0xd2de85b0 )
( 90329, 0x09fa8759 )
( 90349, 0x9a4f9061 )
( 90370, 0x10b66394 )
( 90384, 0x8ee123c3 )
( 90401, 0xb26cf47c )
( 90422, 0x0ec2de38 )
( 90430, 0xd4ce90a4 )
( 90445, 0xc30c412f )
( 90468, 0x0939ad7b )
( 90487, 0xfa090f26 )
( 90498, 0x856692b2 )
( 90520, 0x37fe938f )
( 90537, 0x88f7765a )
( 90557, 0x5657a7c0 )
( 90571, 0x5e9aeada )
( 90593, 0x26971c51 )
( 90614, 0x566405d6 )
( 90626, 0xf6287ea6 )
( 90645, 0xb151a496 )
( 90664, 0x33182e2c )
( 90677, 0xaa75e9af )
( 90692, 0x68bba49f )
( 90716, 0x4b17ea84 )
( 90732, 0x1a214a07 )
( 90750, 0xbde43051 )
( 90769, 0x5f542dae )
( 90785, 0xb9e507ba )
( 90799, 0xc148b0c8 )
( 90821, 0xb51c0f3a )
( 90835, 0xa48611d1 )
( 90854, 0x07449226 )
( 90868, 0x5d736965 )
( 90893, 0xb05e7722 )
( 90909, 0x93d06906 )
( 90922, 0xdb87d9f4 )
( 90947, 0xe6c3d488 )
( 90959, 0x9798caa2 )
( 90977, 0xcc9b24a1 )
( 91000, 0x088045b1 )
( 91013, 0x84acf5a9 )
( 91031, 0x1d3a44e6 )
( 91048, 0x059bd0d7 )
( 91070, 0x31330d84 )
( 91086, 0xb7c257c3 )
( 91106, 0x3b5d5f2a )
( 91113, 0x17f15d31 )
( 91130, 0xb8491e84 )
( 91149, 0xe09b2fbb )
( 91170, 0x4e189673 )
( 91185, 0x066318d0 )
( 91202, 0xd3d1746e )
( 91222, 0x54ab612a )
( 91234, 0xcde1f37b )
( 91252, 0xf1ad9774 )
( 91264, 0xc7a96db5 )
( 91286, 0x864ef164 )
( 91297, 0xafe7cd9c )
( 91315, 0x3fd1aef2 )
( 91334, 0xff3536b0 )
( 91350, 0x146dfc15 )
( 91371, 0x91d24611 )
( 91385, 0x2e9b23f8 )
( 91402, 0x7ac30966 )
( 91418, 0xf95b579e )
( 91440, 0x4416ad90 )
( 91459, 0xa017cd24 )
( 91476, 0x910f5e04 )
( 91495, 0x83fe9a47 )
( 91508, 0xdd92226e )
( 91524, 0x8d2ec984 )
( 91544, 0x434ad266 )
( 91561, 0x842155be )
( 91575, 0xd0373ef4 )
( 91597, 0x11c2e251 )
( 91614, 0x4112a082 )
( 91633, 0x59bc93e1 )
( 91648, 0xe0e56624 )
( 91670, 0x6081e338 )
( 91680, 0xcc004956 )
( 91694, 0x33422ef4 )
( 91704, 0xf668b201 )
( 91718, 0x3d90196f )
( 91744, 0x71822f5f )
( 91760, 0xd9731f9f )
( 91777, 0x76ed19f1 )
( 91798, 0x12900ae7 )
( 91814, 0xed407f0f )
( 91831, 0x6c546810 )
( 91846, 0x7030702f )
( 91867, 0xffc4cf27 )
( 91884, 0x4987a6e1 )
( 91901, 0xd2705ca1 )
( 91922, 0x0071e9a9 )
( 91937, 0x9eee1565 )
( 91957, 0x43235ade )
( 91979, 0x16615f23 )
( 91991, 0x3e81cf65 )
( 92005, 0x011367b0 )
( 92020, 0xb5efdf96 )
( 92039, 0x69ff97df )
( 92051, 0x696c0abf )
( 92072, 0xa46bad66 )
( 92088, 0x413b78f5 )
( 92110, 0xff5d53e6 )
( 92125, 0xae85a00a )
( 92137, 0x8099bcc1 )
( 92156, 0x95e6ab32 )
( 92173, 0xd2936d4f )
( 92189, 0x57f387ce )
( 92203, 0xe61ea53c )
( 92223, 0x5cb3fff5 )
( 92243, 0x9d8c7903 )
( 92260, 0x9410cba0 )
( 92278, 0x9c8e1de8 )
( 92296, 0x6da6ed11 )
( 92313, 0x5b56678b )
( 92334, 0xb43a30b5 )
( 92347, 0x15b720f8 )
( 92364, 0x1985185d )
( 92380, 0x7d1cf942 )
( 92401, 0x3f8bcc05 )
( 92419, 0xd07f7461 )
( 92436, 0xa1b11c12 )
( 92450, 0x44bce111 )
( 92471, 0xc1d4a7f2 )
( 92490, 0x8354d351 )
( 92509, 0xab93779c )
( 92529, 0x5ac868bf )
( 92544, 0xf7fa3384 )
( 92569, 0xa7a38e7e )
( 92574, 0x12cef62c )
( 92596, 0xb5f9e4e8 )
( 92609, 0x1f83880b )
( 92627, 0xe0deca51 )
( 92643, 0xb278a948 )
( 92663, 0x8ffeb65f )
( 92681, 0xa05387a9 )
( 92695, 0xf9e06d20 )
( 92715, 0x33fa212b )
( 92731, 0x8a5e5d93 )
( 92752, 0xf83de405 )
( 92771, 0x45cafe81 )
( 92784, 0x0f5dd8ac )
( 92800, 0xa629d478 )
( 92821, 0xcd1a19e6 )
( 92833, 0xe4f23455 )
( 92849, 0x92161a67 )
( 92855, 0x283ccd1c )
( 92860, 0x310e1097 )
( 92862, 0xb9e2f431 )
( 92870, 0x00fad42f )
( 92884, 0x032218cc )
( 92897, 0x16761837 )
( 92914, 0x29994443 )
( 92929, 0x2f314a12 )
( 92951, 0xc820a492 )
( 92967, 0x9b78943b )
( 92984, 0x814ee2bb )
( 93005, 0x6bbf8007 )
( 93017, 0xfb628b31 )
( 93033, 0x6292825a )
( 93059, 0xd0d1e2ae )
( 93077, 0x269c527d )
( 93095, 0x03797cc8 )
( 93112, 0x1c09ee38 )
( 93145, 0x139ee04c )
( 93171, 0xc6cdee02 )
( 93191, 0x4c730ad0 )
( 93201, 0x2036de4d )
( 93218, 0xe75bd38c )
( 93238, 0x922ae981 )
( 93257, 0x942e2401 )
( 93282, 0xa9013e0e )
( 93294, 0x1d558067 )
( 93317, 0x76a3d866 )
( 93330, 0x16681066 )
( 93354, 0xd4cf339d )
( 93370, 0xf7e28104 )
( 93387, 0xa6a407ea )
( 93402, 0x2538ac75 )
( 93423, 0x2fb13f65 )
( 93440, 0x5184a445 )
( 93459, 0x440e50a8 )
( 93478, 0xa504dae5 )
( 93494, 0xc8205fdb )
( 93509, 0x209abdff )
( 93523, 0x1b80e17e )
( 93545, 0x7e5d6acc )
( 93565, 0xe7914e4c )
( 93582, 0xe8af681e )
( 93600, 0x488dc87b )
( 93619, 0xc29f2ad1 )
( 93634, 0x86c1577b )
( 93654, 0x070186eb )
( 93669, 0x64850c9c )
( 93682, 0x08cecd58 )
( 93700, 0xc6e01328 )
( 93714, 0x90be756b )
( 93735, 0x9b270807 )
( 93754, 0x72bc394a )
( 93765, 0xd8e90579 )
( 93786, 0xb14b31a3 )
( 93805, 0x7236e96e )
( 93822, 0x0d0f8f18 )
( 93841, 0x69978330 )
( 93857, 0x1a3ef9a2 )
( 93879, 0x27e68316 )
( 93893, 0xe76b9bd5 )
( 93911, 0xc54169df )
( 93931, 0x5250e469 )
( 93948, 0xe573eab8 )
( 93965, 0x050919d8 )
( 93982, 0x4cb57a46 )
( 93998, 0x21bb7958 )
( 94000, 0x176620bd )
( 94004, 0x5dbda560 )
( 94007, 0x189ca1ca )
( 94017, 0x0970a118 )
( 94032, 0xe2c620de )
( 94052, 0xbf2c43e3 )
( 94065, 0xcf4c4d17 )
( 94083, 0x9d3fbb90 )
( 94096, 0xf0d74593 )
( 94139, 0x1a098746 )
( 94160, 0x4384959d )
( 94177, 0x15706d8d )
( 94199, 0x494e38c1 )
( 94213, 0xa6286d4f )
( 94231, 0xf6969f57 )
( 94240, 0x3170db1b )
( 94263, 0x2d975791 )
( 94277, 0x3448541c )
( 94295, 0xc515f6d4 )
( 94308, 0xeb6daa36 )
( 94321, 0xf9fa59d0 )
( 94340, 0xe9aa6a33 )
( 94359, 0x3496d9b3 )
( 94379, 0x41e54d08 )
( 94391, 0xf58669de )
( 94405, 0xd7dd739a )
( 94421, 0xa653a2c6 )
( 94440, 0x85a86718 )
( 94452, 0x9daf7e2f )
( 94471, 0x56c6d8ee )
( 94491, 0xe715803a )
( 94508, 0x6c099b62 )
( 94527, 0xb3f0b9c2 )
( 94545, 0xdbb5793a )
( 94565, 0xf593d28b )
( 94583, 0xd68026c4 )
( 94596, 0x0fbff418 )
( 94619, 0x200704eb )
( 94630, 0xb65c7e2d )
( 94649, 0x5b810402 )
( 94662, 0xfcc72b50 )
( 94684, 0xe7598bde )
( 94698, 0x8eedac1d )
( 94717, 0x57d62f4e )
( 94730, 0x83526997 )
( 94747, 0xb7b22885 )
( 94767, 0x80eecbe0 )
( 94779, 0xd3ce1c4e )
( 94797, 0xb91a2d39 )
( 94815, 0x9edb2331 )
( 94836, 0xdfed7461 )
( 94845, 0x31dbfe50 )
( 94860, 0xd66f386f )
( 94878, 0x2ee0a014 )
( 94899, 0x5efb58e6 )
( 94917, 0x5460551b )
( 94932, 0x9467b341 )
( 94951, 0xc710211d )
( 94964, 0xa6a7adc2 )
( 94978, 0x78193826 )
( 94992, 0x0013c02a )
( 95008, 0x7a0057fb )
( 95027, 0xef3a2267 )
( 95043, 0xde54adb3 )
( 95053, 0x73cf943f )
( 95071, 0xe5fa772a )
( 95090, 0x53a65472 )
( 95108, 0xec758928 )
( 95126, 0x227d8fa0 )
( 95148, 0xc98893d1 )
( 95159, 0x78b838ad )
( 95176, 0x6749e30c )
( 95198, 0xc8cd89e1 )
( 95218, 0xb5ccb8e5 )
( 95229, 0x89a97cd6 )
( 95249, 0xca48bd2a )
( 95267, 0x61cefcb2 )
( 95278, 0x23acbe61 )
( 95291, 0x580405be )
( 95310, 0x8ea7020d )
( 95320, 0x76c74b40 )
( 95332, 0x4239a2b4 )
( 95351, 0xf708b48d )
( 95373, 0x9cec2ae1 )
( 95387, 0x1c7d0786 )
( 95406, 0xa5ae2e13 )
( 95426, 0xf6cffc5a )
( 95442, 0xad22db22 )
( 95468, 0x12fe8deb )
( 95477, 0x0cd956b7 )
( 95496, 0x28c4acce )
( 95504, 0x9d3b7a0d )
( 95523, 0x4ae83f0b )
( 95538, 0xed51d62b )
( 95552, 0x4c4cfd43 )
( 95571, 0x1c4527a0 )
( 95594, 0x78ce19d2 )
( 95610, 0xed565f2b )
( 95622, 0x4d4f96c1 )
( 95626, 0x5e5681ce )
( 95648, 0x587121ab )
( 95663, 0x7f765578 )
( 95681, 0x8c778a44 )
( 95700, 0x51918cb5 )
( 95714, 0x87c2628f )
( 95732, 0x967f1994 )
( 95752, 0xce3d3dcd )
( 95769, 0x3bfd59a5 )
( 95789, 0xdf0da7d4 )
( 95808, 0x4545a0ea )
( 95825, 0x1187e503 )
( 95843, 0x69aa7246 )
( 95857, 0x1a5d9297 )
( 95872, 0x96dd713a )
( 95892, 0x075c2325 )
( 95910, 0x8d16805f )
( 95928, 0x848cc260 )
( 95947, 0x151d859b )
( 95967, 0xe97f861b )
( 95984, 0x57d03a35 )
( 96003, 0x1cfb4299 )
( 96019, 0x61030bfb )
( 96039, 0xeac63e86 )
( 96059, 0xffe77681 )
( 96076, 0x46741fea )
( 96095, 0x44dbef28 )
( 96108, 0x57739633 )
( 96126, 0x4a67ed66 )
( 96141, 0xe522ec54 )
( 96156, 0xaf3367c9 )
( 96176, 0x6e587b1c )
( 96193, 0x148160ce )
( 96207, 0x8d5d773a )
( 96227, 0x85cba6aa )
( 96241, 0xf8ad69a9 )
( 96264, 0x5bc6444c )
( 96282, 0xcd9702bc )
( 96295, 0x490de01f )
( 96314, 0x526ca8e4 )
( 96326, 0x13b94d30 )
( 96344, 0x41c2a33b )
( 96363, 0x913c5658 )
( 96383, 0xd00bc737 )
( 96397, 0x418dc223 )
( 96415, 0x6ae8d07e )
( 96431, 0xf549fdd1 )
( 96450, 0xe3821e4d )
( 96466, 0x2dc21468 )
( 96487, 0x8738c377 )
( 96500, 0x7a95cf95 )
( 96516, 0x1b74f6c1 )
( 96532, 0x9aa6bd55 )
( 96552, 0xb2e972e6 )
( 96569, 0x264e6687 )
( 96588, 0x9d166511 )
( 96597, 0xcaea20f4 )
( 96617, 0x6c2ff0a5 )
( 96634, 0xfb003f31 )
( 96648, 0x71193a34 )
( 96665, 0x9d28f5a5 )
( 96684, 0x985c0e19 )
( 96702, 0x536f2d54 )
( 96720, 0x1715a85d )
( 96736, 0x2aa89e1a )
( 96760, 0x54808105 )
( 96772, 0xcf24c169 )
( 96791, 0xfe9c0ae3 )
( 96797, 0xb36f3c43 )
( 96822, 0xc38eb7e4 )
( 96836, 0x3739f76a )
( 96852, 0xc744aea3 )
( 96869, 0x7d482feb )
( 96892, 0x31fcac7b )
( 96912, 0xb50eab82 )
( 96919, 0x7ff25aee )
( 96922, 0xb8e856eb )
( 96939, 0x94eac4fc )
( 96941, 0xd707411c )
( 96952, 0x88e18c04 )
( 96960, 0x79c7e755 )
( 96973, 0x11944cbb )
( 96982, 0x84ff8745 )
( 97005, 0x48598942 )
( 97023, 0x89df2bce )
( 97050, 0x00f8852c )
( 97068, 0xe7088ef5 )
( 97084, 0x51b57d20 )
( 97103, 0x74e5d7ee )
( 97120, 0x7ff7c0e0 )
( 97158, 0x7c4321c8 )
( 97163, 0xb415981b )
( 97175, 0x05771787 )
( 97202, 0xe64a5ebc )
( 97223, 0xb11a2f31 )
( 97231, 0x7faa72d2 )
( 97248, 0xfdac00f6 )
( 97263, 0x7b43d490 )
( 97286, 0x05dceb03 )
( 97300, 0x3a898a6c )
( 97314, 0x7b3e90d5 )
( 97337, 0xa305b157 )
( 97355, 0x99caaff5 )
( 97373, 0x0bfe3c6d )
( 97389, 0xac7a23f2 )
( 97406, 0xf87e52d6 )
( 97428, 0x2b166a1c )
( 97438, 0x584acb27 )
( 97458, 0xae970b9b )
( 97477, 0xf8d03867 )
( 97493, 0xf9fa2003 )
( 97516, 0x8599c139 )
( 97527, 0xfc5f8fe6 )
( 97540, 0x31eeda1b )
( 97556, 0x76f33b58 )
( 97571, 0x774c6899 )
( 97589, 0x2cd6d8cf )
( 97608, 0xf6b21fce )
( 97616, 0xe1c8618c )
( 97618, 0x82ddf3db )
( 97631, 0x0acbd6cf )
( 97649, 0x5ad6d060 )
( 97666, 0x8d2b13e5 )
( 97683, 0xb44d441c )
( 97702, 0x6e05de5e )
( 97716, 0xe98cb294 )
( 97740, 0xde9d7329 )
( 97754, 0x3e66bcb6 )
( 97774, 0xcdda5584 )
( 97787, 0x54dc9f3f )
( 97809, 0x4d527def )
( 97823, 0x58762627 )
( 97843, 0x7a3a11e2 )
( 97859, 0xd2c2d486 )
( 97879, 0x70a9c7ae )
( 97900, 0xc2eabcb1 )
( 97915, 0xe01c29f8 )
( 97929, 0x4b696870 )
( 97954, 0xb5afe95f )
( 97971, 0x45aef1c1 )
( 97988, 0xcdcbc2c9 )
( 98001, 0x40a71911 )
( 98020, 0x8e876763 )
( 98037, 0x4e22bff3 )
( 98055, 0xd7328705 )
( 98067, 0x1b16bc48 )
( 98089, 0x8ebd2189 )
( 98103, 0x928f2b4c )
( 98117, 0x6c508424 )
( 98136, 0x26011a8b )
( 98154, 0x58eba89b )
( 98171, 0x59d08167 )
( 98185, 0x29b7a2af )
( 98203, 0xd77a11fa )
( 98220, 0x76807942 )
( 98236, 0xc71b3ccb )
( 98257, 0x9324f845 )
( 98272, 0x99d8a7ee )
( 98289, 0x3a7c2349 )
( 98306, 0x23cfdb07 )
( 98323, 0x99c77501 )
( 98341, 0x20533c79 )
( 98357, 0xdd6e8503 )
( 98370, 0x7ed7cbcf )
( 98387, 0x9d1c1093 )
( 98405, 0xae2bedfd )
( 98425, 0xbbf68586 )
( 98444, 0x46092dd2 )
( 98465, 0x6a117aaf )
( 98474, 0x21114ff4 )
( 98492, 0x7b639cec )
( 98507, 0xbbac636d )
( 98534, 0x749a9cd0 )
( 98543, 0xb57941b1 )
( 98557, 0x8e591161 )
( 98576, 0xe3e9d055 )
( 98597, 0x8279b524 )
( 98614, 0xe823319c )
( 98632, 0x150d192e )
( 98652, 0x79d030bb )
( 98665, 0x711624b1 )
( 98669, 0xd70c3c84 )
( 98672, 0xc08ca5ba )
( 98681, 0xc13b66c4 )
( 98707, 0x55183fe4 )
( 98713, 0xe1670ab7 )
( 98741, 0x9ea27af0 )
( 98762, 0xdce2a9ab )
( 98781, 0xa742f0c6 )
( 98800, 0xa7c174d0 )
( 98809, 0x5d7be9fc )
( 98834, 0x3682b26a )
( 98850, 0xf296ed2c )
( 98865, 0x8bc860ae )
( 98879, 0x9fdb3e9f )
( 98898, 0x7979bdf3 )
( 98918, 0xdae3519b )
( 98938, 0xf3237259 )
( 98953, 0xb6f2d180 )
( 98968, 0xb2f5fee1 )
( 98980, 0xd71363b8 )
( 98983, 0x1b4ecbec )
( 99001, 0x2c00ff3c )
( 99022, 0x5c23deef )
( 99041, 0x77cbbda0 )
( 99060, 0xf9dd9d9a )
( 99080, 0x9101737f )
( 99098, 0xa862c0a2 )
( 99117, 0x6e9b5ba0 )
( 99126, 0x42fab307 )
( 99138, 0xe95cfa6d )
( 99144, 0xff622449 )
( 99151, 0x88499b91 )
( 99159, 0x53594afe )
( 99174, 0x5f0f4168 )
( 99188, 0x4be1370e )
( 99207, 0xa20aa04f )
( 99227, 0x4032a8d2 )
( 99235, 0x7c88a891 )
( 99244, 0xe79e670a )
( 99260, 0x4ce71eee )
( 99277, 0x7bec5343 )
( 99296, 0xd25884cb )
( 99319, 0x633edbf2 )
( 99337, 0x9afa858c )
( 99357, 0x6dc61a8a )
( 99379, 0xc5c9e61f )
( 99398, 0x47b9429e )
( 99432, 0xb05bccc2 )
( 99443, 0xfe08e998 )
( 99453, 0x2456decf )
( 99457, 0xce03c7c5 )
( 99485, 0x7e0d357c )
( 99499, 0x05704ab9 )
( 99514, 0x3afefbef )
( 99527, 0xe1875673 )
( 99535, 0x3066374c )
( 99561, 0x6cb13ae0 )
( 99581, 0xe51fbebc )
( 99585, 0x0f35ad47 )
( 99597, 0xfe735edf )
( 99613, 0xc1aa212e )
( 99629, 0x4dc3ff9f )
( 99645, 0x5575bf96 )
( 99662, 0x2ac0e6c0 )
( 99676, 0xf6ae2916 )
( 99689, 0x04368e5c )
( 99713, 0xe9d2cd45 )
( 99725, 0xdd266265 )
( 99734, 0x916c6f5c )
( 99746, 0xa6df35c2 )
( 99767, 0x46623e29 )
( 99782, 0xdbdf1c33 )
( 99799, 0x2464a015 )
( 99818, 0x708d3bad )
( 99837, 0xd07c3d84 )
( 99865, 0xacb92dce )
( 99878, 0x5f4d7f6f )
( 99886, 0xba383cc7 )
( 99911, 0xcb638a0d )
( 99933, 0x9613d361 )
( 99941, 0xc585fafc )
( 99969, 0x582468c4 )
( 99992, 0x3aacbae8 )
( 100008, 0x9039a73f )
( 100025, 0xb16425eb )
( 100030, 0x5c59cda3 )
( 100035, 0xa6ffc08d )
( 100042, 0x808a5d76 )
( 100049, 0x38c38d1c )
( 100068, 0x7ecb8130 )
( 100095, 0x50d765f4 )
( 100107, 0x43121f3f )
( 100123, 0xbd36c1c4 )
( 100139, 0x0d18de8b )
( 100155, 0x5e8733d1 )
( 100185, 0xd2dc604f )
( 100207, 0x3373e0e1 )
( 100221, 0x69564829 )
( 100239, 0x18a69db2 )
( 100257, 0x4b794fa8 )
( 100269, 0xff67552a )
( 100276, 0xf41817e9 )
( 100286, 0xb6738a85 )
( 100303, 0x0a268504 )
( 100320, 0xf165840c )
( 100337, 0xbf4cbd77 )
( 100358, 0x0f11c411 )
( 100372, 0x88fa7be3 )
( 100394, 0x9ab0ba92 )
( 100414, 0x2f57ac7b )
( 100435, 0x6b135f64 )
( 100455, 0x3ab4e5be )
( 100471, 0xbdd90ed2 )
( 100488, 0x596b0ec8 )
( 100507, 0x9736d252 )
( 100527, 0x61d2e4ba )
( 100546, 0x6c0f2780 )
( 100562, 0x7ca21c45 )
( 100580, 0x72c02e17 )
( 100598, 0x751279da )
( 100612, 0xb7d381a8 )
( 100625, 0xfd8c5f30 )
( 100642, 0xc3ced91b )
( 100658, 0xa46759b7 )
( 100674, 0x0d3a54f9 )
( 100691, 0xf8e437c8 )
( 100711, 0x30366b70 )
( 100724, 0xad661750 )
( 100743, 0x4a9fb395 )
( 100761, 0xb219a84c )
( 100797, 0x6732fd8f )
( 100813, 0xb3587c40 )
( 100832, 0x81185f8d )
( 100850, 0xacb89877 )
( 100867, 0x3d882ad0 )
( 100886, 0x853c2d5a )
( 100900, 0xca3ea0e4 )
( 100918, 0x42450f2e )
( 100934, 0x1bf8ea2e )
( 100957, 0x6e9305b5 )
( 100972, 0x24593ba0 )
( 100992, 0x967c15d7 )
( 101011, 0x5e956959 )
( 101026, 0x45380025 )
( 101046, 0x8d9c08c4 )
( 101062, 0x4e8ab75b )
( 101082, 0xae1a359b )
( 101098, 0x4c1bfc0e )
( 101118, 0xb92dec82 )
( 101138, 0x8f49fa21 )
( 101157, 0x0a20533b )
( 101173, 0x0857f135 )
( 101187, 0x47818345 )
( 101207, 0xd712eb6a )
( 101226, 0x250ac072 )
( 101245, 0x2a6ec535 )
( 101256, 0xecfa6303 )
( 101269, 0x390c9c4b )
( 101285, 0x50ed5871 )
( 101299, 0x770451fa )
( 101320, 0xb854d684 )
( 101341, 0xae5a9638 )
( 101353, 0xbe46eee8 )
( 101371, 0x3162cea5 )
( 101390, 0x8af24309 )
( 101411, 0xa54410e3 )
( 101430, 0xb22a216b )
( 101453, 0x8af6772a )
( 101468, 0xcb68ac65 )
( 101486, 0xc60432ac )
( 101499, 0x861d9d2a )
( 101516, 0x37a3117b )
( 101530, 0x8ee7686c )
( 101546, 0xb6d416b0 )
( 101560, 0xa05c87f0 )
( 101585, 0xb21f9dcd )
( 101603, 0xb33511d0 )
( 101620, 0x55ef80e2 )
( 101637, 0xcc5f636c )
( 101653, 0xa473fd64 )
( 101673, 0xefaa7913 )
( 101692, 0xfad74b45 )
( 101712, 0x8fc52449 )
( 101728, 0xd925aabd )
( 101736, 0x7badced3 )
( 101757, 0xe407a327 )
( 101775, 0x20f193e2 )
( 101788, 0xb482a9d9 )
( 101800, 0x83cccd90 )
( 101819, 0x5d3ec8b4 )
( 101836, 0x399cfa4c )
( 101854, 0x125b685b )
( 101871, 0xa8fd1a15 )
( 101893, 0x86ebc226 )
( 101912, 0x71e79fc8 )
( 101927, 0x5f631c75 )
( 101940, 0xb8fc18de )
( 101957, 0x43f044d2 )
( 101973, 0x3b843faa )
( 101995, 0x52b6b136 )
( 102009, 0x0876f7f6 )
( 102023, 0x0b296f98 )
( 102042, 0x24b22a52 )
( 102056, 0xedad8adf )
( 102065, 0x62761b76 )
( 102080, 0x8c8c9187 )
( 102092, 0x1d8641b6 )
( 102110, 0xbeb4d521 )
( 102130, 0x4c6051ae )
( 102149, 0x03a3af8e )
( 102166, 0x16d2201d )
( 102186, 0xe7c6b60f )
( 102199, 0xa113f320 )
( 102214, 0x48ea4cf8 )
( 102233, 0x56c1e971 )
( 102256, 0x8e1e1f0f )
( 102270, 0x39aa57b2 )
( 102290, 0x18c42235 )
( 102308, 0xcbff65f6 )
( 102324, 0x35bfb0d9 )
( 102339, 0xf5ff22f3 )
( 102357, 0xb232f496 )
( 102370, 0x3425e96f )
( 102395, 0xb6d3990b )
( 102399, 0x958d8a1e )
( 102418, 0xc26d0eba )
( 102434, 0x166027c1 )
( 102454, 0xc6f8cc3c )
( 102472, 0x05f4bd4a )
( 102487, 0x8484f236 )
( 102510, 0xc24cb970 )
( 102528, 0x0349b916 )
( 102542, 0xe8798fb7 )
( 102559, 0x4b916d88 )
( 102575, 0x15ddaa5c )
( 102598, 0xe3f519db )
( 102619, 0xc7234d05 )
( 102630, 0x27c8ae7b )
( 102655, 0x319314c8 )
( 102670, 0x5eb5da88 )
( 102689, 0x2b89ade5 )
( 102707, 0xb35a043e )
( 102726, 0x541a9e05 )
( 102742, 0x0febd1d6 )
( 102758, 0x3d716975 )
( 102779, 0x13d34c6a )
( 102793, 0xa9f65f37 )
( 102811, 0x204c124f )
( 102834, 0x72bbc786 )
( 102853, 0xd1850be5 )
( 102872, 0x7aef37cb )
( 102889, 0x735558bb )
( 102908, 0x8c4cce51 )
( 102922, 0x4a13435e )
( 102941, 0xf831d98c )
( 102958, 0x24bb7cfc )
( 102980, 0x6e044df4 )
( 102997, 0xca636c3a )
( 103014, 0x368debc4 )
( 103030, 0x9ff8b065 )
( 103049, 0x9f537975 )
( 103066, 0x0a44099d )
( 103082, 0xddf6fd19 )
( 103098, 0x22e814d7 )
( 103111, 0x14f22011 )
( 103129, 0xeffb7166 )
( 103148, 0x470088b8 )
( 103164, 0x10ab6224 )
( 103185, 0xafb2e99d )
( 103200, 0x851c733e )
( 103220, 0x206438c5 )
( 103238, 0x7ac9dfb0 )
( 103256, 0x835bb868 )
( 103273, 0x25f67d51 )
( 103291, 0x9ff55ed1 )
( 103308, 0x650c6e31 )
( 103331, 0x353ce753 )
( 103344, 0x4cad8bc8 )
( 103362, 0x01e78f74 )
( 103382, 0xb08cfd02 )
( 103398, 0x8b018b0a )
( 103414, 0xc3b07157 )
( 103431, 0xf5c04178 )
( 103448, 0x61c46a34 )
( 103468, 0xcb5f2896 )
( 103485, 0x41d3871d )
( 103502, 0x91e46d30 )
( 103521, 0x61c967d6 )
( 103536, 0xa852040a )
( 103554, 0x62181da1 )
( 103569, 0x68392ea4 )
( 103586, 0x69ef0217 )
( 103600, 0x668a464b )
( 103620, 0x67886d93 )
( 103639, 0x2c532904 )
( 103654, 0x898b4f76 )
( 103672, 0x2ec6fcce )
( 103692, 0xb4df0db3 )
( 103713, 0x77db2e7c )
( 103728, 0x3b1b3ae0 )
( 103747, 0x82cdb13d )
( 103765, 0xbb962813 )
( 103782, 0x7e0d9090 )
( 103803, 0x06bc26bb )
( 103818, 0xce7b061c )
( 103832, 0xda3dd4b3 )
( 103855, 0xbe74da71 )
( 103867, 0x9ea52bab )
( 103886, 0x5d533da4 )
( 103905, 0xaa9133cb )
( 103924, 0x755c8059 )
( 103938, 0x9b35b246 )
( 103961, 0xeffa70a3 )
( 103975, 0x4bb0f3d5 )
( 103994, 0x297fb1fa )
( 104015, 0x27c1395b )
( 104032, 0x53a8ae68 )
( 104049, 0x4fd28f6b )
( 104070, 0xdcfaf382 )
( 104087, 0x90347e9a )
( 104098, 0xb6dddd69 )
( 104115, 0x2b58f4bf )
( 104133, 0xcd34b980 )
( 104149, 0xcee6dcaa )
( 104163, 0xb5b167ae )
( 104177, 0xc585bc6a )
( 104197, 0x29f8bfba )
( 104215, 0xaf287b8a )
( 104232, 0xb93b215e )
( 104250, 0xd555415e )
( 104271, 0xc11ee4c3 )
( 104292, 0x83bee2e3 )
( 104306, 0x477f3bd1 )
( 104323, 0x3311e9c0 )
( 104344, 0xe0896e6e )
( 104362, 0x5e314325 )
( 104380, 0xf5127925 )
( 104404, 0x8cfbf3d6 )
( 104424, 0x902b6656 )
( 104435, 0xf3c7c6fa )
( 104455, 0x4d18ca8d )
( 104471, 0x8b8b32c9 )
( 104485, 0x080f3dc0 )
( 104500, 0x9610a5e2 )
( 104521, 0x467c1685 )
( 104540, 0x1c3ca835 )
( 104556, 0xc7a43a4c )
( 104578, 0xf6568de8 )
( 104588, 0x8cdf74d8 )
( 104606, 0xdf621d62 )
( 104622, 0x94b490f1 )
( 104639, 0x3dd108b5 )
( 104657, 0x62211609 )
( 104670, 0xecdb3119 )
( 104691, 0x9241c8c1 )
( 104713, 0xa9e7a47b )
( 104728, 0xb981027d )
( 104745, 0xc40e66f8 )
( 104762, 0x7a18cc64 )
( 104782, 0xd2b19b06 )
( 104796, 0x7db4630d )
( 104809, 0xc875c633 )
( 104829, 0xc5743684 )
( 104847, 0x2154693e )
( 104867, 0x9a8c0fdb )
( 104884, 0x0c2cee1a )
( 104898, 0xca14f8ef )
( 104911, 0xa57318b9 )
( 104932, 0x995a3f52 )
( 104949, 0x113c2d25 )
( 104960, 0x9df08453 )
( 104977, 0x3c765743 )
( 104993, 0x188e7ea3 )
( 105013, 0xbdb23078 )
( 105034, 0xc6a8ed41 )
( 105046, 0xab5d3426 )
( 105058, 0xc236240a )
( 105080, 0xad3dacea )
( 105097, 0xe473a702 )
( 105107, 0x66a575c0 )
( 105127, 0x6d0e5730 )
( 105142, 0x2dd4f028 )
( 105161, 0xf316eba4 )
( 105176, 0xb7120d0a )
( 105194, 0xcac738d0 )
( 105211, 0xfc1c85d0 )
( 105229, 0xf18a653b )
( 105245, 0x3f5aaf0d )
( 105265, 0x5733a80f )
( 105283, 0x83a9344f )
( 105299, 0xfa13393c )
( 105321, 0xa8332633 )
( 105332, 0x10a88434 )
( 105349, 0x0c95a9e3 )
( 105367, 0x46b66ed3 )
( 105382, 0xc5bc0109 )
( 105400, 0x0c0e6dbc )
( 105423, 0x90cf9982 )
( 105443, 0x8d30e4f9 )
( 105454, 0x5250b583 )
( 105474, 0x1a4ea1c5 )
( 105494, 0x6db4b1bc )
( 105511, 0x1b86f43b )
( 105529, 0x8613547c )
( 105548, 0x5147b333 )
( 105566, 0x86bd2bbb )
( 105585, 0x340d819f )
( 105602, 0xa8eef48c )
( 105617, 0x284b974a )
( 105629, 0x2f3ee514 )
( 105651, 0x2340335c )
( 105666, 0x01dfd2f1 )
( 105681, 0xcdf0e463 )
( 105705, 0xa51d49cd )
( 105714, 0x4b365e52 )
( 105733, 0xa6fff84e )
( 105748, 0x1abf89bc )
( 105768, 0x9cdbc397 )
( 105784, 0xdededd78 )
( 105793, 0x3cf8a4f6 )
( 105812, 0x2b77797f )
( 105826, 0xc393a208 )
( 105842, 0xc2bb0332 )
( 105859, 0x4124eab1 )
( 105877, 0xb49f1de9 )
( 105898, 0x7ed7761c )
( 105912, 0xd736fa14 )
( 105929, 0x284a6db4 )
( 105946, 0x818de417 )
( 105968, 0xdc5ed425 )
( 105985, 0x642d2399 )
( 106002, 0x077f7153 )
( 106019, 0x728a6881 )
( 106041, 0x9f2ca83a )
( 106061, 0x6ee243f3 )
( 106076, 0xfd7056db )
( 106091, 0x703ff105 )
( 106111, 0xa92f34ca )
( 106127, 0xa6112266 )
( 106144, 0xcc5bc583 )
( 106160, 0x8a6e3ea3 )
( 106182, 0x3fe54787 )
( 106201, 0xe71b5b5a )
( 106212, 0x7010ef3a )
( 106229, 0x7f4a49ca )
( 106248, 0x097ebf32 )
( 106257, 0xbedf2034 )
( 106272, 0x9bff69fb )
( 106292, 0xa9dba47d )
( 106315, 0xcd2e9bf0 )
( 106321, 0x9016dd81 )
( 106337, 0x9d931121 )
( 106354, 0x9db1f910 )
( 106373, 0xa41fbac7 )
( 106392, 0x7f81ef30 )
( 106408, 0xf3690cf0 )
( 106425, 0xa50103ee )
( 106441, 0x9d2be929 )
( 106459, 0x5946cb11 )
( 106473, 0xf9ff4f4b )
( 106491, 0x4c8fdbf4 )
( 106506, 0xe953c3b4 )
( 106523, 0x29c804fb )
( 106544, 0x0a4e0b68 )
( 106561, 0x9d3a4ac3 )
( 106583, 0x52566078 )
( 106601, 0x181a40a6 )
( 106620, 0xfd666eaa )
( 106635, 0x18a65cd4 )
( 106654, 0xa6e228ae )
( 106674, 0x4f4a70ca )
( 106696, 0x53609582 )
( 106710, 0x8abf76dd )
( 106721, 0x31ceaea9 )
( 106742, 0x784dbaa9 )
( 106757, 0xfd5f4c29 )
( 106779, 0xdc4c15b0 )
( 106796, 0x651b6003 )
( 106812, 0x10e8e1f8 )
( 106827, 0xf68bf26b )
( 106841, 0x6b36a077 )
( 106862, 0x53a9e903 )
( 106877, 0x5dc1ca00 )
( 106895, 0x74d1bb2b )
( 106916, 0x548ad60a )
( 106938, 0x518d3b62 )
( 106957, 0x13e01758 )
( 106971, 0x2edf323f )
( 106988, 0x39b6c0d9 )
( 107009, 0xd832438d )
( 107021, 0x37569dee )
( 107042, 0xc3c4065f )
( 107063, 0x1213f3fb )
( 107081, 0x3dd93bef )
( 107095, 0x5eff7d5a )
( 107115, 0x8e58b46b )
( 107136, 0x45c6893a )
( 107152, 0x94febdef )
( 107170, 0x26c84b77 )
( 107185, 0x5b979345 )
( 107205, 0x6ee92533 )
( 107219, 0xd4d380b5 )
( 107238, 0xcf236793 )
( 107256, 0x42d0727a )
( 107272, 0x16ddf3bc )
( 107293, 0x00e3c4c5 )
( 107308, 0xb7bc8d6d )
( 107321, 0x2071ef09 )
( 107336, 0xe2eaf2d4 )
( 107354, 0xd8326c24 )
( 107375, 0xa9373c88 )
( 107391, 0x711c4967 )
( 107409, 0xecb0088d )
( 107435, 0xacaafc27 )
( 107451, 0x16c14304 )
( 107469, 0x9d024da4 )
( 107482, 0x46c05be9 )
( 107502, 0x255cbcff )
( 107517, 0x373561e9 )
( 107532, 0x0b9ad773 )
( 107546, 0x919ba76c )
( 107560, 0x38831bea )
( 107580, 0x56931724 )
( 107605, 0x6b14789f )
( 107622, 0xa345465b )
( 107640, 0xcba06544 )
( 107657, 0x74d34d6e )
( 107673, 0x47993cf7 )
( 107693, 0x49719aad )
( 107713, 0xb7af1a24 )
( 107732, 0x35aa3704 )
( 107747, 0x3ebb2290 )
( 107764, 0xd264b5b5 )
( 107780, 0xa1caf2dc )
( 107806, 0xaf2eeced )
( 107822, 0x151135ec )
( 107838, 0x661d95f5 )
( 107854, 0xa91e635f )
( 107874, 0x310f2f24 )
( 107894, 0x0cb48205 )
( 107906, 0xbd2e37b0 )
( 107918, 0x51a0b35a )
( 107938, 0xe9cad391 )
( 107960, 0x1750ff89 )
( 107975, 0xf9360431 )
( 107994, 0x314e522e )
( 108011, 0xc3c0f257 )
( 108027, 0x2c6c6f16 )
( 108038, 0x96bbbd17 )
( 108060, 0x614a0a95 )
( 108074, 0x17d9d745 )
( 108093, 0xf17d72a5 )
( 108112, 0xaf443797 )
( 108129, 0xcb61d061 )
( 108151, 0xe7010ecf )
( 108166, 0xc029604e )
( 108185, 0xb9854502 )
( 108203, 0x22ebd7ae )
( 108216, 0x5db44994 )
( 108232, 0x023631a1 )
( 108251, 0xd8684474 )
( 108269, 0xce8335e2 )
( 108290, 0xd7857feb )
( 108311, 0xb2f695e2 )
( 108327, 0xb06e7ad6 )
( 108346, 0xee75ae4d )
( 108365, 0x5412ba6b )
( 108385, 0x5578c2b5 )
( 108393, 0xbebfb53a )
( 108407, 0x1e9d6cf8 )
( 108428, 0xe95a1b17 )
( 108441, 0xe477f78b )
( 108462, 0x6b9f5cfe )
( 108476, 0x5217769a )
( 108493, 0x1f312fd4 )
( 108509, 0x703ff6f2 )
( 108525, 0x0da57ae2 )
( 108545, 0x322fa3d0 )
( 108564, 0x6a57343c )
( 108581, 0x1e316273 )
( 108599, 0xcc720049 )
( 108616, 0xc0bb74a7 )
( 108635, 0x65cfcfa2 )
( 108647, 0x527262d9 )
( 108663, 0xf58b0714 )
( 108682, 0xcd35d215 )
( 108697, 0x7e347a6a )
( 108722, 0x749e08f6 )
( 108729, 0xb38c53cc )
( 108746, 0x886d107b )
( 108764, 0x5d0a55cd )
( 108784, 0x374ddaec )
( 108800, 0x90c3a2e3 )
( 108823, 0xe80d068c )
( 108832, 0x1149758a )
( 108851, 0x2b63bfad )
( 108870, 0xdb1dcb01 )
( 108889, 0x6003ac6e )
( 108910, 0xb294a143 )
( 108928, 0x782744c0 )
( 108943, 0x76fe6e31 )
( 108963, 0x59bfc24a )
( 108981, 0x4cb7093c )
( 108995, 0x348393bd )
( 109006, 0xb718d0bf )
( 109013, 0xa15e85e8 )
( 109028, 0xcaa5a4f5 )
( 109045, 0x1f978089 )
( 109055, 0x4176d76e )
( 109074, 0xfcfcc0f2 )
( 109092, 0x1996555f )
( 109105, 0xdce8b9d2 )
( 109114, 0x74a7c169 )
( 109127, 0x332e22ee )
( 109143, 0x114dc774 )
( 109164, 0x0e908522 )
( 109177, 0xc605696f )
( 109195, 0xf85d3ecb )
( 109214, 0xa4facae1 )
( 109235, 0x3235275e )
( 109252, 0x3040454f )
( 109266, 0x30bc4b9a )
( 109288, 0x84b54932 )
( 109303, 0xe515489f )
( 109322, 0x3cf02049 )
( 109345, 0x019f8f04 )
( 109356, 0xbe2f402a )
( 109369, 0x88854d18 )
( 109386, 0xcca2f63a )
( 109407, 0x33e90f96 )
( 109421, 0x1142a1b0 )
( 109436, 0xa7d62a47 )
( 109454, 0x63ce3529 )
( 109469, 0xa10e293f )
( 109484, 0xd2015a6c )
( 109505, 0x8705767c )
( 109521, 0x38d30202 )
( 109538, 0x41153a85 )
( 109558, 0x6752614e )
( 109572, 0x9b455ba7 )
( 109591, 0xf45f3a74 )
( 109612, 0x2b1334b9 )
( 109628, 0xda276d91 )
( 109645, 0x9cd5f367 )
( 109662, 0x82d564fd )
( 109676, 0xe2011994 )
( 109686, 0x2a3d45a1 )
( 109705, 0xa572ecca )
( 109727, 0xba2e9f89 )
( 109744, 0x43341d69 )
( 109757, 0x663e40b4 )
( 109780, 0xa684e4c1 )
( 109803, 0x92ef67c8 )
( 109822, 0xa539f579 )
( 109843, 0x43d5d3c0 )
( 109854, 0xa3c99785 )
( 109864, 0x0ee10e2d )
( 109880, 0x27cef446 )
( 109897, 0xe37fcdf2 )
( 109913, 0x938a0726 )
( 109927, 0x3d04b8f7 )
( 109944, 0xa3dd9257 )
( 109963, 0xc551d648 )
( 109984, 0xccc72ebf )
( 110000, 0x1ebd714f )
( 110021, 0x767729e4 )
( 110038, 0x39882dd2 )
( 110060, 0x277115af )
( 110076, 0x7769724c )
( 110093, 0xf1297402 )
( 110116, 0x7e173f8a )
( 110138, 0x28e35371 )
( 110155, 0x78e97224 )
( 110173, 0x39730788 )
( 110197, 0xb175571b )
( 110210, 0x9d4415a1 )
( 110229, 0x4e15b875 )
( 110250, 0x4d9aa9af )
( 110265, 0x888263fc )
( 110279, 0x90c8ce36 )
( 110291, 0x6d96c4fa )
( 110312, 0x47300e0a )
( 110328, 0x2ec18b3b )
( 110338, 0xd953d9a2 )
( 110352, 0xf8d3e0c3 )
( 110371, 0x9e769b2a )
( 110390, 0xdc794b6a )
( 110405, 0x7da0a251 )
( 110426, 0xf6879955 )
( 110447, 0x1b7a0ec5 )
( 110466, 0xcaf23679 )
( 110484, 0x96b630a3 )
( 110503, 0x206ef2d9 )
( 110518, 0xfbf6cfb7 )
( 110541, 0x6d72fa7d )
( 110550, 0x80058a3d )
( 110562, 0x0aebe7e1 )
( 110579, 0x73fccab2 )
( 110597, 0x6a92e523 )
( 110614, 0x9df775c3 )
( 110632, 0xc9992eec )
( 110646, 0x29c5e335 )
( 110664, 0x8958ea03 )
( 110673, 0x2fb6832a )
( 110692, 0xfec6802c )
( 110706, 0x398e59dd )
( 110726, 0x8cfc1955 )
( 110745, 0x4d90f381 )
( 110760, 0x018c2204 )
( 110779, 0x55e8158e )
( 110800, 0x119d495c )
( 110816, 0x88635453 )
( 110833, 0x90ee23fd )
( 110855, 0x207cbaee )
( 110876, 0xc36cc36c )
( 110895, 0xcdc0611f )
( 110907, 0x0bdef664 )
( 110930, 0x284107ec )
( 110940, 0xf07dfe5e )
( 110956, 0x9676b269 )
( 110973, 0xfe2b1a52 )
( 110991, 0x4e67923a )
( 111006, 0x60865e94 )
( 111025, 0x90c3a281 )
( 111043, 0x359d4b85 )
( 111064, 0x560ec709 )
( 111077, 0xee334d35 )
( 111094, 0xe12260d4 )
( 111113, 0x85fddec8 )
( 111132, 0x9b359c0a )
( 111151, 0x9265276c )
( 111169, 0xcdf418e7 )
( 111182, 0x6ea42f62 )
( 111199, 0x14d31613 )
( 111220, 0xaad03a61 )
( 111232, 0x26115af6 )
( 111244, 0x8d858d4a )
( 111269, 0xd2e53308 )
( 111282, 0x304f4ef3 )
( 111297, 0x7281d209 )
( 111319, 0xef1f4722 )
( 111335, 0x63c27a50 )
( 111354, 0x62ee0de5 )
( 111399, 0xab814815 )
( 111415, 0x946e0eb9 )
( 111433, 0xe378fd61 )
( 111450, 0x56b6844c )
( 111465, 0x28ed1445 )
( 111481, 0x31af95e2 )
( 111502, 0x06a7e5d6 )
( 111518, 0x26cf08af )
( 111538, 0x9edb2632 )
( 111555, 0x8ab3a84d )
( 111573, 0x5ac74893 )
( 111591, 0x73c7739f )
( 111608, 0xfd3bfbf5 )
( 111628, 0x6c780c78 )
( 111645, 0x2587ab1b )
( 111663, 0x4d1e0206 )
( 111681, 0x0e45e508 )
( 111699, 0x99a018c7 )
( 111711, 0x2b2019dd )
( 111732, 0x9d0fc027 )
( 111745, 0x2f785eca )
( 111765, 0x492c5c0d )
( 111780, 0x6d51743d )
( 111798, 0x02aa42dd )
( 111815, 0x3094a6d4 )
( 111831, 0xf610e86c )
( 111850, 0x8635a8da )
( 111874, 0x8eeb8b3b )
( 111887, 0x72679fbe )
( 111907, 0xde31c402 )
( 111924, 0xc9d237d3 )
( 111943, 0x761bd291 )
( 111960, 0x46b739f2 )
( 111973, 0x8bea2e74 )
( 111995, 0x397f1033 )
( 112015, 0xc910b075 )
( 112030, 0x405cc123 )
( 112046, 0x4bfa7267 )
( 112066, 0xe0243ea9 )
( 112085, 0x6a6d8ff4 )
( 112100, 0x7b64cc3d )
( 112118, 0xc2934ba4 )
( 112137, 0x689b954f )
( 112157, 0x27f9d253 )
( 112168, 0xe7e0020e )
( 112188, 0x5ae479c5 )
( 112206, 0x6142ac93 )
( 112229, 0xae2b5418 )
( 112244, 0xc4379865 )
( 112263, 0x6e155046 )
( 112277, 0xa9f70308 )
( 112291, 0xe9ee23a0 )
( 112309, 0x73593f9b )
( 112329, 0x87a1afe9 )
( 112342, 0x6fb1c260 )
    ;

// Hard checkpoints of stake modifiers to ensure they are deterministic (testNet)
static std::map<int, unsigned int> mapStakeModifierCheckpointsTestNet =
    boost::assign::map_list_of
        ( 1999999999, 0x0e00670bu )
    ;

// Pregenerated entropy bits table (from genesis to #9689)
//
// Bits are packed into array of 256 bit integers:
//
// * array index calculated as nHeight / 256
// * position of bit is calculated as nHeight & 0xFF.
//
const uint256 entropyStore[] = {
    uint256("0x4555b4dcc1d690ddd9b810c90c66e82b18bf4f43cc887246c418383ec120a5ab"),
    uint256("0xaa6d1198412fa77608addf6549c9198a22155e8afd7a9ded6179f6b7cfc66b0c"),
    uint256("0x9442fabfa4116fb14a9769c2eea003845a1f5c3a0260f36b497d68f3a3cd4078"),
    uint256("0x0e769042a9a98e42388195d699574b822d06515f7053ad884c53d7ee059f05b1"),
    uint256("0x7005aac20baf70251aebfe3f1b95987d83ef1e3e6963de8fed601d4dd07bf7cf"),
    uint256("0x58952c5c3de188f2e33c38d3f53d7bf44f9bc545a4289d266696273fa821be66"),
    uint256("0x50b6c2ed780c08aaec3f7665b1b6004206243e3866456fc910b83b52d07eeb63"),
    uint256("0x563841eefca85ba3384986c58100408ae3f1ba2ac727e1ac910ce154a06c702f"),
    uint256("0x79275b03938b3e27a9b01a7f7953c6c487c58355f5d4169accfbb800213ffd13"),
    uint256("0xd783f2538b3ed18f135af90adc687c5646d93aeaeaabc6667be94f7aa0a2d366"),
    uint256("0xb441d0c175c40c8e88b09d88ea008af79cbed2d28219427d2e72fda682974db8"),
    uint256("0x3204c43bd41f2e19628af3b0c9aca3db15bca4c8705d51056e7b17a319c04715"),
    uint256("0x7e80e6ab7857d8f2f261a0a49c783bd800b365b8c9b85cc0e13f73904b0dcaa9"),
    uint256("0xefaaee60ed82d2ad145c0e347941fdb131eb8fd289a45eef07121a93f283c5f1"),
    uint256("0x3efc86e4334da332c1fd4c12513c40cff689f3efdc7f9913230822adacdda4f9"),
    uint256("0xf0d6b8f38599a017fa35d1fbbf9ef51eca5ebc5b286aadba40c4c3e1d9bace0c"),
    uint256("0x286a67f27323486036a0a92d35382fc8963c0c00bad331723318b4b9fdb2b56e"),
    uint256("0xecbfaaa6567c54f08c4d5bd0118a2d7b58740f42cbfc73aa1536c1f5f76de87c"),
    uint256("0xf9a4de1c5c46520de5aaf10d3796cf0e27ddce98b3398357f5726a949664e308"),
    uint256("0xd75e6c4dc4be08401e3478d2467d9ab96a62af4f255c04a82c41af0de0a487bb"),
    uint256("0x1a82c3bc6ad6047294c16571b5e2b7316c97bf8813e7da15798b9820d67e39f2"),
    uint256("0xb49be0080de564e01829ded7e7971979565a741c5975dc9978dcc020192d396c"),
    uint256("0x0d8eed113be67663b5a15a0625a9b49792b5ea59c005c4f405914877acab7000"),
    uint256("0x8f9d46e2bc05a218ffa942965b747056197d393b097085523640cd59e07fe7c7"),
    uint256("0x7a63ab40bc7f40ac2ebe9ede438d97b45fa6ed6f8419016da8d5f7a670111dda"),
    uint256("0x63fbcc080448c43d6cf915c958314feff7a95a52ba43a68c05fc281d3a522d25"),
    uint256("0xf834cf824c326d3ea861ea1e85dc3289265e37045981e28208e7344a7f8081d7"),
    uint256("0xb4edc22ec98cc49b2f5af5bae3f52f5e6058280f74f2c432c2dd89ae49acceb8"),
    uint256("0x0fe596037dcf81bf5c64f39755261c404ed088af5c8c31dd7549b6657ee92365"),
    uint256("0xbbad51a0aeba254b01d18c328de9e932b9b859b61e622c325d64e2211b5e413d"),
    uint256("0xabf0194cc787be938bc51c7fdf1cae4ec79e65ebab8fa8b8f40541c44ef384b0"),
    uint256("0x83bc12d6fdbd3e854cb91c4ca7dfba3c38e8714121af88c8a8abdb33e5002438"),
    uint256("0x71a2513026cabaedcbe55aeb6dc8049e5b763a3f54f10c33dd333624f764b38c"),
    uint256("0xee6725632ff5c025dff6a18cd059875dcae20f399b03bccba13d9d5fcf6d9d9a"),
    uint256("0xa168a2741d1e7e50cc74b79f695c25ffd3576e6bd61353c2a20e569fd63b2dac"),
    uint256("0x6e462d2a87bfde9398b6747f94a8ed6a01e4d96c5b4372df5c910c106c48bd13"),
    uint256("0x8eeb696181957c4b22434028990f49cb30006827c73860e77e2eecf5c38be99d"),
    uint256("0x3188aaa65877b166f05cdc48f55b1f77a7d6fb221c395596d990ae5647e9ba96")
};

// Whether the given block is subject to new modifier protocol
bool IsFixedModifierInterval(unsigned int nTimeBlock)
{
    return (nTimeBlock >= (fTestNet? nModifierTestSwitchTime : nModifierSwitchTime));
}

// Get the last stake modifier and its generation time from a given block
static bool GetLastStakeModifier(const CBlockIndex* pindex, uint64_t& nStakeModifier, int64_t& nModifierTime)
{
    if (!pindex)
        return error("GetLastStakeModifier: null pindex");
    while (pindex && pindex->pprev && !pindex->GeneratedStakeModifier())
        pindex = pindex->pprev;
    if (!pindex->GeneratedStakeModifier())
        return error("GetLastStakeModifier: no generation at genesis block");
    nStakeModifier = pindex->nStakeModifier;
    nModifierTime = pindex->GetBlockTime();
    return true;
}

// Get selection interval section (in seconds)
static int64_t GetStakeModifierSelectionIntervalSection(int nSection)
{
    assert (nSection >= 0 && nSection < 64);
    return (nModifierInterval * 63 / (63 + ((63 - nSection) * (MODIFIER_INTERVAL_RATIO - 1))));
}

// Get stake modifier selection interval (in seconds)
static int64_t GetStakeModifierSelectionInterval()
{
    int64_t nSelectionInterval = 0;
    for (int nSection=0; nSection<64; nSection++)
        nSelectionInterval += GetStakeModifierSelectionIntervalSection(nSection);
    return nSelectionInterval;
}

// select a block from the candidate blocks in vSortedByTimestamp, excluding
// already selected blocks in vSelectedBlocks, and with timestamp up to
// nSelectionIntervalStop.
static bool SelectBlockFromCandidates(vector<pair<int64_t, uint256> >& vSortedByTimestamp, map<uint256, const CBlockIndex*>& mapSelectedBlocks,
    int64_t nSelectionIntervalStop, uint64_t nStakeModifierPrev, const CBlockIndex** pindexSelected)
{
    bool fSelected = false;
    uint256 hashBest = 0;
    *pindexSelected = (const CBlockIndex*) 0;
    BOOST_FOREACH(const PAIRTYPE(int64_t, uint256)& item, vSortedByTimestamp)
    {
        if (!mapBlockIndex.count(item.second))
            return error("SelectBlockFromCandidates: failed to find block index for candidate block %s", item.second.ToString().c_str());
        const CBlockIndex* pindex = mapBlockIndex[item.second];
        if (fSelected && pindex->GetBlockTime() > nSelectionIntervalStop)
            break;
        if (mapSelectedBlocks.count(pindex->GetBlockHash()) > 0)
            continue;
        // compute the selection hash by hashing its proof-hash and the
        // previous proof-of-stake modifier
        uint256 hashProof = pindex->IsProofOfStake()? pindex->hashProofOfStake : pindex->GetBlockHash();
        CDataStream ss(SER_GETHASH, 0);
        ss << hashProof << nStakeModifierPrev;
        uint256 hashSelection = Hash(ss.begin(), ss.end());
        // the selection hash is divided by 2**32 so that proof-of-stake block
        // is always favored over proof-of-work block. this is to preserve
        // the energy efficiency property
        if (pindex->IsProofOfStake())
            hashSelection >>= 32;
        if (fSelected && hashSelection < hashBest)
        {
            hashBest = hashSelection;
            *pindexSelected = (const CBlockIndex*) pindex;
        }
        else if (!fSelected)
        {
            fSelected = true;
            hashBest = hashSelection;
            *pindexSelected = (const CBlockIndex*) pindex;
        }
    }
    if (fDebug && GetBoolArg("-printstakemodifier"))
        printf("SelectBlockFromCandidates: selection hash=%s\n", hashBest.ToString().c_str());
    return fSelected;
}

// Stake Modifier (hash modifier of proof-of-stake):
// The purpose of stake modifier is to prevent a txout (coin) owner from
// computing future proof-of-stake generated by this txout at the time
// of transaction confirmation. To meet kernel protocol, the txout
// must hash with a future stake modifier to generate the proof.
// Stake modifier consists of bits each of which is contributed from a
// selected block of a given block group in the past.
// The selection of a block is based on a hash of the block's proof-hash and
// the previous stake modifier.
// Stake modifier is recomputed at a fixed time interval instead of every
// block. This is to make it difficult for an attacker to gain control of
// additional bits in the stake modifier, even after generating a chain of
// blocks.
bool ComputeNextStakeModifier(const CBlockIndex* pindexCurrent, uint64_t& nStakeModifier, bool& fGeneratedStakeModifier)
{
    nStakeModifier = 0;
    fGeneratedStakeModifier = false;
    const CBlockIndex* pindexPrev = pindexCurrent->pprev;
    if (!pindexPrev)
    {
        fGeneratedStakeModifier = true;
        return true;  // genesis block's modifier is 0
    }

    // First find current stake modifier and its generation block time
    // if it's not old enough, return the same stake modifier
    int64_t nModifierTime = 0;
    if (!GetLastStakeModifier(pindexPrev, nStakeModifier, nModifierTime))
        return error("ComputeNextStakeModifier: unable to get last modifier");
    if (fDebug)
    {
        printf("ComputeNextStakeModifier: prev modifier=0x%016" PRIx64 " time=%s epoch=%u\n", nStakeModifier, DateTimeStrFormat(nModifierTime).c_str(), (unsigned int)nModifierTime);
    }
    if (nModifierTime / nModifierInterval >= pindexPrev->GetBlockTime() / nModifierInterval)
    {
        if (fDebug)
        {
            printf("ComputeNextStakeModifier: no new interval keep current modifier: pindexPrev nHeight=%d nTime=%u\n", pindexPrev->nHeight, (unsigned int)pindexPrev->GetBlockTime());
        }
        return true;
    }
    if (nModifierTime / nModifierInterval >= pindexCurrent->GetBlockTime() / nModifierInterval)
    {
        // fixed interval protocol requires current block timestamp also be in a different modifier interval
        if (IsFixedModifierInterval(pindexCurrent->nTime))
        {
            if (fDebug)
            {
                printf("ComputeNextStakeModifier: no new interval keep current modifier: pindexCurrent nHeight=%d nTime=%u\n", pindexCurrent->nHeight, (unsigned int)pindexCurrent->GetBlockTime());
            }
            return true;
        }
        else
        {
            if (fDebug)
            {
                printf("ComputeNextStakeModifier: old modifier at block %s not meeting fixed modifier interval: pindexCurrent nHeight=%d nTime=%u\n", pindexCurrent->GetBlockHash().ToString().c_str(), pindexCurrent->nHeight, (unsigned int)pindexCurrent->GetBlockTime());
            }
        }
    }

    // Sort candidate blocks by timestamp
    vector<pair<int64_t, uint256> > vSortedByTimestamp;
    vSortedByTimestamp.reserve(64 * nModifierInterval / nStakeTargetSpacing);
    int64_t nSelectionInterval = GetStakeModifierSelectionInterval();
    int64_t nSelectionIntervalStart = (pindexPrev->GetBlockTime() / nModifierInterval) * nModifierInterval - nSelectionInterval;
    const CBlockIndex* pindex = pindexPrev;
    while (pindex && pindex->GetBlockTime() >= nSelectionIntervalStart)
    {
        vSortedByTimestamp.push_back(make_pair(pindex->GetBlockTime(), pindex->GetBlockHash()));
        pindex = pindex->pprev;
    }
    int nHeightFirstCandidate = pindex ? (pindex->nHeight + 1) : 0;
    reverse(vSortedByTimestamp.begin(), vSortedByTimestamp.end());
    sort(vSortedByTimestamp.begin(), vSortedByTimestamp.end());

    // Select 64 blocks from candidate blocks to generate stake modifier
    uint64_t nStakeModifierNew = 0;
    int64_t nSelectionIntervalStop = nSelectionIntervalStart;
    map<uint256, const CBlockIndex*> mapSelectedBlocks;
    for (int nRound=0; nRound<min(64, (int)vSortedByTimestamp.size()); nRound++)
    {
        // add an interval section to the current selection round
        nSelectionIntervalStop += GetStakeModifierSelectionIntervalSection(nRound);
        // select a block from the candidates of current round
        if (!SelectBlockFromCandidates(vSortedByTimestamp, mapSelectedBlocks, nSelectionIntervalStop, nStakeModifier, &pindex))
            return error("ComputeNextStakeModifier: unable to select block at round %d", nRound);
        // write the entropy bit of the selected block
        nStakeModifierNew |= (((uint64_t)pindex->GetStakeEntropyBit()) << nRound);
        // add the selected block from candidates to selected list
        mapSelectedBlocks.insert(make_pair(pindex->GetBlockHash(), pindex));
        if (fDebug && GetBoolArg("-printstakemodifier"))
            printf("ComputeNextStakeModifier: selected round %d stop=%s height=%d bit=%d\n", nRound, DateTimeStrFormat(nSelectionIntervalStop).c_str(), pindex->nHeight, pindex->GetStakeEntropyBit());
    }

    // Print selection map for visualization of the selected blocks
    if (fDebug && GetBoolArg("-printstakemodifier"))
    {
        string strSelectionMap = "";
        // '-' indicates proof-of-work blocks not selected
        strSelectionMap.insert(0, pindexPrev->nHeight - nHeightFirstCandidate + 1, '-');
        pindex = pindexPrev;
        while (pindex && pindex->nHeight >= nHeightFirstCandidate)
        {
            // '=' indicates proof-of-stake blocks not selected
            if (pindex->IsProofOfStake())
                strSelectionMap.replace(pindex->nHeight - nHeightFirstCandidate, 1, "=");
            pindex = pindex->pprev;
        }
        BOOST_FOREACH(const PAIRTYPE(uint256, const CBlockIndex*)& item, mapSelectedBlocks)
        {
            // 'S' indicates selected proof-of-stake blocks
            // 'W' indicates selected proof-of-work blocks
            strSelectionMap.replace(item.second->nHeight - nHeightFirstCandidate, 1, item.second->IsProofOfStake()? "S" : "W");
        }
        printf("ComputeNextStakeModifier: selection height [%d, %d] map %s\n", nHeightFirstCandidate, pindexPrev->nHeight, strSelectionMap.c_str());
    }
    if (fDebug)
    {
        printf("ComputeNextStakeModifier: new modifier=0x%016" PRIx64 " time=%s\n", nStakeModifierNew, DateTimeStrFormat(pindexPrev->GetBlockTime()).c_str());
    }

    nStakeModifier = nStakeModifierNew;
    fGeneratedStakeModifier = true;
    return true;
}

// The stake modifier used to hash for a stake kernel is chosen as the stake
// modifier about a selection interval later than the coin generating the kernel
static bool GetKernelStakeModifier(uint256 hashBlockFrom, uint64_t& nStakeModifier, int& nStakeModifierHeight, int64_t& nStakeModifierTime, bool fPrintProofOfStake)
{
    nStakeModifier = 0;
    if (!mapBlockIndex.count(hashBlockFrom))
        return error("GetKernelStakeModifier() : block not indexed");
    const CBlockIndex* pindexFrom = mapBlockIndex[hashBlockFrom];
    nStakeModifierHeight = pindexFrom->nHeight;
    nStakeModifierTime = pindexFrom->GetBlockTime();
    int64_t nStakeModifierSelectionInterval = GetStakeModifierSelectionInterval();
    const CBlockIndex* pindex = pindexFrom;
    // loop to find the stake modifier later by a selection interval
    while (nStakeModifierTime < pindexFrom->GetBlockTime() + nStakeModifierSelectionInterval)
    {
        if (!pindex->pnext)
        {   // reached best block; may happen if node is behind on block chain
            if (fPrintProofOfStake || (pindex->GetBlockTime() + nStakeMinAge - nStakeModifierSelectionInterval > GetAdjustedTime()))
                return error("GetKernelStakeModifier() : reached best block %s at height %d from block %s",
                    pindex->GetBlockHash().ToString().c_str(), pindex->nHeight, hashBlockFrom.ToString().c_str());
            else
                return false;
        }
        pindex = pindex->pnext;
        if (pindex->GeneratedStakeModifier())
        {
            nStakeModifierHeight = pindex->nHeight;
            nStakeModifierTime = pindex->GetBlockTime();
        }
    }
    nStakeModifier = pindex->nStakeModifier;
    return true;
}

bool GetKernelStakeModifier(uint256 hashBlockFrom, uint64_t& nStakeModifier)
{
    int nStakeModifierHeight;
    int64_t nStakeModifierTime;

    return GetKernelStakeModifier(hashBlockFrom, nStakeModifier, nStakeModifierHeight, nStakeModifierTime, false);
}


// ppcoin kernel protocol
// coinstake must meet hash target according to the protocol:
// kernel (input 0) must meet the formula
//     hash(nStakeModifier + txPrev.block.nTime + txPrev.offset + txPrev.nTime + txPrev.vout.n + nTime) < bnTarget * nCoinDayWeight
// this ensures that the chance of getting a coinstake is proportional to the
// amount of coin age one owns.
// The reason this hash is chosen is the following:
//   nStakeModifier: scrambles computation to make it very difficult to precompute
//                  future proof-of-stake at the time of the coin's confirmation
//   txPrev.block.nTime: prevent nodes from guessing a good timestamp to
//                       generate transaction for future advantage
//   txPrev.offset: offset of txPrev inside block, to reduce the chance of
//                  nodes generating coinstake at the same time
//   txPrev.nTime: reduce the chance of nodes generating coinstake at the same
//                 time
//   txPrev.vout.n: output number of txPrev, to reduce the chance of nodes
//                  generating coinstake at the same time
//   block/tx hash should not be used here as they can be generated in vast
//   quantities so as to generate blocks faster, degrading the system back into
//   a proof-of-work situation.
//
bool CheckStakeKernelHash(uint32_t nBits, const CBlock& blockFrom, uint32_t nTxPrevOffset, const CTransaction& txPrev, const COutPoint& prevout, uint32_t nTimeTx, uint256& hashProofOfStake, uint256& targetProofOfStake, bool fPrintProofOfStake)
{
    if (nTimeTx < txPrev.nTime)  // Transaction timestamp violation
        return error("CheckStakeKernelHash() : nTime violation");

    uint32_t nTimeBlockFrom = blockFrom.GetBlockTime();
    if (nTimeBlockFrom + nStakeMinAge > nTimeTx) // Min age requirement
        return error("CheckStakeKernelHash() : min age violation");

    CBigNum bnTargetPerCoinDay;
    bnTargetPerCoinDay.SetCompact(nBits);
    int64_t nValueIn = txPrev.vout[prevout.n].nValue;

    uint256 hashBlockFrom = blockFrom.GetHash();

    CBigNum bnCoinDayWeight = CBigNum(nValueIn) * GetWeight((int64_t)txPrev.nTime, (int64_t)nTimeTx) / COIN / nOneDay;
    targetProofOfStake = (bnCoinDayWeight * bnTargetPerCoinDay).getuint256();

    // Calculate hash
    CDataStream ss(SER_GETHASH, 0);
    uint64_t nStakeModifier = 0;
    int nStakeModifierHeight = 0;
    int64_t nStakeModifierTime = 0;

    if (!GetKernelStakeModifier(hashBlockFrom, nStakeModifier, nStakeModifierHeight, nStakeModifierTime, fPrintProofOfStake))
        return false;
    ss << nStakeModifier;

    ss << nTimeBlockFrom << nTxPrevOffset << txPrev.nTime << prevout.n << nTimeTx;
    hashProofOfStake = Hash(ss.begin(), ss.end());
    if (fPrintProofOfStake)
    {
        printf("CheckStakeKernelHash() : using modifier 0x%016" PRIx64 " at height=%d timestamp=%s for block from height=%d timestamp=%s\n",
            nStakeModifier, nStakeModifierHeight,
            DateTimeStrFormat(nStakeModifierTime).c_str(),
            mapBlockIndex[hashBlockFrom]->nHeight,
            DateTimeStrFormat(blockFrom.GetBlockTime()).c_str());
        printf("CheckStakeKernelHash() : check modifier=0x%016" PRIx64 " nTimeBlockFrom=%u nTxPrevOffset=%u nTimeTxPrev=%u nPrevout=%u nTimeTx=%u hashTarget=%s hashProof=%s\n",
            nStakeModifier,
            nTimeBlockFrom, nTxPrevOffset, txPrev.nTime, prevout.n, nTimeTx,
            targetProofOfStake.ToString().c_str(), hashProofOfStake.ToString().c_str());
    }

    // Now check if proof-of-stake hash meets target protocol
    if (CBigNum(hashProofOfStake) > bnCoinDayWeight * bnTargetPerCoinDay)
        return false;
    if (fDebug && !fPrintProofOfStake)
    {
        printf("CheckStakeKernelHash() : using modifier 0x%016" PRIx64 " at height=%d timestamp=%s for block from height=%d timestamp=%s\n",
            nStakeModifier, nStakeModifierHeight,
            DateTimeStrFormat(nStakeModifierTime).c_str(),
            mapBlockIndex[hashBlockFrom]->nHeight,
            DateTimeStrFormat(blockFrom.GetBlockTime()).c_str());
        printf("CheckStakeKernelHash() : pass modifier=0x%016" PRIx64 " nTimeBlockFrom=%u nTxPrevOffset=%u nTimeTxPrev=%u nPrevout=%u nTimeTx=%u hashTarget=%s hashProof=%s\n",
            nStakeModifier,
            nTimeBlockFrom, nTxPrevOffset, txPrev.nTime, prevout.n, nTimeTx,
            targetProofOfStake.ToString().c_str(), hashProofOfStake.ToString().c_str());
    }
    return true;
}

// Scan given kernel for solution
bool ScanKernelForward(unsigned char *kernel, uint32_t nBits, uint32_t nInputTxTime, int64_t nValueIn, std::pair<uint32_t, uint32_t> &SearchInterval, std::vector<std::pair<uint256, uint32_t> > &solutions)
{
    // TODO: custom threads amount

    uint32_t nThreads = boost::thread::hardware_concurrency();
    uint32_t nPart = (SearchInterval.second - SearchInterval.first) / nThreads;


    KernelWorker *workers = new KernelWorker[nThreads];

    boost::thread_group group;
    for(size_t i = 0; i < nThreads; i++)
    {
        uint32_t nBegin = SearchInterval.first + nPart * i;
        uint32_t nEnd = SearchInterval.first + nPart * (i + 1);
        workers[i] = KernelWorker(kernel, nBits, nInputTxTime, nValueIn, nBegin, nEnd);
        boost::function<void()> workerFnc = boost::bind(&KernelWorker::Do, &workers[i]);
        group.create_thread(workerFnc);
    }

    group.join_all();
    solutions.clear();

    for(size_t i = 0; i < nThreads; i++)
    {
        std::vector<std::pair<uint256, uint32_t> > ws = workers[i].GetSolutions();
        solutions.insert(solutions.end(), ws.begin(), ws.end());
    }

    delete [] workers;

    if (solutions.size() == 0)
    {
        // no solutions
        return false;
    }

    return true;
}

// Check kernel hash target and coinstake signature
bool CheckProofOfStake(const CTransaction& tx, unsigned int nBits, uint256& hashProofOfStake, uint256& targetProofOfStake)
{
    if (!tx.IsCoinStake())
        return error("CheckProofOfStake() : called on non-coinstake %s", tx.GetHash().ToString().c_str());

    // Kernel (input 0) must match the stake hash target per coin age (nBits)
    const CTxIn& txin = tx.vin[0];

    // First try finding the previous transaction in database
    CTxDB txdb("r");
    CTransaction txPrev;
    CTxIndex txindex;
    if (!txPrev.ReadFromDisk(txdb, txin.prevout, txindex))
    if (fDebug)
            return tx.DoS(1, error("CheckProofOfStake() : INFO: read txPrev failed"));  // previous transaction not in main chain, may occur during initial download
       return error;

#ifndef USE_LEVELDB
    txdb.Close();
#endif

    // Verify signature
    if (!VerifySignature(txPrev, tx, 0, MANDATORY_SCRIPT_VERIFY_FLAGS, 0))
        return tx.DoS(100, error("CheckProofOfStake() : VerifySignature failed on coinstake %s", tx.GetHash().ToString().c_str()));

    // Read block header
    CBlock block;
    if (!block.ReadFromDisk(txindex.pos.nFile, txindex.pos.nBlockPos, false))
        return fDebug? error("CheckProofOfStake() : read block failed") : false; // unable to read block of previous transaction

    if (!CheckStakeKernelHash(nBits, block, txindex.pos.nTxPos - txindex.pos.nBlockPos, txPrev, txin.prevout, tx.nTime, hashProofOfStake, targetProofOfStake, fDebug))
        return tx.DoS(1, error("CheckProofOfStake() : INFO: check kernel failed on coinstake %s, hashProof=%s", tx.GetHash().ToString().c_str(), hashProofOfStake.ToString().c_str())); // may occur during initial download or if behind on block chain sync

    return true;
}

// Get stake modifier checksum
uint32_t GetStakeModifierChecksum(const CBlockIndex* pindex)
{
    assert (pindex->pprev || pindex->GetBlockHash() == (!fTestNet ? hashGenesisBlock : hashGenesisBlockTestNet));
    // Hash previous checksum with flags, hashProofOfStake and nStakeModifier
    CDataStream ss(SER_GETHASH, 0);
    if (pindex->pprev)
        ss << pindex->pprev->nStakeModifierChecksum;
    ss << pindex->nFlags << pindex->hashProofOfStake << pindex->nStakeModifier;
    uint256 hashChecksum = Hash(ss.begin(), ss.end());
    hashChecksum >>= (256 - 32);
    return static_cast<uint32_t>(hashChecksum.Get64());
}

// Check stake modifier hard checkpoints
bool CheckStakeModifierCheckpoints(int nHeight, uint32_t nStakeModifierChecksum)
{
    MapModifierCheckpoints& checkpoints = (fTestNet ? mapStakeModifierCheckpointsTestNet : mapStakeModifierCheckpoints);

    if (checkpoints.count(nHeight))
        return nStakeModifierChecksum == checkpoints[nHeight];
    return true;
}
